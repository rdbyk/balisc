
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[936] =
    {   0,
    16408,  123,  123,  132,  132,  114,  114,  110,  110,  145,
       84,  144,   80,   84,  144,   81,  144,   81,   84,  144,
       75,   84,  144,   78,   84,  144,   27,   84,  144,   75,
       84,  144,   30,   84,  144,   79,   84,  144,   34,   84,
      144,   35,   84,  144,   48,   84,  144,   47,   84,  144,
       37,   84,  144,   46,   84,  144,   67,   84,  144,   49,
       84,  144,   69,   84,  144,   38,   84,  144,   36,   84,
      144,   60,   84,  144,   64,   84,  144,   61,   84,  144,
       65,   84,  144,   50,   84,  144,   66,   84,  144,   51,
       84,  144,   75,   84,  144,   75,   84,  144,   75,   84,

      144,   75,   84,  144,   75,   84,  144,   75,   84,  144,
       75,   84,  144,   75,   84,  144,   75,   84,  144,   75,
       84,  144,   75,   84,  144,   39,   84,  144,   32,   84,
      144,   40,   84,  144,   26,   84,  144,   84,  144,   84,
      144,   84,  144,   84,  144,   84,  144,   84,  144,   84,
      144,   84,  144,   84,  144,   80,   84,  144,16408,   75,
       84,  144,   27,   84,  144,   75,   84,  144,   75,   84,
      144,   75,   84,  144,   75,   84,  144,   75,   84,  144,
       75,   84,  144,   75,   84,  144,   75,   84,  144,   75,
       84,  144,   75,   84,  144,   75,   84,  144,   75,   84,

      144,   84,  144,   84,  144,   84,  144,   84,  144,   84,
      144,   84,  144,   84,  144,   84,  144,   84,  144,  123,
      124,  144,  122,  144,  122,  124,  144,  121,  124,  144,
      120,  124,  144,  124,  144,  132,  133,  144,  131,  144,
      131,  133,  144,  129,  133,  144,  130,  133,  144,  133,
      144,  114,  115,  144,  113,  144,  113,  115,  144,  115,
      144,  115,  144,  110,  144,  109,  144,  109,  144,  108,
      144,  107,  108,  144,  104,  144,  104,  108,  144,  108,
      144,   99,  144,   80,   99,  144,   89,  144,   89,   99,
      144,   75,   99,  144,   78,   99,  144,   27,   99,  144,

       75,   99,  144,   30,   99,  144,   79,   99,  144,   85,
       99,  144,   86,   99,  144,   48,   99,  144,   93,   99,
      144,   37,   99,  144,   95,   99,  144,   67,   99,  144,
       49,   99,  144,   69,   99,  144,   38,   88,   99,  144,
       36,   99,  144,   60,   99,  144,   64,   99,  144,   61,
       99,  144,   65,   99,  144,   50,   99,  144,   91,   99,
      144,   51,   99,  144,   39,   99,  144,   32,   99,  144,
       92,   99,  144,   26,   99,  144,   99,  144,   99,  144,
       99,  144,   99,  144,   99,  144,   99,  144,   99,  144,
       99,  144,  143,  144,  134,  144,  137,  144,  137,  144,

       78,  144,   79,  144,  139,  143,  144,  136,  144,  143,
      144,  135,  144,  140,  143,  144,  138,  143,  144,  141,
      143,  144,  142,  143,  144,  144,   25,  144,  144,   25,
      144,  144,   25,  144,   25,  144,   25,  144,   25,  144,
       25,  144,   25,  144,   25,  144,   25,  144,   25,  144,
       25,  144,   25,  144,  144,  144,  144,  144,  144,  144,
      144,  144,   80,   82,   82,   81,   75,   75,    3,   29,
       75,    2,   28,   75,   31,   51,   41,   42,   68,   43,
       74,   44,   45,   76,   77,   73,   69,   62,   59,   58,
       63,   75,   75,   75,   17,   75,   75,   75,   75,   75,

        4,   75,   75,   75,   75,   75,   75,   75,   75,   33,
       75,   80,16408,   75,   75,    3,   29,   75,    2,   28,
       75,   75,   75,   75,   17,   75,   75,   75,   75,   75,
        4,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      123,  122,  116,  117,  118,  119,  132,  131,  125,  126,
      127,  128,  114,  113,  111,  112,  110,  109,  107,  104,
      105,  106,   80,   90,   87,   97,   98,   88,   89,   29,
       75,   28,   75,  102,   88,  143,  134,  137,   76,  143,
       77,  143,   25,   25,    3,   25,    2,   25,   25,   25,
       25,   17,   25,   25,   25,   25,   25,    4,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   83,   83,   55,
       52,   53,   54,   56,   72,   73,   70,   71,   57,   75,
       75,   75,   75,   75,    8,   75,   15,   75,   75,   75,
       75,   75,   75,   75,   75,   20,   75,   75,    1,   75,
     8216, 8216,   75,   75,   75,   75,   75,    8,   75,   15,
       75,   75,   75,   75,   75,   75,   75,   75,   20,   75,
       75,    1,   75,   94,   96,  103,  100,  101,   25,   25,
       25,   25,   25,    8,   25,   15,   25,   25,   25,   25,
       25,   25,   25,   25,   20,   25,   25,   75,   12,   75,
       75,   75,    6,   75,   75,   75,   75,   75,   75,   75,

       75,    5,   75,   75,    1,    1,   75,    1,    1,    1,
        1,    1,    1,    1,    1,   75, 8216,   75,   12,   75,
       75,   75,    6,   75,   75,   75,   75,   75,   75,   75,
       75,    5,   75,   75,    1,    1,   75,    1,    1,    1,
        1,    1,    1,    1,    1,   75,   25,   12,   25,   25,
       25,    6,   25,   25,   25,   25,   25,   25,   25,   25,
        5,   25,   25,   25,   75,   75,   18,   75,   21,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   16,
       75,    1,    1,    1,    1,    1,    1,    1,   75,   75,
       18,   75,   21,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   16,   75,    1, 8216,    1, 8216,    1,
        1,    1,    1,    1,    1,    1,   25,   25,   18,   25,
       21,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   16,   25,   75,    7,   75,   75,   75,   75,   23,
       75,   22,   75,    9,   75,   10,   75,    1,    1,    1,
       75,    7,   75,   75,   75,   75,   23,   75,   22,   75,
        9,   75,   10,   75,    1, 8216,    1,    1,    1,   25,
        7,   25,   25,   25,   25,   23,   25,   22,   25,    9,
       25,   10,   25,   75,   75,   75,   75,    1,   75,   75,
       75,   75,   75,    1,   75,   25,   25,   25,   25,   19,

       75,   75,   13,   75,   75,   19,   75,   75,   13,   75,
       75,   19,   25,   25,   13,   25,   25,   75,   11,   75,
       75,   11,   75,   25,   11,   25,   75,   75,   25,   14,
       75,   14,   75,   14,   25
    } ;

static yyconst flex_int16_t yy_accept[804] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  140,  142,  144,  146,  148,  150,  152,
      154,  156,  160,  163,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  204,  206,  208,
      210,  212,  214,  216,  218,  220,  223,  225,  228,  231,

      234,  236,  239,  241,  244,  247,  250,  252,  255,  257,
      260,  262,  264,  266,  268,  270,  272,  275,  277,  280,
      282,  284,  287,  289,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      341,  344,  347,  350,  353,  356,  359,  362,  365,  368,
      371,  374,  377,  379,  381,  383,  385,  387,  389,  391,
      393,  395,  397,  399,  401,  403,  405,  408,  410,  412,
      414,  417,  420,  423,  426,  427,  429,  430,  432,  433,
      435,  437,  439,  441,  443,  445,  447,  449,  451,  453,
      455,  456,  457,  458,  459,  460,  461,  462,  463,  464,

      465,  466,  466,  466,  467,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  472,  475,  476,  477,  477,  478,  479,
      480,  481,  482,  483,  484,  485,  485,  486,  487,  488,
      488,  488,  489,  490,  491,  492,  492,  493,  494,  495,
      497,  498,  499,  500,  501,  503,  504,  505,  506,  507,
      508,  509,  510,  511,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  519,  522,  523,  524,  525,  527,  528,
      529,  530,  531,  533,  534,  535,  536,  537,  538,  539,
      540,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  557,  558,  559,  560,  561,
      562,  563,  564,  565,  566,  567,  568,  568,  569,  570,
      572,  574,  574,  574,  575,  576,  577,  578,  579,  581,
      583,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  587,
      589,  590,  591,  592,  594,  595,  596,  597,  598,  600,

      601,  602,  603,  604,  605,  606,  607,  608,  608,  608,
      608,  608,  608,  608,  608,  609,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  611,  612,  613,  614,  615,  616,  617,  617,  618,
      618,  619,  620,  621,  622,  623,  624,  625,  627,  629,
      630,  631,  632,  633,  634,  635,  636,  638,  639,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  642,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  644,  645,  646,  647,  648,  650,
      652,  653,  654,  655,  656,  657,  658,  659,  661,  662,
      664,  664,  664,  664,  665,  666,  667,  668,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  670,  671,  672,  673,  674,  676,  678,
      679,  680,  681,  682,  683,  684,  685,  687,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  689,  691,
      692,  693,  695,  696,  697,  698,  699,  700,  701,  702,
      704,  705,  706,  708,  709,  710,  711,  712,  713,  714,
      715,  716,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      718,  718,  718,  718,  718,  718,  718,  719,  721,  722,
      723,  725,  726,  727,  728,  729,  730,  731,  732,  734,
      735,  736,  738,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  747,  747,  747,  747,  747,  747,  748,  750,
      751,  752,  754,  755,  756,  757,  758,  759,  760,  761,
      763,  764,  765,  766,  767,  769,  771,  772,  773,  774,
      775,  776,  777,  778,  779,  780,  782,  783,  784,  785,
      786,  787,  788,  789,  789,  789,  789,  789,  789,  789,
      789,  790,  791,  793,  795,  796,  797,  798,  799,  800,

      801,  802,  803,  804,  806,  808,  810,  811,  812,  813,
      814,  815,  816,  817,  818,  819,  821,  823,  824,  825,
      826,  827,  828,  829,  830,  831,  832,  834,  835,  837,
      838,  839,  840,  842,  844,  846,  848,  849,  850,  851,
      851,  851,  852,  854,  855,  856,  857,  859,  861,  863,
      865,  867,  868,  869,  870,  871,  873,  874,  875,  876,
      878,  880,  882,  884,  885,  886,  887,  888,  890,  891,
      892,  893,  894,  896,  897,  898,  899,  900,  902,  903,
      905,  906,  908,  909,  911,  912,  914,  915,  917,  918,
      919,  921,  922,  924,  925,  927,  928,  929,  930,  932,

      934,  936,  936
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,    5,   40,   41,    5,   42,   43,   44,   45,
       46,    5,    5,   47,   48,   49,   50,    5,   51,    5,
       52,    5,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   60,   59,   59,   59,
       61,    1,    1,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   65,   66,   67,   68,
       69,   69,   69,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    1,    6,
        8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
       10,    8,    8,    8,    1,    5,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[829] =
    {   0,
        0,   70,  138,  143,  148,  153,  158,  164,  169,  171,
      176,  181,  199,    0,  268,  323,  379,    0, 1081, 4136,
      184,  273,  278,  238, 4136,  247,  422, 1069, 4136, 4136,
     4136,  176, 4136, 4136, 4136,  318,  178,  331, 4136, 4136,
      174, 1053, 1050, 4136, 1048, 4136, 4136,  248,  325,  293,
      327,  424,  291,  426,  428,  430,  454,  467, 4136, 1007,
     4136, 1032,  451,  301,  460,  227,  465,  470,  439,  475,
      996,  535,  500,  481,  604,  532,  544,  546,  579,  581,
      586,  608,  610,  612,  636,  649,  495,  454,  633,  320,
      642,  647,  528,  652,  982,    0, 4136, 1032,  357,  454,

     4136,    0, 4136, 1021,  466,  570, 4136,    0, 4136, 1017,
      998,  946,    0, 4136,  901, 4136,  900, 4136,  897,  132,
     4136,  712,  715,  716,  696, 4136,  684,  727,  885, 4136,
     4136, 4136,  599,  869, 4136,  867,  750,  669,  753,  876,
     4136,  481,  849,  847, 4136,  826, 4136, 4136, 4136,  787,
     4136,  816,  681,  498,  727,  483,  735,  739,  744,  779,
        0,  824, 4136,  786, 4136, 4136,    0, 4136,  151, 4136,
        0,    0,    0,    0, 4136,  744,  753,  796,  305,  799,
      803,  801,  828,  805,  840,  846,  852,  854,  859,  881,
      854,  585,  865,  597,  874,  858,  879,  725,  677, 4136,

      775,  939,  942,  756,  919,  892,  636,  912,  663,  917,
      906,  922,  704,    0,  927,  714,  932,  676,  937,  941,
      946,  670,  980,  982, 4136, 4136,    0, 4136,  600,  667,
      645,  996,  643, 4136, 4136,    0, 4136,  999, 1021,  607,
      743, 4136, 4136, 4136, 4136,    0, 1013, 1015, 1021, 1028,
     1040, 1043, 1046, 1055, 1058, 1062, 1070, 1077, 1084, 1093,
     1099, 1106, 4136, 1101, 1099, 1104, 1109, 1114, 1119, 1124,
     1129, 1134, 1194, 1141, 1150, 1164,  868, 1169,  686, 1174,
     1178, 1183,  601,  851, 1226, 1188, 1093, 1209,  707, 1219,
     1192, 1224,  599, 1269, 1229, 1213, 1234,  839, 1239, 1243,

     1248,  595, 1291, 1313, 1315, 1317, 1322, 1319, 1331, 1344,
     1347, 1356, 1349, 1363, 1361, 1378, 1385, 1390, 1394, 1403,
     1408, 1253, 1264, 1401, 1406, 1411, 1416, 1421, 1426,    0,
     4136, 4136, 4136, 4136, 4136,    0, 4136, 4136, 4136, 4136,
     4136,    0, 4136, 4136, 4136,    0, 4136,  640, 4136, 4136,
     4136, 1486, 4136, 4136,  164,  594,  617,  627, 1433, 1465,
     1470,  602,  577,  574,  582,    0,  580, 4136,    0,    0,
     1479, 1463, 1256, 1472,  898, 1477, 1268, 1482,  520, 1482,
     1496, 1390, 1501,  904, 1506, 1452, 1511,  423, 1545, 1547,
     1549, 1551, 1563, 1554, 1576, 1581, 1588, 1593, 1600, 1605,

     1612, 1619, 1624, 1628, 1641, 1643, 1646, 1639, 1644, 1649,
     1654, 1659, 1664, 1669, 4136,  475, 1674, 1679, 1684, 1689,
     1694, 1699, 1704, 1709, 1714, 1719, 1724, 1729, 1734, 1739,
     4136, 4136, 4136, 4136, 4136, 4136, 1782,  443,  356,  354,
      346, 4136, 1776, 1774, 1778, 1793, 1800, 1802, 1805, 1807,
     1819, 1824, 1831, 1833, 1836, 1838, 1850, 1862, 1911, 1835,
     1849, 1925, 1985, 1931, 1456, 1936,  956, 1941, 1628, 1946,
      295, 2006, 1952, 1466, 1957,  970, 1962, 1966, 1971,  286,
     1976, 1981, 1999, 2004, 2020, 2025, 2030, 4136, 2090, 2036,
     2049, 2058, 2063, 2068, 2073, 2078, 2083, 2088, 2093, 2098,

     2103, 2108, 2113, 2147, 2149, 2154, 2156, 2163, 2171, 2178,
     2180, 2185, 2193, 2197, 2202, 2209, 2216, 2221, 2224, 2273,
     2287, 2292, 2297,  296,  294,  265,  256,  175, 2302, 2307,
     2312, 2317, 2322, 2327, 2332, 2337, 2342, 2347, 2352, 2357,
     2362, 2367, 2401, 2403, 2408, 2410, 2417, 2425, 2432, 2434,
     2439, 2447, 2451, 2456, 2463, 2470, 2475, 2478, 2471, 2476,
     2481, 2486, 2491, 2496, 2501, 2506, 2511, 2545, 2547, 2549,
     2551, 2554, 2573, 2576, 2579, 2585, 2588, 2602, 2604, 2616,
     2618,    0,    0, 2601, 1843, 2611,  988, 2616, 1985, 2621,
      133, 2655, 2628, 2638, 2648, 2653, 2658, 2663, 2668, 2673,

     2678, 2683, 2688, 2693, 2698, 2703, 2708, 2713, 2718, 2778,
     2724, 2737, 2746, 2751, 2756, 2761, 2795, 2797, 2799, 2801,
     2804, 2823, 2826, 2829, 2835, 2838, 2852, 2854, 2866, 2868,
     2897,    0, 2866, 2039, 2871, 1057, 2876, 2632, 2881,   86,
     2915, 2888, 2898, 2908, 2913, 2918, 2923, 2957, 2959, 2961,
     2963, 2966, 2985, 2988, 2991, 2997, 3000, 3014, 3016, 3028,
     3030, 3032, 3044,    0, 3046, 3058, 3060, 3062, 3074, 3086,
     3089, 3092, 3104, 3108, 3116, 3122, 3109, 3115, 3120, 3125,
     3130, 3135, 3140, 3145, 3150, 3155, 3160, 3165, 3170,    0,
     3204,    0, 3206, 3208, 3211, 3213, 3220, 3235, 3238, 3242,

     3254, 3257, 3269, 3266,    0, 3298, 3253, 3265, 3270, 3275,
     3280, 3285, 3290, 3324,    0, 3326, 3328, 3331, 3333, 3340,
     3355, 3358, 3362, 3374, 3377, 3389, 3386, 3392, 3404, 3408,
     3417, 3411, 3420, 3426, 3433, 3439, 3426, 3432, 3437,    0,
        0, 3471, 3473, 3475, 3477, 3489, 3480, 3503, 3505, 3507,
     3537, 3490, 3504, 3509, 3543, 3545, 3547, 3549, 3561, 3552,
     3575, 3577, 3579, 3583, 3591, 3605, 3607,    0, 3609, 3613,
     3631, 3635,    0, 3639, 3643, 3657, 3661, 3665, 3679, 3683,
     3687, 3695, 3701, 3709, 3717, 3723, 3732, 3725, 3739, 3741,
     3747, 3754, 3756, 3763, 3769, 3778, 3785, 3787, 3782, 3800,

     3809, 4136, 3858, 3870, 3882, 3894, 3906, 3918, 3926, 3934,
     3945, 3951, 3959, 3971, 3983, 3995, 4007, 4019, 4027, 4035,
     4047, 4058, 4069, 4079, 4087, 4099, 4111, 4123
    } ;

static yyconst flex_int16_t yy_def[829] =
    {   0,
      802,  802,  803,  803,  804,  804,  805,  805,  806,  806,
      807,  807,  802,   13,  808,  808,  802,   17,  802,  802,
      802,  802,  802,  809,  802,  810,  809,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  811,  812,  813,  812,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  814,  802,  802,  802,  802,

      802,  815,  802,  802,  802,  802,  802,  816,  802,  802,
      802,  802,  817,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,   27,  802,  810,   27,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      818,  802,  802,  802,  802,  802,  818,  802,  818,  802,
      818,  818,  818,  818,  802,  819,  820,  819,  802,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,   27,  802,  802,  802,  802,  802,
      802,  802,  802,  127,  802,  802,  802,  802,  802,  802,
      802,  802,   27,   27,  802,  802,  821,  802,  802,  802,
      802,  802,  802,  802,  802,  822,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  823,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,  802,   27,  802,  802,  802,  802,  802,  802,
      802,  802,  811,  824,  825,  802,  802,  802,  802,  802,
      802,  802,  802,  826,   75,  802,  802,  802,  802,  802,
      802,  802,  802,  813,  802,  802,  802,  802,  802,  802,

      802,  802,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  802,  802,  802,  802,  802,  802,  802,  802,  814,
      802,  802,  802,  802,  802,  815,  802,  802,  802,  802,
      802,  816,  802,  802,  802,  817,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,   27,
       27,  802,  802,  802,  802,  818,  802,  802,  818,  818,
      178,  802,  802,  802,  802,  802,  802,  802,  802,  820,
      802,  802,  802,  802,  802,  802,  802,  802,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  802,  802,
      802,  802,  824,  802,  802,  802,  802,  802,  802,  802,
      802,  825,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  826,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  802,  802,
      802,  802,  802,  802,  802,  802,  802,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  827,  459,  827,  827,  827,  827,  827,  827,  827,
      827,   27,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  826,
      802,  802,  802,  802,  802,  802,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      828,  520,  827,  827,  827,  827,  827,  827,  827,  827,
       75,  802,  802,  802,  802,  802,  802,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,   27,  127,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  827,  827,  827,  827,
      827,  827,  827,  802,  802,  802,  802,  802,  802,  463,
       75,  294,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,  827,  828,  827,  827,  827,  827,
      827,  827,  827,  178,  380,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  827,  827,  827,  463,
      472,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      828,  827,  827,  827,  178,  178,  178,  178,  178,  178,
      178,  178,  178,   27,   27,   27,   27,  459,   75,   75,
       75,   75,  520,  178,  178,  178,  178,   27,   27,   27,
       27,   75,   75,   75,   75,  178,  178,  178,  178,   27,
       27,   75,   75,  178,  178,   27,   75,  178,   27,   75,

      178,    0,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802
    } ;

static yyconst flex_int16_t yy_nxt[4207] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   20,   24,   24,   24,   24,   44,
       45,   46,   47,   24,   48,   49,   50,   51,   52,   24,
       53,   24,   24,   24,   24,   54,   55,   56,   57,   24,
       58,   24,   59,   60,   61,   62,   20,   20,   20,   20,
       20,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       20,   72,   22,   23,   73,   25,   74,   75,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   20,   73,   73,   73,   73,   44,

       45,   46,   47,   73,   76,   77,   78,   79,   80,   73,
       81,   73,   73,   73,   73,   82,   83,   84,   85,   73,
       86,   73,   59,   60,   61,   62,   20,   20,   20,   20,
       20,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       97,   98,  713,   99,  350,   97,   98,  100,   99,  351,
      103,  104,  100,  105,  101,  103,  104,  106,  105,  101,
      109,  110,  106,  369,  107,  524,  109,  110,  370,  107,
      111,  114,  115,  114,  115,  112,  111,  117,  118,  119,
      362,  112,  117,  118,  119,  199,  200,  201,  226,  683,
      235,  528,  227,  120,  236,  237,  242,  243,  120,  121,

      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143,  144,  121,  125,  125,  125,  125,  145,  146,
      147,  148,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  149,  150,  151,  152,  121,  121,  121,  121,  121,
      153,  154,  155,  156,  157,  157,  158,  159,  160,  162,
      163,  164,  527,  165,  202,  205,  205,  166,  167,  202,
      204,  526,  168,  267,  267,  169,  205,  203,  170,  171,
      172,  173,  203,  203,  247,  525,  205,  524,  203,  206,

      207,  208,  209,  210,  210,  211,  212,  213,  215,  216,
      217,  218,  219,  219,  220,  221,  222,  235,  205,  205,
      205,  205,  237,  174,  162,  163,  164,  228,  165,  255,
      229,  205,  166,  167,  230,  231,  232,  168,  250,  205,
      169,  205,  606,  170,  171,  172,  173,  238,  233,  239,
      234,  599,  205,  205,  205,  205,  240,  241,  248,  265,
      265,  265,  332,  205,  441,  205,  333,  240,  241,  251,
      249,  252,  441,  205,  439,  205,  324,  324,  174,  175,
      175,  175,  175,  176,  175,  177,  178,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  179,  175,  175,  175,

      175,  175,  175,  175,  176,  176,  176,  176,  175,  175,
      175,  175,  176,  180,  181,  182,  183,  184,  176,  185,
      176,  176,  176,  176,  186,  187,  188,  189,  176,  190,
      176,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      191,  192,  193,  194,  195,  195,  196,  197,  198,  223,
      224,  205,  205,  205,  205,  205,  205,  205,  205,  334,
      223,  439,  205,  335,  205,  257,  205,  258,  205,  253,
      224,  338,  205,  254,  256,  339,  205,  415,  205,  542,
      259,  205,  205,  206,  207,  208,  209,  210,  210,  211,
      212,  213,  205,  260,  205,  205,  270,  270,  270,  270,

      261,  284,  205,  242,  243,  205,  262,  264,  264,  264,
      264,  264,  322,  322,  322,  205,  266,  266,  266,  266,
      266,  268,  268,  268,  268,  268,  268,  268,  268,  269,
      268,  271,  271,  271,  271,  271,  273,  200,  201,  267,
      267,  275,  295,  296,  297,  298,  299,  299,  300,  301,
      302,  321,  321,  321,  321,  321,  265,  265,  265,  285,
      285,  286,  287,  288,  289,  290,  290,  291,  292,  293,
      285,  285,  285,  285,  285,  340,  535,  306,  305,  341,
      285,  367,  285,  365,  285,  327,  327,  327,  327,  307,
      364,  308,  285,  528,  285,  525,  276,  277,  278,  279,

      280,  280,  281,  282,  283,  284,  285,  285,  285,  285,
      363,  226,  234,  285,  285,  227,  432,  285,  527,  285,
      438,  309,  438,  310,  313,  439,  311,  285,  365,  285,
      312,  303,  304,  526,  285,  285,  285,  285,  285,  285,
      285,  348,  303,  408,  408,  408,  285,  315,  285,  316,
      285,  503,  304,  410,  410,  496,  314,  487,  285,  434,
      285,  433,  317,  285,  285,  286,  287,  288,  289,  290,
      290,  291,  292,  293,  285,  318,  285,  285,  199,  200,
      201,  235,  319,  230,  285,  236,  237,  285,  320,  323,
      323,  323,  323,  323,  417,  417,  417,  285,  325,  325,

      325,  325,  325,  325,  325,  325,  326,  325,  328,  328,
      328,  328,  328,  352,  200,  201,  202,  202,  359,  419,
      419,  353,  354,  205,  205,  355,  430,  356,  357,  203,
      203,  358,  426,  426,  205,  203,  203,  264,  264,  264,
      264,  264,  483,  483,  205,  215,  216,  217,  218,  219,
      219,  220,  221,  222,  360,  361,  440,  202,  440,  228,
      423,  441,  229,  492,  492,  360,  364,  231,  232,  238,
      203,  239,  424,  424,  424,  361,  203,  200,  240,  241,
      233,  414,  234,  266,  266,  266,  266,  266,  368,  240,
      241,  268,  268,  268,  268,  268,  270,  270,  270,  270,

      271,  271,  271,  271,  271,  372,  373,  374,  375,  376,
      376,  377,  378,  379,  381,  382,  383,  384,  385,  385,
      386,  387,  388,  389,  390,  367,  371,  371,  371,  371,
      371,  371,  371,  371,  389,  272,  392,  371,  243,  371,
      263,  371,  246,  371,  390,  391,  394,  371,  393,  371,
      397,  371,  284,  371,  398,  371,  371,  372,  373,  374,
      375,  376,  376,  377,  378,  379,  371,  371,  371,  245,
      395,  244,  396,  371,  371,  489,  371,  365,  399,  371,
      371,  371,  371,  363,  371,  362,  371,  371,  371,  401,
      371,  402,  371,  225,  400,  499,  499,  371,  404,  349,

      371,  348,  371,  347,  403,  405,  489,  371,  371,  371,
      407,  407,  407,  407,  407,  412,  412,  412,  412,  371,
      406,  409,  409,  409,  409,  409,  481,  481,  481,  371,
      411,  411,  411,  411,  411,  413,  413,  413,  413,  413,
      202,  415,  416,  202,  415,  416,  205,  205,  205,  205,
      205,  205,  205,  203,  531,  531,  203,  205,  345,  203,
      538,  538,  203,  421,  421,  421,  421,  205,  418,  418,
      418,  418,  418,  420,  420,  420,  420,  420,  422,  422,
      422,  422,  422,  214,  214,  214,  214,  214,  425,  425,
      425,  425,  425,  427,  427,  427,  427,  427,  428,  428,

      428,  428,  429,  429,  429,  429,  429,  205,  205,  205,
      205,  436,  595,  595,  232,  344,  436,  437,  205,  343,
      205,  240,  241,  337,  240,  241,  602,  602,  205,  436,
      205,  436,  240,  241,  331,  240,  241,  238,  329,  239,
      205,  205,  205,  205,  679,  679,  240,  241,  205,  205,
      443,  205,  272,  205,  243,  205,  205,  240,  241,  205,
      263,  205,  444,  445,  246,  446,  205,  205,  205,  205,
      205,  205,  245,  205,  205,  244,  205,  225,  205,  448,
      802,  205,  205,  205,  205,  205,  205,  447,  205,  205,
      205,  205,  449,  205,  205,  802,  205,  205,  205,  450,

      205,  451,  802,  205,  205,  205,  205,  802,  205,  802,
      205,  205,  205,  709,  709,  205,  802,  452,  453,  454,
      205,  205,  205,  802,  455,  205,  205,  205,  205,  205,
      456,  205,  205,  205,  205,  802,  802,  205,  802,  205,
      802,  205,  284,  802,  205,  802,  458,  205,  802,  205,
      457,  490,  490,  490,  205,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  459,
      460,  460,  460,  460,  460,  461,  461,  461,  461,  461,
      462,  462,  462,  462,  462,  273,  200,  201,  802,  802,

      275,  802,  464,  465,  466,  467,  468,  468,  469,  470,
      471,  473,  474,  475,  476,  477,  477,  478,  479,  480,
      274,  274,  274,  274,  274,  482,  482,  482,  482,  482,
      484,  484,  484,  484,  484,  485,  485,  485,  485,  486,
      486,  486,  486,  486,  285,  285,  285,  285,  285,  494,
      494,  494,  494,  285,  285,  276,  277,  278,  279,  280,
      280,  281,  282,  283,  285,  491,  491,  491,  491,  491,
      284,  497,  497,  497,  285,  493,  493,  493,  493,  493,
      495,  495,  495,  495,  495,  294,  294,  294,  294,  294,
      498,  498,  498,  498,  498,  500,  500,  500,  500,  500,

      501,  501,  501,  501,  502,  502,  502,  502,  502,  321,
      321,  321,  321,  321,  529,  529,  529,  802,  285,  285,
      321,  321,  321,  321,  321,  533,  533,  533,  533,  285,
      295,  296,  297,  298,  299,  299,  300,  301,  302,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  802,  285,
      285,  285,  504,  285,  802,  285,  802,  285,  285,  285,
      285,  285,  802,  285,  505,  506,  507,  285,  802,  285,
      285,  285,  285,  802,  285,  285,  285,  285,  508,  285,
      509,  802,  285,  285,  285,  285,  802,  285,  285,  285,
      285,  285,  285,  510,  285,  285,  802,  285,  802,  285,

      511,  285,  512,  802,  285,  285,  285,  802,  513,  514,
      802,  285,  285,  285,  802,  802,  285,  285,  285,  802,
      515,  285,  285,  285,  802,  516,  285,  517,  285,  802,
      285,  285,  285,  285,  202,  285,  285,  802,  285,  802,
      802,  285,  285,  519,  802,  518,  285,  203,  536,  536,
      536,  285,  802,  203,  802,  802,  285,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  520,  521,  521,  521,  521,  521,  522,  522,  522,
      522,  522,  523,  523,  523,  523,  523,  352,  200,  201,
      802,  802,  205,  205,  802,  353,  354,  205,  205,  355,

      802,  356,  357,  205,  802,  358,  371,  371,  205,  540,
      540,  540,  540,  205,  593,  593,  593,  371,  205,  371,
      371,  371,  371,  371,  600,  600,  600,  371,  530,  530,
      530,  530,  530,  532,  532,  532,  532,  532,  534,  534,
      534,  534,  534,  381,  382,  383,  384,  385,  385,  386,
      387,  388,  380,  380,  380,  380,  380,  537,  537,  537,
      537,  537,  539,  539,  539,  539,  539,  541,  541,  541,
      541,  541,  371,  371,  371,  371,  371,  371,  371,  371,
      802,  371,  371,  371,  802,  371,  543,  371,  802,  371,
      371,  371,  371,  371,  802,  371,  802,  371,  544,  545,

      802,  371,  371,  371,  371,  802,  802,  546,  371,  371,
      802,  371,  802,  802,  371,  371,  371,  548,  802,  371,
      371,  371,  802,  547,  371,  802,  371,  371,  371,  371,
      802,  371,  371,  371,  549,  802,  371,  550,  371,  371,
      371,  371,  802,  371,  551,  802,  371,  371,  371,  802,
      371,  371,  371,  371,  802,  371,  371,  371,  802,  552,
      553,  554,  371,  802,  555,  556,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  802,  371,  802,  802,  371,
      802,  371,  802,  558,  371,  597,  597,  597,  597,  371,
      802,  371,  557,  802,  371,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  559,  559,  559,  559,  559,
      560,  560,  560,  560,  560,  561,  561,  561,  561,  561,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      562,  562,  562,  562,  562,  563,  563,  563,  563,  563,
      564,  564,  564,  564,  564,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  565,  565,  565,  565,  565,
      566,  566,  566,  566,  566,  567,  567,  567,  567,  567,

      437,  205,  205,  205,  205,  205,  205,  240,  241,  568,
      802,  569,  205,  570,  205,  802,  205,  802,  240,  241,
      205,  205,  205,  802,  205,  802,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  802,  572,  205,  802,
      573,  571,  574,  205,  802,  205,  205,  205,  205,  802,
      205,  205,  205,  205,  802,  205,  575,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  802,  205,
      578,  205,  205,  576,  205,  802,  205,  205,  205,  205,
      577,  205,  580,  802,  579,  802,  205,  802,  205,  205,
      205,  592,  592,  592,  592,  592,  802,  802,  205,  802,

      205,  677,  677,  677,  581,  592,  592,  592,  592,  592,
      205,  582,  582,  802,  582,  583,  582,  583,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  583,
      582,  582,  582,  582,  582,  582,  583,  583,  583,  583,
      582,  582,  582,  582,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  584,  585,  586,  587,  588,  588,  589,  590,
      591,  592,  592,  592,  592,  592,  284,  463,  463,  463,
      463,  463,  594,  594,  594,  594,  594,  596,  596,  596,

      596,  596,  598,  598,  598,  598,  598,  284,  472,  472,
      472,  472,  472,  601,  601,  601,  601,  601,  603,  603,
      603,  603,  603,  604,  604,  604,  604,  605,  605,  605,
      605,  605,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  681,  681,  681,  681,  464,  465,  466,  467,
      468,  468,  469,  470,  471,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  802,  802,  473,  474,  475,
      476,  477,  477,  478,  479,  480,  607,  607,  607,  607,
      607,  608,  608,  608,  608,  608,  609,  609,  609,  609,
      609,  610,  285,  285,  285,  285,  285,  707,  707,  707,

      488,  802,  802,  802,  488,  285,  285,  285,  285,  285,
      488,  488,  802,  488,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  611,  611,  611,  611,  611,  612,
      612,  612,  612,  612,  613,  613,  613,  613,  613,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  614,
      614,  614,  614,  614,  615,  615,  615,  615,  615,  616,
      616,  616,  616,  616,  285,  285,  285,  285,  802,  802,
      617,  285,  285,  285,  285,  285,  618,  285,  802,  619,
      285,  285,  285,  802,  285,  285,  802,  285,  285,  285,

      621,  285,  285,  802,  620,  285,  285,  285,  285,  622,
      802,  285,  285,  285,  802,  623,  285,  802,  285,  285,
      285,  285,  624,  285,  285,  285,  285,  802,  285,  285,
      285,  285,  802,  285,  802,  285,  285,  285,  802,  627,
      285,  285,  625,  285,  285,  285,  626,  285,  285,  285,
      285,  285,  285,  802,  285,  802,  802,  628,  802,  285,
      629,  802,  285,  802,  285,  802,  630,  802,  802,  285,
      802,  802,  285,  582,  631,  802,  582,  632,  582,  632,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  632,  582,  582,  582,  582,  582,  582,  632,  632,

      632,  632,  582,  582,  582,  582,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  633,  634,  635,  636,  637,  637,
      638,  639,  640,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  642,  642,
      642,  642,  642,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  645,  645,  645,  645,  645,  646,  646,
      646,  646,  646,  647,  647,  647,  647,  647,  371,  371,
      371,  371,  802,  802,  648,  371,  371,  371,  371,  371,
      649,  371,  802,  650,  371,  371,  371,  802,  371,  371,
      802,  371,  371,  371,  652,  371,  371,  802,  651,  371,
      371,  371,  371,  653,  802,  371,  371,  371,  802,  654,
      371,  802,  371,  371,  371,  371,  655,  371,  371,  371,
      371,  802,  371,  371,  371,  371,  802,  371,  802,  371,
      371,  371,  802,  658,  371,  371,  656,  371,  371,  371,

      657,  371,  371,  371,  371,  371,  371,  802,  371,  802,
      802,  659,  802,  371,  660,  802,  371,  802,  371,  802,
      661,  802,  802,  371,  802,  802,  371,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  205,  205,  205,  205,  205,  205,  205,  205,
      802,  205,  205,  205,  802,  205,  665,  205,  666,  205,
      802,  667,  205,  205,  668,  205,  802,  205,  802,  205,

      205,  205,  205,  205,  205,  802,  205,  205,  802,  802,
      802,  205,  205,  205,  205,  205,  205,  205,  802,  802,
      802,  205,  669,  205,  670,  671,  205,  205,  672,  205,
      205,  205,  205,  205,  673,  802,  205,  674,  802,  675,
      205,  802,  205,  205,  205,  205,  205,  802,  802,  802,
      205,  802,  205,  802,  205,  676,  205,  583,  583,  583,
      583,  583,  802,  802,  205,  802,  205,  678,  678,  678,
      678,  678,  680,  680,  680,  680,  680,  682,  682,  682,
      682,  682,  205,  205,  463,  463,  463,  463,  463,  711,
      711,  711,  711,  205,  463,  463,  463,  463,  463,  802,

      802,  802,  802,  205,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  684,  684,  684,  684,  684,  685,
      685,  685,  685,  685,  686,  686,  686,  686,  686,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  687,
      687,  687,  687,  687,  688,  688,  688,  688,  688,  689,
      689,  689,  689,  689,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  610,
      691,  691,  691,  691,  691,  802,  802,  802,  488,  802,
      802,  802,  488,  691,  691,  691,  691,  691,  488,  488,

      802,  488,  691,  691,  691,  691,  691,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  285,  285,  285,  285,  285,  285,  285,  285,
      802,  285,  285,  285,  802,  285,  693,  285,  694,  285,
      802,  695,  285,  285,  696,  285,  802,  285,  802,  285,
      285,  285,  285,  285,  285,  802,  285,  285,  802,  802,
      802,  285,  285,  285,  285,  285,  285,  285,  802,  802,
      802,  285,  697,  285,  698,  699,  285,  285,  700,  285,
      285,  285,  285,  285,  701,  802,  285,  702,  802,  703,
      285,  802,  285,  285,  285,  285,  285,  802,  631,  488,

      285,  802,  285,  802,  285,  704,  285,  582,  802,  802,
      802,  582,  802,  802,  285,  802,  285,  582,  582,  582,
      582,  706,  632,  632,  632,  632,  632,  708,  708,  708,
      708,  708,  710,  710,  710,  710,  710,  712,  712,  712,
      712,  712,  285,  285,  714,  714,  714,  714,  714,  802,
      802,  802,  706,  285,  714,  714,  714,  714,  714,  802,
      802,  802,  802,  285,  714,  714,  714,  714,  714,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  371,  371,  371,  371,  371,  371,
      371,  371,  802,  371,  371,  371,  802,  371,  716,  371,

      717,  371,  802,  718,  371,  371,  719,  371,  802,  371,
      802,  371,  371,  371,  371,  371,  371,  802,  371,  371,
      802,  802,  802,  371,  371,  371,  371,  371,  371,  371,
      802,  802,  802,  371,  720,  371,  721,  722,  371,  371,
      723,  371,  371,  371,  371,  371,  724,  802,  371,  725,
      802,  726,  371,  802,  371,  371,  371,  371,  371,  371,
      371,  802,  371,  802,  371,  802,  371,  727,  371,  802,
      371,  205,  205,  205,  205,  802,  371,  802,  371,  802,
      371,  802,  205,  802,  205,  205,  205,  205,  205,  205,
      205,  802,  205,  802,  205,  802,  205,  802,  205,  802,

      729,  205,  205,  802,  728,  802,  205,  802,  205,  802,
      205,  802,  205,  205,  205,  802,  205,  205,  730,  205,
      205,  802,  205,  802,  205,  802,  731,  205,  802,  733,
      205,  205,  205,  802,  205,  205,  205,  205,  802,  732,
      205,  802,  205,  205,  205,  802,  205,  802,  734,  205,
      205,  802,  205,  802,  205,  736,  735,  802,  802,  802,
      205,  802,  802,  802,  205,  583,  583,  583,  583,  583,
      205,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  737,  737,  737,  737,
      737,  738,  738,  738,  738,  738,  739,  739,  739,  739,

      739,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  285,  285,  285,  285,  285,  285,  802,  285,  285,
      285,  285,  285,  802,  285,  802,  285,  285,  285,  285,
      802,  743,  285,  802,  285,  742,  285,  802,  285,  285,
      802,  285,  285,  285,  744,  285,  285,  802,  285,  285,
      285,  802,  802,  285,  802,  745,  285,  802,  802,  747,
      285,  285,  285,  285,  285,  285,  285,  802,  746,  802,
      285,  802,  285,  285,  285,  285,  285,  285,  748,  751,

      488,  802,  285,  802,  285,  749,  802,  285,  750,  632,
      632,  632,  632,  632,  285,  802,  802,  285,  802,  802,
      582,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  752,  752,  752,  752,
      752,  753,  753,  753,  753,  753,  754,  754,  754,  754,
      754,  371,  371,  371,  371,  371,  371,  802,  371,  371,
      371,  371,  371,  802,  371,  802,  371,  371,  371,  371,
      802,  756,  371,  802,  371,  755,  371,  802,  371,  371,
      802,  371,  371,  371,  757,  371,  371,  802,  371,  371,
      371,  802,  802,  371,  802,  758,  371,  802,  802,  760,

      371,  371,  371,  371,  371,  371,  371,  802,  759,  802,
      371,  802,  371,  371,  371,  371,  371,  371,  761,  205,
      205,  802,  371,  802,  371,  762,  802,  371,  763,  802,
      205,  205,  205,  802,  371,  205,  205,  371,  205,  205,
      205,  764,  205,  765,  205,  205,  205,  205,  205,  205,
      802,  767,  205,  205,  205,  205,  205,  802,  205,  205,
      205,  205,  766,  802,  205,  205,  205,  205,  205,  802,
      802,  205,  802,  802,  205,  802,  802,  205,  802,  802,
      802,  205,  768,  768,  768,  768,  768,  205,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  285,  285,

      285,  285,  285,  285,  285,  285,  802,  285,  285,  285,
      770,  285,  802,  285,  802,  285,  285,  285,  285,  285,
      769,  285,  771,  285,  802,  285,  802,  285,  285,  772,
      285,  285,  285,  285,  285,  285,  802,  285,  751,  488,
      802,  285,  802,  285,  802,  285,  773,  773,  773,  773,
      773,  285,  802,  285,  802,  285,  802,  802,  802,  582,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      371,  371,  371,  371,  371,  371,  371,  371,  802,  371,
      371,  371,  775,  371,  802,  371,  802,  371,  371,  371,
      371,  371,  774,  371,  776,  371,  802,  371,  802,  371,

      371,  777,  371,  371,  371,  371,  371,  371,  802,  371,
      205,  205,  802,  371,  802,  371,  802,  371,  205,  205,
      778,  205,  802,  371,  802,  371,  802,  371,  802,  205,
      802,  205,  205,  205,  205,  205,  285,  285,  802,  779,
      285,  285,  802,  205,  802,  205,  782,  285,  802,  780,
      802,  285,  802,  205,  781,  205,  802,  285,  285,  285,
      802,  783,  285,  285,  802,  802,  371,  371,  802,  285,
      371,  371,  802,  285,  802,  784,  786,  371,  802,  285,
      802,  371,  785,  285,  371,  371,  802,  371,  371,  371,
      802,  787,  205,  205,  802,  371,  802,  802,  802,  371,

      802,  788,  802,  205,  802,  371,  205,  205,  789,  371,
      205,  205,  802,  205,  205,  205,  802,  205,  802,  790,
      802,  205,  285,  285,  791,  205,  802,  205,  285,  285,
      802,  205,  802,  285,  802,  205,  285,  285,  802,  285,
      802,  792,  802,  285,  285,  285,  802,  285,  802,  285,
      371,  371,  371,  371,  793,  285,  802,  285,  802,  371,
      371,  371,  802,  371,  802,  285,  371,  371,  205,  205,
      371,  371,  794,  371,  205,  205,  795,  371,  802,  205,
      371,  285,  285,  285,  285,  205,  796,  371,  802,  205,
      371,  371,  285,  802,  285,  205,  371,  371,  802,  797,

      802,  371,  285,  802,  285,  205,  205,  371,  798,  205,
      205,  371,  285,  285,  371,  371,  205,  371,  802,  802,
      205,  802,  799,  285,  802,  371,  205,  285,  285,  800,
      205,  801,  802,  285,  802,  371,  371,  371,  285,  802,
      802,  802,  802,  802,  802,  802,  802,  371,  285,  802,
      802,  802,  802,  802,  802,  802,  802,  371,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      205,  802,  802,  802,  802,  802,  802,  205,  214,  802,
      802,  802,  802,  802,  802,  214,  274,  274,  274,  274,
      802,  274,  285,  802,  802,  285,  802,  802,  802,  802,
      802,  802,  285,  294,  802,  802,  802,  802,  802,  802,
      294,  330,  330,  802,  802,  330,  802,  330,  330,  330,
      330,  802,  330,  336,  336,  802,  802,  336,  802,  336,
      336,  336,  336,  802,  336,  342,  342,  802,  802,  342,

      342,  342,  342,  802,  342,  342,  342,  346,  346,  802,
      802,  346,  346,  346,  346,  346,  346,  346,  346,  366,
      802,  802,  802,  366,  802,  366,  366,  366,  802,  366,
      366,  371,  802,  802,  802,  802,  802,  802,  371,  380,
      802,  802,  802,  802,  802,  802,  380,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      463,  802,  802,  463,  802,  802,  802,  802,  802,  802,
      463,  472,  802,  802,  802,  802,  802,  802,  472,  488,

      488,  488,  488,  488,  488,  488,  802,  488,  802,  488,
      488,  582,  582,  802,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,   19,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802
    } ;

static yyconst flex_int16_t yy_chk[4207] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,  640,    3,  120,    4,    4,    3,    4,  120,
        5,    5,    4,    5,    3,    6,    6,    5,    6,    4,
        7,    7,    6,  169,    5,  355,    8,    8,  169,    6,
        7,    9,    9,   10,   10,    7,    8,   11,   11,   11,
      355,    8,   12,   12,   12,   21,   21,   21,   32,  591,
       37,  528,   32,   11,   37,   37,   41,   41,   12,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   15,
       15,   15,  527,   15,   22,   48,   48,   15,   15,   23,
       23,  526,   15,   66,   66,   15,   48,   22,   15,   15,
       15,   15,   23,   22,   48,  525,   48,  524,   23,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  179,   53,   53,
       50,   50,  179,   15,   16,   16,   16,   36,   16,   53,
       36,   50,   16,   16,   36,   36,   36,   16,   50,   53,
       16,   50,  480,   16,   16,   16,   16,   38,   36,   38,
       36,  471,   49,   49,   51,   51,   38,   38,   49,   64,
       64,   64,   99,   49,  441,   51,   99,   38,   38,   51,
       49,   51,  440,   49,  439,   51,   90,   90,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   27,
       27,   52,   52,   54,   54,   55,   55,   56,   56,  100,
       27,  438,   52,  100,   54,   55,   55,   56,   56,   52,
       27,  105,   52,   52,   54,  105,   55,  416,   56,  388,
       56,   57,   57,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   57,   57,   58,   58,   69,   69,   69,   69,

       57,   73,   57,  142,  142,   58,   58,   63,   63,   63,
       63,   63,   88,   88,   88,   58,   65,   65,   65,   65,
       65,   67,   67,   67,   67,   67,   68,   68,   68,   68,
       68,   70,   70,   70,   70,   70,   72,   72,   72,  156,
      156,   72,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   87,   87,   87,   87,   87,  154,  154,  154,   76,
       76,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       76,   77,   77,   78,   78,  106,  379,   77,   76,  106,
       76,  367,   77,  365,   78,   93,   93,   93,   93,   77,
      364,   78,   77,  363,   78,  356,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   75,   79,   79,   80,   80,
      356,  133,  229,   81,   81,  133,  229,   79,  362,   80,
      240,   79,  240,   79,   81,  240,   80,   79,  358,   80,
       80,   75,   75,  357,   81,   82,   82,   83,   83,   84,
       84,  348,   75,  192,  192,  192,   82,   83,   83,   84,
       84,  302,   75,  194,  194,  293,   82,  283,   83,  233,
       84,  231,   84,   85,   85,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   85,   85,   86,   86,  199,  199,
      199,  138,   85,  230,   85,  138,  138,   86,   86,   89,
       89,   89,   89,   89,  207,  207,  207,   86,   91,   91,

       91,   91,   91,   92,   92,   92,   92,   92,   94,   94,
       94,   94,   94,  122,  122,  122,  123,  124,  124,  209,
      209,  122,  122,  125,  125,  122,  222,  122,  122,  123,
      124,  122,  218,  218,  125,  123,  124,  153,  153,  153,
      153,  153,  279,  279,  125,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  128,  128,  241,  204,  241,  137,
      213,  241,  137,  289,  289,  128,  137,  137,  137,  139,
      204,  139,  216,  216,  216,  128,  204,  201,  139,  139,
      137,  198,  137,  155,  155,  155,  155,  155,  164,  139,
      139,  157,  157,  157,  157,  157,  158,  158,  158,  158,

      159,  159,  159,  159,  159,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  178,  178,  162,  180,  180,  182,  182,
      181,  181,  184,  184,  178,  160,  181,  180,  152,  182,
      150,  181,  146,  184,  178,  180,  182,  180,  181,  182,
      184,  181,  284,  184,  184,  183,  183,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  183,  185,  185,  144,
      183,  143,  183,  186,  186,  284,  183,  140,  185,  187,
      187,  188,  188,  136,  186,  134,  189,  189,  185,  187,
      187,  188,  188,  129,  186,  298,  298,  189,  189,  119,

      187,  117,  188,  115,  188,  189,  284,  189,  190,  190,
      191,  191,  191,  191,  191,  196,  196,  196,  196,  190,
      190,  193,  193,  193,  193,  193,  277,  277,  277,  190,
      195,  195,  195,  195,  195,  197,  197,  197,  197,  197,
      202,  202,  202,  203,  203,  203,  205,  205,  206,  206,
      206,  206,  206,  202,  375,  375,  203,  205,  112,  202,
      384,  384,  203,  211,  211,  211,  211,  205,  208,  208,
      208,  208,  208,  210,  210,  210,  210,  210,  212,  212,
      212,  212,  212,  215,  215,  215,  215,  215,  217,  217,
      217,  217,  217,  219,  219,  219,  219,  219,  220,  220,

      220,  220,  221,  221,  221,  221,  221,  223,  223,  224,
      224,  238,  467,  467,  232,  111,  238,  238,  223,  110,
      224,  232,  232,  104,  238,  238,  476,  476,  223,  238,
      224,  238,  232,  232,   98,  238,  238,  239,   95,  239,
      247,  247,  248,  248,  587,  587,  239,  239,  249,  249,
      247,  247,   71,  248,   62,  250,  250,  239,  239,  249,
       60,  247,  248,  248,   45,  249,  250,  251,  251,  249,
      252,  252,   43,  253,  253,   42,  250,   28,  251,  252,
       19,  252,  254,  254,  253,  255,  255,  251,  251,  256,
      256,  252,  253,  254,  253,    0,  255,  257,  257,  254,

      256,  256,    0,  254,  258,  258,  255,    0,  257,    0,
      256,  259,  259,  636,  636,  258,    0,  257,  257,  258,
      260,  260,  259,    0,  259,  258,  261,  261,  264,  264,
      260,  260,  259,  262,  262,    0,    0,  261,    0,  264,
        0,  260,  274,    0,  262,    0,  262,  261,    0,  264,
      261,  287,  287,  287,  262,  265,  265,  265,  265,  265,
      266,  266,  266,  266,  266,  267,  267,  267,  267,  267,
      268,  268,  268,  268,  268,  269,  269,  269,  269,  269,
      270,  270,  270,  270,  270,  271,  271,  271,  271,  271,
      272,  272,  272,  272,  272,  273,  273,  273,    0,    0,

      273,    0,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      276,  276,  276,  276,  276,  278,  278,  278,  278,  278,
      280,  280,  280,  280,  280,  281,  281,  281,  281,  282,
      282,  282,  282,  282,  286,  286,  286,  286,  286,  291,
      291,  291,  291,  285,  285,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  285,  288,  288,  288,  288,  288,
      294,  296,  296,  296,  285,  290,  290,  290,  290,  290,
      292,  292,  292,  292,  292,  295,  295,  295,  295,  295,
      297,  297,  297,  297,  297,  299,  299,  299,  299,  299,

      300,  300,  300,  300,  301,  301,  301,  301,  301,  322,
      322,  322,  322,  322,  373,  373,  373,    0,  303,  303,
      323,  323,  323,  323,  323,  377,  377,  377,  377,  303,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  303,
      304,  304,  305,  305,  306,  306,  308,  308,    0,  307,
      307,  304,  305,  305,    0,  306,    0,  308,  309,  309,
      307,  304,    0,  305,  306,  306,  307,  308,    0,  309,
      307,  310,  310,    0,  311,  311,  313,  313,  309,  309,
      310,    0,  310,  312,  312,  311,    0,  313,  315,  315,
      314,  314,  310,  311,  312,  311,    0,  313,    0,  315,

      312,  314,  314,    0,  312,  316,  316,    0,  315,  315,
        0,  314,  317,  317,    0,    0,  316,  318,  318,    0,
      316,  319,  319,  317,    0,  317,  316,  318,  318,    0,
      320,  320,  319,  317,  359,  321,  321,    0,  318,    0,
        0,  320,  319,  320,    0,  319,  321,  359,  382,  382,
      382,  320,    0,  359,    0,    0,  321,  324,  324,  324,
      324,  324,  325,  325,  325,  325,  325,  326,  326,  326,
      326,  326,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  329,  329,  329,  329,  329,  352,  352,  352,
        0,    0,  360,  360,    0,  352,  352,  361,  361,  352,

        0,  352,  352,  360,    0,  352,  371,  371,  361,  386,
      386,  386,  386,  360,  465,  465,  465,  371,  361,  372,
      372,  372,  372,  372,  474,  474,  474,  371,  374,  374,
      374,  374,  374,  376,  376,  376,  376,  376,  378,  378,
      378,  378,  378,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  381,  381,  381,  381,  381,  383,  383,  383,
      383,  383,  385,  385,  385,  385,  385,  387,  387,  387,
      387,  387,  389,  389,  390,  390,  391,  391,  392,  392,
        0,  394,  394,  389,    0,  390,  391,  391,    0,  392,
      393,  393,  394,  389,    0,  390,    0,  391,  392,  392,

        0,  393,  394,  395,  395,    0,    0,  393,  396,  396,
        0,  393,    0,    0,  395,  397,  397,  396,    0,  396,
      398,  398,    0,  395,  395,    0,  397,  399,  399,  396,
        0,  398,  400,  400,  397,    0,  397,  398,  399,  401,
      401,  398,    0,  400,  400,    0,  402,  402,  399,    0,
      401,  403,  403,  400,    0,  404,  404,  402,    0,  401,
      401,  402,  403,    0,  403,  404,  404,  402,  405,  405,
      406,  406,  403,  407,  407,    0,  404,    0,    0,  405,
        0,  406,    0,  406,  407,  469,  469,  469,  469,  405,
        0,  406,  405,    0,  407,  408,  408,  408,  408,  408,

      409,  409,  409,  409,  409,  410,  410,  410,  410,  410,
      411,  411,  411,  411,  411,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  414,  414,  414,  414,  414,
      417,  417,  417,  417,  417,  418,  418,  418,  418,  418,
      419,  419,  419,  419,  419,  420,  420,  420,  420,  420,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      423,  423,  423,  423,  423,  424,  424,  424,  424,  424,
      425,  425,  425,  425,  425,  426,  426,  426,  426,  426,
      427,  427,  427,  427,  427,  428,  428,  428,  428,  428,
      429,  429,  429,  429,  429,  430,  430,  430,  430,  430,

      437,  444,  444,  443,  443,  445,  445,  437,  437,  443,
        0,  444,  444,  445,  443,    0,  445,    0,  437,  437,
      446,  446,  444,    0,  443,    0,  445,  447,  447,  448,
      448,  446,  449,  449,  450,  450,    0,  447,  447,    0,
      448,  446,  450,  449,    0,  450,  451,  451,  447,    0,
      448,  452,  452,  449,    0,  450,  451,  451,  453,  453,
      454,  454,  452,  455,  455,  456,  456,  451,    0,  453,
      454,  454,  452,  452,  455,    0,  456,  457,  457,  453,
      453,  454,  456,    0,  455,    0,  456,    0,  457,  458,
      458,  460,  460,  460,  460,  460,    0,    0,  457,    0,

      458,  585,  585,  585,  458,  461,  461,  461,  461,  461,
      458,  459,  459,    0,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  462,  462,  462,  462,  462,  463,  464,  464,  464,
      464,  464,  466,  466,  466,  466,  466,  468,  468,  468,

      468,  468,  470,  470,  470,  470,  470,  472,  473,  473,
      473,  473,  473,  475,  475,  475,  475,  475,  477,  477,
      477,  477,  477,  478,  478,  478,  478,  479,  479,  479,
      479,  479,  481,  481,  481,  481,  481,  482,  482,  482,
      482,  482,  589,  589,  589,  589,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  483,  483,  483,  483,  483,
      484,  484,  484,  484,  484,    0,    0,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  485,  485,  485,  485,
      485,  486,  486,  486,  486,  486,  487,  487,  487,  487,
      487,  489,  490,  490,  490,  490,  490,  634,  634,  634,

      489,    0,    0,    0,  489,  491,  491,  491,  491,  491,
      489,  489,    0,  489,  492,  492,  492,  492,  492,  493,
      493,  493,  493,  493,  494,  494,  494,  494,  494,  495,
      495,  495,  495,  495,  496,  496,  496,  496,  496,  497,
      497,  497,  497,  497,  498,  498,  498,  498,  498,  499,
      499,  499,  499,  499,  500,  500,  500,  500,  500,  501,
      501,  501,  501,  501,  502,  502,  502,  502,  502,  503,
      503,  503,  503,  503,  504,  504,  505,  505,    0,    0,
      504,  506,  506,  507,  507,  504,  505,  505,    0,  506,
      508,  508,  506,    0,  507,  504,    0,  505,  509,  509,

      508,  508,  506,    0,  507,  510,  510,  511,  511,  509,
        0,  508,  512,  512,    0,  511,  510,    0,  511,  509,
      513,  513,  512,  512,  514,  514,  510,    0,  511,  515,
      515,  513,    0,  512,    0,  514,  516,  516,    0,  515,
      515,  513,  513,  517,  517,  514,  514,  516,  518,  518,
      515,  519,  519,    0,  517,    0,    0,  516,    0,  518,
      517,    0,  519,    0,  517,    0,  519,    0,    0,  518,
        0,    0,  519,  520,  520,    0,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  521,  521,  521,  521,  521,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  529,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  531,  531,
      531,  531,  531,  532,  532,  532,  532,  532,  533,  533,
      533,  533,  533,  534,  534,  534,  534,  534,  535,  535,
      535,  535,  535,  536,  536,  536,  536,  536,  537,  537,

      537,  537,  537,  538,  538,  538,  538,  538,  539,  539,
      539,  539,  539,  540,  540,  540,  540,  540,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  543,  543,
      544,  544,    0,    0,  543,  545,  545,  546,  546,  543,
      544,  544,    0,  545,  547,  547,  545,    0,  546,  543,
        0,  544,  548,  548,  547,  547,  545,    0,  546,  549,
      549,  550,  550,  548,    0,  547,  551,  551,    0,  550,
      549,    0,  550,  548,  552,  552,  551,  551,  553,  553,
      549,    0,  550,  554,  554,  552,    0,  551,    0,  553,
      555,  555,    0,  554,  554,  552,  552,  556,  556,  553,

      553,  555,  557,  557,  554,  558,  558,    0,  556,    0,
        0,  555,    0,  557,  556,    0,  558,    0,  556,    0,
      558,    0,    0,  557,    0,    0,  558,  559,  559,  559,
      559,  559,  560,  560,  560,  560,  560,  561,  561,  561,
      561,  561,  562,  562,  562,  562,  562,  563,  563,  563,
      563,  563,  564,  564,  564,  564,  564,  565,  565,  565,
      565,  565,  566,  566,  566,  566,  566,  567,  567,  567,
      567,  567,  568,  568,  569,  569,  570,  570,  571,  571,
        0,  572,  572,  568,    0,  569,  568,  570,  570,  571,
        0,  571,  572,  568,  572,  569,    0,  570,    0,  571,

      573,  573,  572,  574,  574,    0,  575,  575,    0,    0,
        0,  573,  576,  576,  574,  577,  577,  575,    0,    0,
        0,  573,  573,  576,  574,  575,  577,  575,  576,  578,
      578,  579,  579,  576,  577,    0,  577,  578,    0,  579,
      578,    0,  579,  580,  580,  581,  581,    0,    0,    0,
      578,    0,  579,    0,  580,  581,  581,  584,  584,  584,
      584,  584,    0,    0,  580,    0,  581,  586,  586,  586,
      586,  586,  588,  588,  588,  588,  588,  590,  590,  590,
      590,  590,  592,  592,  593,  593,  593,  593,  593,  638,
      638,  638,  638,  592,  594,  594,  594,  594,  594,    0,

        0,    0,    0,  592,  595,  595,  595,  595,  595,  596,
      596,  596,  596,  596,  597,  597,  597,  597,  597,  598,
      598,  598,  598,  598,  599,  599,  599,  599,  599,  600,
      600,  600,  600,  600,  601,  601,  601,  601,  601,  602,
      602,  602,  602,  602,  603,  603,  603,  603,  603,  604,
      604,  604,  604,  604,  605,  605,  605,  605,  605,  606,
      606,  606,  606,  606,  607,  607,  607,  607,  607,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  610,
      611,  611,  611,  611,  611,    0,    0,    0,  610,    0,
        0,    0,  610,  612,  612,  612,  612,  612,  610,  610,

        0,  610,  613,  613,  613,  613,  613,  614,  614,  614,
      614,  614,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  617,  617,  618,  618,  619,  619,  620,  620,
        0,  621,  621,  617,    0,  618,  617,  619,  619,  620,
        0,  620,  621,  617,  621,  618,    0,  619,    0,  620,
      622,  622,  621,  623,  623,    0,  624,  624,    0,    0,
        0,  622,  625,  625,  623,  626,  626,  624,    0,    0,
        0,  622,  622,  625,  623,  624,  626,  624,  625,  627,
      627,  628,  628,  625,  626,    0,  626,  627,    0,  628,
      627,    0,  628,  629,  629,  630,  630,    0,  631,  631,

      627,    0,  628,    0,  629,  630,  630,  631,    0,    0,
        0,  631,    0,    0,  629,    0,  630,  631,  631,  631,
      631,  631,  633,  633,  633,  633,  633,  635,  635,  635,
      635,  635,  637,  637,  637,  637,  637,  639,  639,  639,
      639,  639,  641,  641,  642,  642,  642,  642,  642,    0,
        0,    0,  631,  641,  643,  643,  643,  643,  643,    0,
        0,    0,    0,  641,  644,  644,  644,  644,  644,  645,
      645,  645,  645,  645,  646,  646,  646,  646,  646,  647,
      647,  647,  647,  647,  648,  648,  649,  649,  650,  650,
      651,  651,    0,  652,  652,  648,    0,  649,  648,  650,

      650,  651,    0,  651,  652,  648,  652,  649,    0,  650,
        0,  651,  653,  653,  652,  654,  654,    0,  655,  655,
        0,    0,    0,  653,  656,  656,  654,  657,  657,  655,
        0,    0,    0,  653,  653,  656,  654,  655,  657,  655,
      656,  658,  658,  659,  659,  656,  657,    0,  657,  658,
        0,  659,  658,    0,  659,  660,  660,  661,  661,  662,
      662,    0,  658,    0,  659,    0,  660,  661,  661,    0,
      662,  663,  663,  665,  665,    0,  660,    0,  661,    0,
      662,    0,  663,    0,  665,  666,  666,  667,  667,  668,
      668,    0,  663,    0,  665,    0,  666,    0,  667,    0,

      668,  669,  669,    0,  667,    0,  666,    0,  667,    0,
      668,    0,  669,  670,  670,    0,  671,  671,  669,  672,
      672,    0,  669,    0,  670,    0,  670,  671,    0,  672,
      672,  673,  673,    0,  670,  674,  674,  671,    0,  671,
      672,    0,  673,  675,  675,    0,  674,    0,  673,  676,
      676,    0,  673,    0,  675,  675,  674,    0,    0,    0,
      676,    0,    0,    0,  675,  677,  677,  677,  677,  677,
      676,  678,  678,  678,  678,  678,  679,  679,  679,  679,
      679,  680,  680,  680,  680,  680,  681,  681,  681,  681,
      681,  682,  682,  682,  682,  682,  683,  683,  683,  683,

      683,  684,  684,  684,  684,  684,  685,  685,  685,  685,
      685,  686,  686,  686,  686,  686,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  689,  689,  689,  689,
      689,  691,  691,  693,  693,  694,  694,    0,  695,  695,
      696,  696,  691,    0,  693,    0,  694,  697,  697,  695,
        0,  696,  691,    0,  693,  695,  694,    0,  697,  695,
        0,  696,  698,  698,  697,  699,  699,    0,  697,  700,
      700,    0,    0,  698,    0,  698,  699,    0,    0,  700,
      700,  701,  701,  698,  702,  702,  699,    0,  699,    0,
      700,    0,  701,  704,  704,  702,  703,  703,  701,  706,

      706,    0,  701,    0,  704,  702,    0,  703,  703,  707,
      707,  707,  707,  707,  704,    0,    0,  703,    0,    0,
      706,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  713,  713,  713,  713,
      713,  714,  714,  716,  716,  717,  717,    0,  718,  718,
      719,  719,  714,    0,  716,    0,  717,  720,  720,  718,
        0,  719,  714,    0,  716,  718,  717,    0,  720,  718,
        0,  719,  721,  721,  720,  722,  722,    0,  720,  723,
      723,    0,    0,  721,    0,  721,  722,    0,    0,  723,

      723,  724,  724,  721,  725,  725,  722,    0,  722,    0,
      723,    0,  724,  727,  727,  725,  726,  726,  724,  728,
      728,    0,  724,    0,  727,  725,    0,  726,  726,    0,
      728,  729,  729,    0,  727,  730,  730,  726,  732,  732,
      728,  728,  729,  730,  731,  731,  730,  733,  733,  732,
        0,  732,  729,  734,  734,  731,  730,    0,  733,  732,
      735,  735,  731,    0,  734,  731,  736,  736,  733,    0,
        0,  735,    0,    0,  734,    0,    0,  736,    0,    0,
        0,  735,  737,  737,  737,  737,  737,  736,  738,  738,
      738,  738,  738,  739,  739,  739,  739,  739,  742,  742,

      743,  743,  744,  744,  745,  745,    0,  747,  747,  742,
      744,  743,    0,  744,    0,  745,  746,  746,  747,  742,
      742,  743,  745,  744,    0,  745,    0,  746,  747,  746,
      748,  748,  749,  749,  750,  750,    0,  746,  751,  751,
        0,  748,    0,  749,    0,  750,  752,  752,  752,  752,
      752,  748,    0,  749,    0,  750,    0,    0,    0,  751,
      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      755,  755,  756,  756,  757,  757,  758,  758,    0,  760,
      760,  755,  757,  756,    0,  757,    0,  758,  759,  759,
      760,  755,  755,  756,  758,  757,    0,  758,    0,  759,

      760,  759,  761,  761,  762,  762,  763,  763,    0,  759,
      764,  764,    0,  761,    0,  762,    0,  763,  765,  765,
      764,  764,    0,  761,    0,  762,    0,  763,    0,  765,
        0,  764,  766,  766,  767,  767,  769,  769,    0,  765,
      770,  770,    0,  766,    0,  767,  769,  769,    0,  766,
        0,  770,    0,  766,  767,  767,    0,  769,  771,  771,
        0,  770,  772,  772,    0,    0,  774,  774,    0,  771,
      775,  775,    0,  772,    0,  771,  774,  774,    0,  771,
        0,  775,  772,  772,  776,  776,    0,  774,  777,  777,
        0,  775,  778,  778,    0,  776,    0,    0,    0,  777,

        0,  776,    0,  778,    0,  776,  779,  779,  777,  777,
      780,  780,    0,  778,  781,  781,    0,  779,    0,  779,
        0,  780,  782,  782,  781,  781,    0,  779,  783,  783,
        0,  780,    0,  782,    0,  781,  784,  784,    0,  783,
        0,  783,    0,  782,  785,  785,    0,  784,    0,  783,
      786,  786,  788,  788,  785,  785,    0,  784,    0,  787,
      787,  786,    0,  788,    0,  785,  789,  789,  790,  790,
      787,  786,  787,  788,  791,  791,  789,  789,    0,  790,
      787,  792,  792,  793,  793,  791,  790,  789,    0,  790,
      794,  794,  792,    0,  793,  791,  795,  795,    0,  792,

        0,  794,  792,    0,  793,  796,  796,  795,  794,  799,
      799,  794,  797,  797,  798,  798,  796,  795,    0,    0,
      799,    0,  796,  797,    0,  798,  796,  800,  800,  797,
      799,  798,    0,  797,    0,  798,  801,  801,  800,    0,
        0,    0,    0,    0,    0,    0,    0,  801,  800,    0,
        0,    0,    0,    0,    0,    0,    0,  801,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      809,    0,    0,    0,    0,    0,    0,  809,  810,    0,
        0,    0,    0,    0,    0,  810,  811,  811,  811,  811,
        0,  811,  812,    0,    0,  812,    0,    0,    0,    0,
        0,    0,  812,  813,    0,    0,    0,    0,    0,    0,
      813,  814,  814,    0,    0,  814,    0,  814,  814,  814,
      814,    0,  814,  815,  815,    0,    0,  815,    0,  815,
      815,  815,  815,    0,  815,  816,  816,    0,    0,  816,

      816,  816,  816,    0,  816,  816,  816,  817,  817,    0,
        0,  817,  817,  817,  817,  817,  817,  817,  817,  818,
        0,    0,    0,  818,    0,  818,  818,  818,    0,  818,
      818,  819,    0,    0,    0,    0,    0,    0,  819,  820,
        0,    0,    0,    0,    0,    0,  820,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      824,    0,    0,  824,    0,    0,    0,    0,    0,    0,
      824,  825,    0,    0,    0,    0,    0,    0,  825,  826,

      826,  826,  826,  826,  826,  826,    0,  826,    0,  826,
      826,  827,  827,    0,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 803 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4136 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 25:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
	    std::string str = "Can\'t convert \'";
	    str += yytext;
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable())
        {
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
        }
	return scan_throw(ID);
    }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{

  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
	std::string str = "Can\'t convert \'";
	str += yytext;
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer.clear();
      str_opener_column = yylloc.first_column;
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
        scan_step();
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 85:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      unput(yytext[yyleng - 1]);
      --yylloc.last_column;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      unput('\'');
      yylloc.last_column--;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 93:
case 94:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 95:
case 96:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, b] and plus here is unary
    // the space is non coding:
    // * after any other binary operator __op__
    //   Example : [a __op__ +b]
    // * after brackets or parentheses delimiters
    //   Example : [(1*2*a) +3]
    // * at the beginning of a line
    //   Example : [3 ...
    //              _+2]

    // no need to unput the '+'
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
   else
   {
       unput('+');
       yylloc.last_column--;
   }
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale

    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 100:
YY_RULE_SETUP
{
             // This rule is made to take into account a +... without spaces after plus
             // if one simply ignores the next a situation like this could arise
             // Example
             // =======
             // A = [1 +...
             // 2] 
             //
             // what is meant by the user [1 +2] ? or [1 + 2]
             // simply ignoring the ... would yield the 1st situation [1, 2]
             // We consider this is NOT proper and instead that the user meant a binary plus
             // split is two lines
             // The same rationale applies to minus.

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = PLUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(PLUS);
         }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
             // see {spaces}*{minus}{next} for the rationale

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = MINUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(MINUS);
         }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = TRUE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
      paren_levels.pop();
  }
	YY_BREAK

case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
        // This is important to restore coding spaces as if ... was not present
        unput(' ');
        linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
        {
	    pstBuffer.clear();
	    std::string str = "Can\'t convert \'";
	    str += pstBuffer.c_str();
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.comment = new std::wstring(pwstBuffer);
	pstBuffer.clear();
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
    else
    {
	pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
	str += pstBuffer.c_str();
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 111:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 114:
case 115:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 116:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 123:
case 124:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 125:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 132:
case 133:
YY_RULE_SETUP
{
   //scan_step();
   pstBuffer += yytext;
  }
	YY_BREAK

case 134:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            //return ID;
        }
    }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 144:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 803 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 803 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 802);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
    std::string str;
    switch(token)
    {
        case AND :                   str = "AND";
                                     break;
        case ASSIGN :                str = "ASSIGN";
                                     break;
        case BOOLFALSE :             str = "BOOLFALSE";
                                     break;
        case BOOLTRUE :              str = "BOOLTRUE";
                                     break;
        case BREAK :                 str = "BREAK";
                                     break;
        case CASE :                  str = "CASE";
                                     break;
        case CATCH :                 str = "CATCH";
                                     break;
        case COLON :                 str = "COLON";
                                     break;
        case COMMA :                 str = "COMMA";
                                     break;
        case COMMENT :               str = "COMMENT";
                                     break;
        case CONTINUE :              str = "CONTINUE";
                                     break;
        case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE";
                                     break;
        case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE";
                                     break;
        case CONTROLTIMES :          str = "CONTROLTIMES";
                                     break;
        case DO :                    str = "DO";
                                     break;
        case DOLLAR :                str = "DOLLAR";
                                     break;
        case DOT :                   str = "DOT";
                                     break;
        case DOTLDIVIDE :            str = "DOTLDIVIDE";
                                     break;
        case DOTPOWER :              str = "DOTPOWER";
                                     break;
        case DOTQUOTE :              str = "DOTQUOTE";
                                     break;
        case DOTRDIVIDE :            str = "DOTRDIVIDE";
                                     break;
        case DOTS :                  str = "DOTS";
                                     break;
        case DOTTIMES :              str = "DOTTIMES";
                                     break;
        case ELSE :                  str = "ELSE";
                                     break;
        case ELSEIF :                str = "ELSEIF";
                                     break;
        case END :                   str = "END";
                                     break;
        case ENDFUNCTION :           str = "ENDFUNCTION";
                                     break;
        case EOL :                   str = "EOL";
                                     break;
        case EQ :                    str = "EQ";
                                     break;
        case FLEX_ERROR :            str = "FLEX_ERROR";
                                     break;
        case FOR :                   str = "FOR";
                                     break;
        case FUNCTION :              str = "FUNCTION";
                                     break;
        case GE :                    str = "GE";
                                     break;
        case GT :                    str = "GT";
                                     break;
        case ID :                    str = "ID";
                                     break;
        case IF :                    str = "IF";
                                     break;
        case KRONLDIVIDE :           str = "KRONLDIVIDE";
                                     break;
        case KRONRDIVIDE :           str = "KRONRDIVIDE";
                                     break;
        case KRONTIMES :             str = "KRONTIMES";
                                     break;
        case LBRACE :                str = "LBRACE";
                                     break;
        case LBRACK :                str = "LBRACK";
                                     break;
        case LDIVIDE :               str = "LDIVIDE";
                                     break;
        case LE :                    str = "LE";
                                     break;
        case LPAREN :                str = "LPAREN";
                                     break;
        case LT :                    str = "LT";
                                     break;
        case MINUS :                 str = "MINUS";
                                     break;
        case NE :                    str = "NE";
                                     break;
        case NOT :                   str = "NOT";
                                     break;
        case NUM :                   str = "NUM";
                                     break;
        case OR :                    str = "OR";
                                     break;
        case OROR :                  str = "OROR";
                                     break;
        case OTHERWISE :             str = "OTHERWISE";
                                     break;
        case PLUS :                  str = "PLUS";
                                     break;
        case POWER :                 str = "POWER";
                                     break;
        case QUOTE :                 str = "QUOTE";
                                     break;
        case RBRACE :                str = "RBRACE";
                                     break;
        case RBRACK :                str = "RBRACK";
                                     break;
        case RDIVIDE :               str = "RDIVIDE";
                                     break;
        case RETURN :                str = "RETURN";
                                     break;
        case RPAREN :                str = "RPAREN";
                                     break;
        case SELECT :                str = "SELECT";
                                     break;
        case SEMI :                  str = "SEMI";
                                     break;
        case SPACES :                str = "SPACES";
                                     break;
        case STR :                   str = "STR";
                                     break;
        case SWITCH :                str = "SWITCH";
                                     break;
        case THEN :                  str = "THEN";
                                     break;
        case TIMES :                 str = "TIMES";
                                     break;
        case TRY :                   str = "TRY";
                                     break;
        case VARFLOAT :              str = "VARFLOAT";
                                     break;
        case VARINT :                str = "VARINT";
                                     break;
        case WHILE :                 str = "WHILE";
                                     break;
        default :                    str = "UNKNOWN";
                                     break;
    }
    return str;

}
#endif


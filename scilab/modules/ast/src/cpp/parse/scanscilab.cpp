
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[868] =
    {   0,
    16405,  120,  120,  129,  129,  111,  111,  107,  107,  142,
       81,  141,   77,   81,  141,   78,  141,   78,   81,  141,
       72,   81,  141,   75,   81,  141,   24,   81,  141,   72,
       81,  141,   27,   81,  141,   76,   81,  141,   31,   81,
      141,   32,   81,  141,   45,   81,  141,   44,   81,  141,
       34,   81,  141,   43,   81,  141,   64,   81,  141,   46,
       81,  141,   66,   81,  141,   35,   81,  141,   33,   81,
      141,   57,   81,  141,   61,   81,  141,   58,   81,  141,
       62,   81,  141,   47,   81,  141,   63,   81,  141,   48,
       81,  141,   72,   81,  141,   72,   81,  141,   72,   81,

      141,   72,   81,  141,   72,   81,  141,   72,   81,  141,
       72,   81,  141,   72,   81,  141,   72,   81,  141,   72,
       81,  141,   36,   81,  141,   29,   81,  141,   37,   81,
      141,   23,   81,  141,   81,  141,   81,  141,   81,  141,
       81,  141,   81,  141,   81,  141,   81,  141,   81,  141,
       81,  141,   77,   81,  141,16405,   72,   81,  141,   24,
       81,  141,   72,   81,  141,   72,   81,  141,   72,   81,
      141,   72,   81,  141,   72,   81,  141,   72,   81,  141,
       72,   81,  141,   72,   81,  141,   72,   81,  141,   72,
       81,  141,   72,   81,  141,   81,  141,   81,  141,   81,

      141,   81,  141,   81,  141,   81,  141,   81,  141,   81,
      141,   81,  141,  120,  121,  141,  119,  141,  119,  121,
      141,  118,  121,  141,  117,  121,  141,  121,  141,  129,
      130,  141,  128,  141,  128,  130,  141,  126,  130,  141,
      127,  130,  141,  130,  141,  111,  112,  141,  110,  141,
      110,  112,  141,  112,  141,  112,  141,  107,  141,  106,
      141,  106,  141,  105,  141,  104,  105,  141,  101,  141,
      101,  105,  141,  105,  141,   96,  141,   77,   96,  141,
       86,  141,   86,   96,  141,   72,   96,  141,   75,   96,
      141,   24,   96,  141,   72,   96,  141,   27,   96,  141,

       76,   96,  141,   82,   96,  141,   83,   96,  141,   45,
       96,  141,   90,   96,  141,   34,   96,  141,   92,   96,
      141,   64,   96,  141,   46,   96,  141,   66,   96,  141,
       35,   85,   96,  141,   33,   96,  141,   57,   96,  141,
       61,   96,  141,   58,   96,  141,   62,   96,  141,   47,
       96,  141,   88,   96,  141,   48,   96,  141,   36,   96,
      141,   29,   96,  141,   89,   96,  141,   23,   96,  141,
       96,  141,   96,  141,   96,  141,   96,  141,   96,  141,
       96,  141,   96,  141,   96,  141,  140,  141,  131,  141,
      134,  141,  134,  141,   75,  141,   76,  141,  136,  140,

      141,  133,  141,  140,  141,  132,  141,  137,  140,  141,
      135,  140,  141,  138,  140,  141,  139,  140,  141,  141,
       22,  141,  141,   22,  141,  141,   22,  141,   22,  141,
       22,  141,   22,  141,   22,  141,   22,  141,   22,  141,
       22,  141,   22,  141,   22,  141,  141,  141,  141,  141,
      141,  141,  141,  141,   77,   79,   79,   78,   72,   72,
        3,   26,   72,    2,   25,   72,   28,   48,   38,   39,
       65,   40,   71,   41,   42,   73,   74,   70,   66,   59,
       56,   55,   60,   72,   72,   72,   15,   72,   72,   72,
       72,   72,    4,   72,   72,   72,   72,   72,   72,   30,

       72,   77,16405,   72,   72,    3,   26,   72,    2,   25,
       72,   72,   72,   72,   15,   72,   72,   72,   72,   72,
        4,   72,   72,   72,   72,   72,   72,   72,  120,  119,
      113,  114,  115,  116,  129,  128,  122,  123,  124,  125,
      111,  110,  108,  109,  107,  106,  104,  101,  102,  103,
       77,   87,   84,   94,   95,   85,   86,   26,   72,   25,
       72,   99,   85,  140,  131,  134,   73,  140,   74,  140,
       22,   22,    3,   22,    2,   22,   22,   22,   22,   15,
       22,   22,   22,   22,   22,    4,   22,   22,   22,   22,
       22,   22,   22,   80,   80,   52,   49,   50,   51,   53,

       69,   70,   67,   68,   54,   72,   72,   72,   72,   72,
        8,   72,   13,   72,   72,   72,   72,   72,   18,   72,
       72,    1,   72, 8213, 8213,   72,   72,   72,   72,   72,
        8,   72,   13,   72,   72,   72,   72,   72,   18,   72,
       72,    1,   72,   91,   93,  100,   97,   98,   22,   22,
       22,   22,   22,    8,   22,   13,   22,   22,   22,   22,
       22,   18,   22,   22,   72,   10,   72,   72,   72,    6,
       72,   72,   72,   72,   72,    5,   72,   72,    1,    1,
       72,    1,    1,    1,    1,    1,    1,    1,    1,   72,
     8213,   72,   10,   72,   72,   72,    6,   72,   72,   72,

       72,   72,    5,   72,   72,    1,    1,   72,    1,    1,
        1,    1,    1,    1,    1,    1,   72,   22,   10,   22,
       22,   22,    6,   22,   22,   22,   22,   22,    5,   22,
       22,   22,   72,   72,   16,   72,   19,   72,   72,   72,
       72,   72,   72,   72,   14,   72,    1,    1,    1,    1,
        1,    1,    1,   72,   72,   16,   72,   19,   72,   72,
       72,   72,   72,   72,   72,   14,   72,    1, 8213,    1,
     8213,    1,    1,    1,    1,    1,    1,    1,   22,   22,
       16,   22,   19,   22,   22,   22,   22,   22,   22,   22,
       14,   22,   72,    7,   72,   72,   72,   20,   72,    9,

       72,    1,    1,    1,   72,    7,   72,   72,   72,   20,
       72,    9,   72,    1, 8213,    1,    1,    1,   22,    7,
       22,   22,   22,   20,   22,    9,   22,   72,   72,   72,
        1,   72,   72,   72,   72,    1,   72,   22,   22,   22,
       17,   72,   72,   11,   72,   17,   72,   72,   11,   72,
       17,   22,   22,   11,   22,   72,   72,   22,   72,   72,
       22,   12,   72,   12,   72,   12,   22
    } ;

static yyconst flex_int16_t yy_accept[750] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  157,  160,  163,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  198,  200,  202,  204,  206,
      208,  210,  212,  214,  217,  219,  222,  225,  228,  230,

      233,  235,  238,  241,  244,  246,  249,  251,  254,  256,
      258,  260,  262,  264,  266,  269,  271,  274,  276,  278,
      281,  283,  286,  289,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  335,  338,
      341,  344,  347,  350,  353,  356,  359,  362,  365,  368,
      371,  373,  375,  377,  379,  381,  383,  385,  387,  389,
      391,  393,  395,  397,  399,  402,  404,  406,  408,  411,
      414,  417,  420,  421,  423,  424,  426,  427,  429,  431,
      433,  435,  437,  439,  441,  443,  445,  447,  448,  449,
      450,  451,  452,  453,  454,  455,  456,  457,  458,  458,

      458,  459,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      464,  467,  468,  469,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  477,  478,  479,  480,  480,  480,  481,
      482,  483,  484,  484,  485,  486,  487,  489,  490,  491,
      492,  493,  495,  496,  497,  498,  499,  500,  501,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  509,  512,

      513,  514,  515,  517,  518,  519,  520,  521,  523,  524,
      525,  526,  527,  528,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  530,  531,  532,  533,  534,  535,  536,
      537,  538,  539,  540,  541,  542,  543,  544,  545,  546,
      547,  548,  549,  550,  551,  552,  553,  554,  555,  556,
      556,  557,  558,  560,  562,  562,  562,  563,  564,  565,
      566,  567,  569,  571,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  575,  577,  578,  579,  580,  582,  583,  584,
      585,  586,  588,  589,  590,  591,  592,  593,  594,  594,

      594,  594,  594,  594,  594,  594,  595,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  597,  598,  599,  600,  601,  602,  603,  603,
      604,  604,  605,  606,  607,  608,  609,  610,  611,  613,
      615,  616,  617,  618,  619,  621,  622,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  627,  628,  629,  630,  631,  633,  635,  636,

      637,  638,  639,  641,  642,  644,  644,  644,  644,  645,
      646,  647,  648,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  650,  651,
      652,  653,  654,  656,  658,  659,  660,  661,  662,  664,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      666,  668,  669,  670,  672,  673,  674,  675,  676,  678,
      679,  680,  682,  683,  684,  685,  686,  687,  688,  689,
      690,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  692,
      692,  692,  692,  692,  692,  692,  693,  695,  696,  697,

      699,  700,  701,  702,  703,  705,  706,  707,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  718,  718,
      718,  718,  718,  718,  719,  721,  722,  723,  725,  726,
      727,  728,  729,  731,  732,  733,  734,  735,  737,  739,
      740,  741,  742,  743,  744,  745,  747,  748,  749,  750,
      751,  752,  753,  754,  754,  754,  754,  754,  754,  754,
      754,  755,  756,  758,  760,  761,  762,  763,  764,  765,
      766,  768,  770,  772,  773,  774,  775,  776,  777,  778,
      779,  780,  781,  783,  785,  786,  787,  788,  789,  790,
      791,  793,  794,  796,  797,  798,  800,  802,  803,  804,

      805,  805,  805,  806,  808,  809,  810,  812,  814,  816,
      817,  818,  819,  820,  822,  823,  824,  826,  828,  829,
      830,  831,  833,  834,  835,  836,  838,  839,  840,  841,
      843,  844,  846,  848,  849,  851,  853,  854,  856,  857,
      858,  859,  860,  861,  862,  864,  866,  868,  868
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,    5,   40,   41,    5,   42,   43,    5,   44,
       45,    5,    5,   46,   47,   48,   49,    5,   50,    5,
       51,    5,   52,   53,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   59,   58,   58,   58,
       60,    1,    1,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   62,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   64,   65,   66,   67,
       68,   68,   68,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    3,    4,    5,    4,    6,    1,    5,
        7,    1,    8,    1,    9,    1,   10,    8,   11,    1,
        9,    7,    7,    7,    1,    4,    4,    4,    4,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[774] =
    {   0,
        0,   69,  136,  141,  146,  151,  156,  162,  167,  169,
      174,  179,  197,    0,  265,  319,  374,    0, 1096, 3910,
      182,  270,  275,  236, 3910,  245,  416, 1069, 3910, 3910,
     3910,  174, 3910, 3910, 3910,  314,  176,  327, 3910, 3910,
      172, 1054, 1051, 3910, 1055, 3910, 3910,  310,  323,  418,
      447,  420,  245,  422,  459,  464,  477, 3910, 1014, 3910,
     1035,  259,  301,  462,  225,  470,  475,  414,  480, 1000,
      539,  487,  496,  607,  538,  540,  542,  582,  544,  584,
      589,  605,  610,  612,  538,  394,  605,  238,  621,  626,
      442,  631,  993,    0, 3910, 1044,  357,  360, 3910,    0,

     3910, 1041,  363,  452, 3910,    0, 3910, 1027, 1001, 1003,
        0, 3910,  998, 3910,  942, 3910,  940,  130, 3910,  690,
      494,  693,  670, 3910,  658,  700,  932, 3910, 3910, 3910,
      563,  923, 3910,  921,  723,  602,  726,  935, 3910,  312,
      873,  865, 3910,  852, 3910, 3910, 3910,  799, 3910,  824,
      701,  653,  709,  457,  714,  718,  723,  772,    0,  819,
     3910,  816, 3910, 3910,    0, 3910,  149, 3910,    0,    0,
        0,    0, 3910,  723,  732,  774,  337,  777,  781,  779,
      805,  817,  822,  829,  835,  847,  850,  843,  657,  848,
      467,  853,  857,  862,  755,  728, 3910,  801,  921,  924,

      627,  843,  873,  691,  890,  488,  895,  899,  904,  706,
        0,  909,  772,  914,  610,  919,  923,  928,  699,  961,
      963, 3910, 3910,    0, 3910,  565,  727,  688,  977,  680,
     3910, 3910,    0, 3910,  994,  991,  798,  878, 3910, 3910,
     3910, 3910,    0,  995, 1007, 1009, 1011, 1013, 1034, 1037,
     1040, 1052, 1058, 1064, 1066, 1070, 1087, 3910, 1091, 1084,
     1089, 1094, 1099, 1104, 1109, 1114, 1119, 1178, 1125, 1134,
     1148,  935, 1153,  646, 1158, 1065, 1163,  603, 1020, 1209,
     1168,  939, 1173,  678, 1193, 1074, 1202,  601, 1232, 1207,
     1078, 1212,  681, 1217, 1221, 1226,  598, 1263, 1275, 1277,

     1279, 1291, 1293, 1305, 1308, 1320, 1326, 1332, 1334, 1347,
     1349, 1355, 1363, 1370, 1356, 1363, 1368, 1373, 1378, 1383,
     1388, 1393,    0, 3910, 3910, 3910, 3910, 3910,    0, 3910,
     3910, 3910, 3910, 3910,    0, 3910, 3910, 3910,    0, 3910,
      645, 3910, 3910, 3910, 1452, 3910, 3910,  162,  597,  628,
      629, 1049, 1431, 1436,  607,  605,  599,  589,    0,  573,
     3910,    0,    0, 1448, 1432, 1196, 1441,  690, 1446, 1230,
     1451,  491, 1451, 1465, 1422, 1470,  798, 1475, 1479, 1484,
      455, 1517, 1519, 1521, 1523, 1535, 1547, 1549, 1552, 1564,
     1570, 1576, 1578, 1591, 1593, 1599, 1607, 1614, 1600, 1607,

     1612, 1617, 1622, 1627, 1632, 3910,  505, 1637, 1642, 1647,
     1652, 1657, 1662, 1667, 1672, 1677, 1682, 1687, 1692, 1697,
     1702, 3910, 3910, 3910, 3910, 3910, 3910, 1744,  475,  448,
      437,  353, 3910, 1738, 1736, 1740, 1761, 1763, 1765, 1767,
     1769, 1790, 1792, 1797, 1794, 1815, 1863, 1790, 1877, 1882,
     1941, 1888, 1435, 1893,  803, 1898, 1802, 1903,  292, 1962,
     1909, 1495, 1914,  824, 1919, 1923, 1928,  272, 1933, 1938,
     1955, 1960, 1976, 1981, 1986, 3910, 2045, 1992, 2005, 2014,
     2019, 2024, 2029, 2034, 2039, 2044, 2049, 2054, 2059, 2064,
     2069, 2102, 2104, 2109, 2125, 2127, 2130, 2132, 2148, 2153,

     2160, 2165, 2177, 2183, 2231, 2161, 2245, 2250,  324,  290,
      262,  253,  173, 2255, 2260, 2265, 2270, 2275, 2280, 2285,
     2290, 2295, 2300, 2305, 2310, 2315, 2320, 2353, 2355, 2360,
     2376, 2378, 2381, 2383, 2399, 2404, 2411, 2416, 2428, 2434,
     2412, 2427, 2432, 2437, 2442, 2447, 2452, 2457, 2462, 2495,
     2497, 2499, 2501, 2522, 2525, 2527, 2530, 2543, 2555, 2557,
     2601,    0, 2541, 1793, 2553,  828, 2558, 2170, 2565,  132,
     2632, 2597, 2616, 2625, 2630, 2635, 2640, 2645, 2650, 2655,
     2660, 2665, 2670, 2675, 2680, 2685, 2690, 2695, 2566, 2700,
     2705, 2710, 2715, 2720, 2725, 2758, 2760, 2762, 2764, 2785,

     2788, 2790, 2793, 2806, 2818, 2820, 2849,    0, 2819, 1797,
     2824,  878, 2829, 2421, 2834,   85, 2867, 2841, 2851, 2860,
     2865, 2870, 2875, 2908, 2910, 2912, 2914, 2935, 2938, 2940,
     2943, 2956, 2968, 2970, 2972, 2974,    0, 2986, 2998, 3000,
     3002, 3014, 3026, 3031, 3043, 3048, 3041, 3046, 3051, 3056,
     3061, 3066, 3071, 3076, 3081, 3086, 3091, 3096, 3101,    0,
     3134,    0, 3136, 3138, 3141, 3159, 3162, 3164, 3180, 3186,
     3188,    0, 1003, 3173, 3181, 3186, 3191, 3196, 3201, 3206,
     3239,    0, 3241, 3243, 3246, 3264, 3267, 3269, 3285, 3291,
     3293, 3297, 3299, 3314, 3320, 3327, 3332, 3325, 3330, 3335,

        0,    0, 3368, 3370, 3372, 3374, 3376, 3397, 1087, 3371,
     3381, 3390, 3404, 3426, 3428, 3430, 3432, 3434, 3455, 3457,
     3460,    0, 3462, 3478, 3483,    0, 3485, 3490, 3506, 3508,
     3512, 3520, 3533, 3535, 3538, 3541, 3556, 3559, 3563, 3571,
     3584, 3586, 3589, 3592, 3610, 3613, 3615, 3910, 3663, 3674,
     3685, 3696, 3707, 3718, 3726, 3734, 3744, 3749, 3757, 3768,
     3779, 3790, 3801, 3812, 3820, 3828, 3839, 3849, 3859, 3868,
     3876, 3887, 3898
    } ;

static yyconst flex_int16_t yy_def[774] =
    {   0,
      748,  748,  749,  749,  750,  750,  751,  751,  752,  752,
      753,  753,  748,   13,  754,  754,  748,   17,  748,  748,
      748,  748,  748,  755,  748,  756,  755,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      757,  758,  759,  758,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  760,  748,  748,  748,  748,  748,  761,

      748,  748,  748,  748,  748,  762,  748,  748,  748,  748,
      763,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,   27,  748,  756,   27,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  764,  748,
      748,  748,  748,  748,  764,  748,  764,  748,  764,  764,
      764,  764,  748,  765,  766,  765,  748,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,   27,  748,  748,  748,  748,  748,  748,  748,  748,
      125,  748,  748,  748,  748,  748,  748,  748,  748,   27,
       27,  748,  748,  767,  748,  748,  748,  748,  748,  748,
      748,  748,  768,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  769,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  748,   27,  748,
      748,  748,  748,  748,  748,  748,  748,  757,  770,  771,
      748,  748,  748,  748,  748,  748,  748,  748,  772,   74,
      748,  748,  748,  748,  748,  748,  748,  748,  759,  748,
      748,  748,  748,  748,  748,  748,  748,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  748,  748,  748,  748,  748,  748,
      748,  748,  760,  748,  748,  748,  748,  748,  761,  748,
      748,  748,  748,  748,  762,  748,  748,  748,  763,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,   27,   27,  748,  748,  748,  748,  764,  748,
      748,  764,  764,  176,  748,  748,  748,  748,  748,  748,
      748,  748,  766,  748,  748,  748,  748,  748,  748,  748,
      748,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  748,  748,  748,  748,
      770,  748,  748,  748,  748,  748,  748,  748,  748,  771,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  772,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      748,  748,  748,  748,  748,  748,  748,  748,  748,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
      447,  447,  561,  561,  561,  561,  561,  561,  561,  561,
       27,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  772,  748,
      748,  748,  748,  748,  748,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,  773,  505,  561,  561,
      561,  561,  561,  561,  561,  561,   74,  748,  748,  748,
      748,  748,  748,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,   27,  125,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  561,  561,  561,  561,
      561,  561,  561,  748,  748,  748,  748,  748,  748,  451,
       74,  289,   74,   74,   74,   74,   74,   74,   74,   74,
       74,  561,  773,  561,  561,  561,  561,  561,  561,  561,
      176,  373,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   27,   27,   27,   27,   27,   27,  561,  561,  561,

      451,  460,   74,   74,   74,   74,   74,   74,  773,  561,
      561,  561,  176,  176,  176,  176,  176,  176,   27,   27,
       27,  447,   74,   74,   74,  505,  176,  176,  176,   27,
       27,   27,   74,   74,   74,  176,  176,  176,   27,   74,
      176,   27,   74,  176,   27,   74,  176,    0,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748
    } ;

static yyconst flex_int16_t yy_nxt[3980] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   20,   24,   24,   24,   24,   44,
       45,   46,   47,   24,   48,   49,   50,   51,   52,   24,
       53,   24,   24,   24,   24,   54,   55,   56,   24,   57,
       24,   58,   59,   60,   61,   20,   20,   20,   20,   20,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   20,
       71,   22,   23,   72,   25,   73,   74,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   20,   72,   72,   72,   72,   44,   45,

       46,   47,   72,   75,   76,   77,   78,   79,   72,   80,
       72,   72,   72,   72,   81,   82,   83,   72,   84,   72,
       58,   59,   60,   61,   20,   20,   20,   20,   20,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   95,   96,
      680,   97,  343,   95,   96,   98,   97,  344,  101,  102,
       98,  103,   99,  101,  102,  104,  103,   99,  107,  108,
      104,  362,  105,  509,  107,  108,  363,  105,  109,  112,
      113,  112,  113,  110,  109,  115,  116,  117,  355,  110,
      115,  116,  117,  196,  197,  198,  223,  653,  232,  513,
      224,  118,  233,  234,  239,  240,  118,  119,  120,  121,

      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  119,  123,  123,  123,  123,  143,  144,  145,  146,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  147,  148,
      149,  150,  119,  119,  119,  119,  119,  151,  152,  153,
      154,  155,  155,  156,  157,  158,  160,  161,  162,  512,
      163,  199,  202,  202,  164,  165,  199,  201,  511,  166,
      262,  262,  167,  252,  200,  168,  169,  170,  171,  200,
      200,  510,  202,  317,  317,  200,  203,  204,  205,  206,

      207,  207,  208,  209,  210,  212,  213,  214,  215,  216,
      216,  217,  218,  219,  259,  259,  259,  259,  259,  172,
      160,  161,  162,  225,  163,  509,  226,  585,  164,  165,
      227,  228,  229,  166,  239,  240,  167,  202,  202,  168,
      169,  170,  171,  235,  230,  236,  231,  578,  202,  232,
      202,  202,  237,  238,  234,  244,  245,  202,  260,  260,
      260,  202,  325,  237,  238,  327,  326,  246,  331,  328,
      202,  432,  332,  172,  173,  173,  173,  173,  174,  173,
      175,  176,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  177,  173,  173,  173,  173,  173,  173,  173,  174,

      174,  174,  174,  173,  173,  173,  173,  174,  178,  179,
      180,  181,  182,  174,  183,  174,  174,  174,  174,  184,
      185,  186,  174,  187,  174,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  188,  189,  190,  191,  192,  192,
      193,  194,  195,  220,  221,  202,  202,  202,  202,  202,
      202,  315,  315,  315,  220,  432,  202,  333,  202,  253,
      202,  334,  247,  221,  250,  202,  430,  202,  251,  202,
      265,  265,  265,  265,  202,  202,  203,  204,  205,  206,
      207,  207,  208,  209,  210,  202,  202,  202,  279,  248,
      249,  202,  202,  430,  202,  199,  254,  202,  320,  320,

      320,  320,  202,  255,  202,  202,  202,  406,  200,  256,
      527,  202,  262,  262,  200,  202,  257,  261,  261,  261,
      261,  261,  401,  401,  202,  263,  263,  263,  263,  263,
      263,  263,  263,  264,  263,  266,  266,  266,  266,  266,
      268,  197,  198,  410,  410,  270,  520,  281,  282,  283,
      284,  285,  285,  286,  287,  288,  290,  291,  292,  293,
      294,  294,  295,  296,  297,  280,  280,  280,  280,  280,
      280,  280,  280,  301,  360,  223,  280,  231,  280,  224,
      280,  423,  280,  300,  302,  280,  303,  280,  306,  280,
      358,  280,  307,  314,  314,  314,  314,  314,  510,  271,

      272,  273,  274,  275,  275,  276,  277,  278,  279,  280,
      280,  280,  280,  356,  232,  357,  280,  280,  233,  234,
      280,  513,  308,  512,  304,  305,  309,  280,  199,  280,
      358,  280,  280,  280,  298,  299,  280,  280,  280,  280,
      280,  200,  310,  280,  511,  298,  341,  200,  280,  311,
      280,  313,  280,  491,  299,  312,  484,  280,  475,  280,
      316,  316,  316,  316,  316,  417,  417,  281,  282,  283,
      284,  285,  285,  286,  287,  288,  318,  318,  318,  318,
      318,  318,  318,  318,  319,  318,  321,  321,  321,  321,
      321,  345,  197,  198,  199,  352,  425,  202,  202,  346,

      347,  471,  471,  348,  424,  349,  350,  200,  202,  351,
      260,  260,  260,  200,  399,  399,  399,  202,  212,  213,
      214,  215,  216,  216,  217,  218,  219,  353,  354,  196,
      197,  198,  225,  480,  480,  226,  487,  487,  353,  357,
      228,  229,  235,  227,  236,  516,  516,  354,  408,  408,
      408,  237,  238,  230,  421,  231,  259,  259,  259,  259,
      259,  414,  237,  238,  261,  261,  261,  261,  261,  263,
      263,  263,  263,  263,  265,  265,  265,  265,  266,  266,
      266,  266,  266,  365,  366,  367,  368,  369,  369,  370,
      371,  372,  374,  375,  376,  377,  378,  378,  379,  380,

      381,  382,  383,  197,  364,  364,  364,  364,  364,  364,
      405,  429,  382,  429,  385,  364,  430,  364,  361,  364,
      360,  383,  384,  387,  364,  386,  364,  267,  364,  415,
      415,  415,  364,  364,  365,  366,  367,  368,  369,  369,
      370,  371,  372,  364,  364,  364,  240,  388,  389,  364,
      364,  258,  364,  523,  523,  364,  364,  364,  574,  574,
      392,  390,  364,  364,  364,  391,  393,  364,  243,  364,
      202,  202,  394,  364,  364,  364,  364,  364,  364,  581,
      581,  202,  364,  649,  649,  364,  395,  242,  364,  397,
      202,  431,  396,  431,  364,  241,  432,  364,  398,  398,

      398,  398,  398,  400,  400,  400,  400,  400,  402,  402,
      402,  402,  402,  403,  403,  403,  403,  404,  404,  404,
      404,  404,  199,  406,  407,  199,  406,  407,  202,  202,
      202,  202,  202,  676,  676,  200,  358,  356,  200,  355,
      222,  200,  342,  341,  200,  409,  409,  409,  409,  409,
      411,  411,  411,  411,  411,  412,  412,  412,  412,  413,
      413,  413,  413,  413,  211,  211,  211,  211,  211,  416,
      416,  416,  416,  416,  418,  418,  418,  418,  418,  419,
      419,  419,  419,  420,  420,  420,  420,  420,  202,  202,
      202,  202,  469,  469,  469,  229,  478,  478,  478,  202,

      340,  202,  237,  238,  709,  476,  427,  235,  202,  236,
      202,  427,  428,  237,  238,  338,  237,  238,  337,  237,
      238,  279,  202,  202,  427,  561,  427,  237,  238,  336,
      237,  238,  434,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  330,  477,  202,  324,  202,  322,  202,
      199,  202,  437,  435,  436,  267,  202,  240,  202,  438,
      202,  202,  202,  200,  202,  202,  258,  202,  202,  200,
      439,  243,  202,  242,  477,  202,  241,  222,  202,  202,
      202,  202,  440,  441,  202,  202,  202,  202,  709,  476,
      202,  202,  202,  202,  202,  748,  202,  202,  202,  202,

      748,  748,  202,  444,  202,  442,  443,  748,  202,  561,
      748,  202,  748,  202,  202,  202,  748,  202,  202,  202,
      445,  473,  473,  473,  473,  202,  279,  446,  748,  202,
      482,  482,  482,  482,  202,  485,  485,  485,  202,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  447,  448,  448,  448,  448,  448,  449,
      449,  449,  449,  449,  450,  450,  450,  450,  450,  268,
      197,  198,  748,  748,  270,  452,  453,  454,  455,  456,
      456,  457,  458,  459,  461,  462,  463,  464,  465,  465,

      466,  467,  468,  269,  269,  269,  269,  269,  470,  470,
      470,  470,  470,  472,  472,  472,  472,  472,  474,  474,
      474,  474,  474,  280,  280,  280,  280,  280,  479,  479,
      479,  479,  479,  279,  748,  748,  280,  280,  271,  272,
      273,  274,  275,  275,  276,  277,  278,  280,  481,  481,
      481,  481,  481,  514,  514,  514,  280,  483,  483,  483,
      483,  483,  289,  289,  289,  289,  289,  486,  486,  486,
      486,  486,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  490,  490,  490,  490,  490,  518,  518,  518,  518,
      280,  280,  290,  291,  292,  293,  294,  294,  295,  296,

      297,  280,  280,  280,  280,  280,  280,  280,  748,  748,
      280,  748,  748,  280,  492,  280,  748,  280,  280,  280,
      280,  280,  280,  748,  280,  493,  494,  748,  748,  280,
      748,  280,  280,  280,  495,  280,  280,  748,  280,  748,
      280,  748,  748,  280,  497,  748,  280,  280,  280,  748,
      748,  496,  280,  280,  280,  280,  748,  748,  280,  280,
      280,  280,  280,  748,  280,  498,  748,  280,  748,  499,
      280,  748,  280,  280,  280,  280,  280,  280,  748,  280,
      748,  500,  280,  280,  748,  280,  502,  280,  748,  501,
      280,  280,  748,  280,  280,  748,  280,  280,  280,  748,

      748,  280,  280,  504,  748,  503,  748,  748,  280,  748,
      280,  314,  314,  314,  314,  314,  748,  280,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  505,  506,  506,
      506,  506,  506,  507,  507,  507,  507,  507,  508,  508,
      508,  508,  508,  345,  197,  198,  748,  748,  202,  202,
      748,  346,  347,  202,  202,  348,  748,  349,  350,  202,
      748,  351,  748,  748,  202,  364,  364,  748,  202,  521,
      521,  521,  748,  202,  748,  748,  364,  364,  364,  364,
      364,  364,  572,  572,  572,  364,  515,  515,  515,  515,

      515,  517,  517,  517,  517,  517,  519,  519,  519,  519,
      519,  374,  375,  376,  377,  378,  378,  379,  380,  381,
      373,  373,  373,  373,  373,  522,  522,  522,  522,  522,
      524,  524,  524,  524,  524,  525,  525,  525,  525,  526,
      526,  526,  526,  526,  364,  364,  364,  364,  364,  364,
      364,  364,  579,  579,  579,  364,  748,  364,  528,  364,
      748,  364,  364,  364,  364,  748,  364,  748,  364,  529,
      530,  748,  748,  364,  364,  364,  364,  364,  531,  364,
      364,  748,  364,  748,  748,  364,  748,  364,  533,  748,
      364,  364,  364,  748,  364,  532,  364,  364,  364,  364,

      748,  748,  364,  364,  364,  364,  364,  748,  364,  534,
      748,  364,  748,  535,  364,  748,  364,  364,  364,  364,
      364,  364,  748,  364,  748,  536,  364,  364,  748,  364,
      538,  364,  748,  537,  364,  364,  748,  364,  364,  748,
      364,  364,  364,  748,  748,  364,  364,  540,  748,  539,
      748,  748,  364,  748,  364,  398,  398,  398,  398,  398,
      748,  364,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  541,  541,  541,
      541,  541,  542,  542,  542,  542,  542,  543,  543,  543,
      543,  543,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  544,  544,  544,  544,  544,  545,  545,  545,
      545,  545,  546,  546,  546,  546,  546,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  547,  547,  547,
      547,  547,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  428,  202,  202,  202,  202,  202,  202,  237,
      238,  550,  748,  551,  202,  552,  202,  748,  202,  748,
      237,  238,  748,  202,  748,  202,  748,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  748,  202,

      554,  202,  748,  555,  556,  202,  748,  202,  553,  748,
      202,  748,  202,  748,  202,  748,  202,  202,  202,  202,
      202,  202,  202,  748,  202,  202,  748,  748,  202,  558,
      202,  748,  202,  748,  748,  202,  748,  202,  557,  202,
      559,  202,  202,  202,  202,  571,  571,  571,  571,  571,
      647,  647,  647,  202,  674,  674,  674,  560,  576,  576,
      576,  576,  202,  561,  561,  748,  561,  562,  561,  562,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  562,  561,  561,  561,  561,  561,  561,  562,  562,
      562,  562,  561,  561,  561,  561,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  563,  564,  565,  566,  567,  567,  568,
      569,  570,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  279,  451,  451,  451,  451,  451,  573,  573,
      573,  573,  573,  575,  575,  575,  575,  575,  577,  577,
      577,  577,  577,  279,  460,  460,  460,  460,  460,  580,
      580,  580,  580,  580,  582,  582,  582,  582,  582,  583,
      583,  583,  583,  584,  584,  584,  584,  584,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  748,  748,

      748,  452,  453,  454,  455,  456,  456,  457,  458,  459,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      748,  748,  461,  462,  463,  464,  465,  465,  466,  467,
      468,  586,  586,  586,  586,  586,  587,  587,  587,  587,
      587,  588,  588,  588,  588,  588,  589,  280,  280,  280,
      280,  280,  748,  748,  748,  476,  748,  748,  748,  476,
      280,  280,  280,  280,  280,  476,  476,  748,  476,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  590,
      590,  590,  590,  590,  591,  591,  591,  591,  591,  592,
      592,  592,  592,  592,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  593,  593,  593,  593,  593,  594,
      594,  594,  594,  594,  595,  595,  595,  595,  595,  280,
      280,  280,  280,  748,  748,  596,  280,  280,  748,  748,
      280,  597,  280,  748,  598,  748,  748,  280,  748,  280,
      748,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  748,  748,  280,  600,  280,  748,  748,  601,  748,
      280,  748,  599,  748,  280,  280,  280,  280,  748,  280,
      280,  280,  748,  602,  748,  748,  280,  280,  280,  748,
      748,  280,  280,  280,  748,  280,  748,  604,  280,  748,

      280,  603,  748,  280,  280,  280,  748,  280,  605,  748,
      280,  280,  280,  748,  748,  280,  617,  617,  617,  617,
      617,  280,  748,  748,  280,  606,  651,  651,  651,  651,
      280,  561,  607,  748,  561,  608,  561,  608,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  608,
      561,  561,  561,  561,  561,  561,  608,  608,  608,  608,
      561,  561,  561,  561,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  609,  610,  611,  612,  613,  613,  614,  615,  616,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      618,  618,  618,  618,  618,  619,  619,  619,  619,  619,
      620,  620,  620,  620,  620,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  621,  621,  621,  621,  621,
      622,  622,  622,  622,  622,  623,  623,  623,  623,  623,
      364,  364,  364,  364,  748,  748,  624,  364,  364,  748,
      748,  364,  625,  364,  748,  626,  748,  748,  364,  748,

      364,  748,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  748,  748,  364,  628,  364,  748,  748,  629,
      748,  364,  748,  627,  748,  364,  364,  364,  364,  748,
      364,  364,  364,  748,  630,  748,  748,  364,  364,  364,
      748,  748,  364,  364,  364,  748,  364,  748,  632,  364,
      748,  364,  631,  748,  364,  364,  364,  748,  364,  633,
      748,  364,  364,  364,  748,  748,  364,  635,  635,  635,
      635,  635,  364,  748,  748,  364,  634,  678,  678,  678,
      678,  364,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  636,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  202,  202,  202,  202,  202,  202,  202,  202,
      748,  748,  748,  202,  748,  202,  638,  202,  639,  202,
      748,  640,  202,  748,  202,  748,  202,  748,  202,  202,
      202,  748,  202,  202,  202,  202,  748,  202,  202,  748,
      202,  748,  641,  202,  748,  202,  748,  589,  202,  202,
      202,  202,  202,  642,  643,  644,  476,  202,  645,  748,
      476,  202,  202,  202,  202,  202,  476,  476,  748,  476,
      202,  748,  748,  202,  646,  202,  562,  562,  562,  562,

      562,  748,  202,  748,  202,  561,  748,  561,  648,  648,
      648,  648,  648,  650,  650,  650,  650,  650,  748,  561,
      652,  652,  652,  652,  652,  748,  561,  561,  561,  561,
      748,  748,  748,  748,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  451,  451,  451,  451,  451,  748,  748,  202,
      202,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      202,  451,  451,  451,  451,  451,  748,  748,  748,  202,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,

      656,  656,  656,  656,  656,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  657,  657,  657,  657,  657,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  280,  280,  280,  280,  280,
      280,  280,  280,  748,  748,  748,  280,  748,  280,  663,

      280,  664,  280,  748,  665,  280,  748,  280,  748,  280,
      748,  280,  280,  280,  748,  280,  280,  280,  280,  748,
      280,  280,  748,  280,  748,  666,  280,  748,  280,  748,
      748,  280,  280,  280,  280,  280,  667,  668,  669,  748,
      280,  670,  748,  748,  280,  280,  280,  280,  280,  748,
      607,  476,  748,  280,  748,  748,  280,  671,  280,  561,
      748,  748,  748,  561,  748,  280,  748,  280,  748,  561,
      561,  561,  561,  673,  608,  608,  608,  608,  608,  675,
      675,  675,  675,  675,  677,  677,  677,  677,  677,  679,
      679,  679,  679,  679,  280,  280,  681,  681,  681,  681,

      681,  748,  748,  673,  748,  280,  681,  681,  681,  681,
      681,  748,  748,  748,  280,  681,  681,  681,  681,  681,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  364,  364,  364,  364,  364,
      364,  364,  364,  748,  748,  748,  364,  748,  364,  683,
      364,  684,  364,  748,  685,  364,  748,  364,  748,  364,
      748,  364,  364,  364,  748,  364,  364,  364,  364,  748,
      364,  364,  748,  364,  748,  686,  364,  748,  364,  748,
      748,  364,  364,  364,  364,  364,  687,  688,  689,  748,
      364,  690,  748,  748,  364,  364,  364,  364,  364,  364,

      364,  202,  202,  364,  748,  748,  364,  691,  364,  748,
      364,  748,  202,  202,  202,  364,  748,  364,  748,  364,
      748,  202,  748,  748,  202,  202,  202,  202,  202,  202,
      202,  748,  748,  202,  748,  748,  202,  748,  202,  748,
      693,  202,  202,  692,  748,  202,  748,  202,  748,  202,
      748,  748,  202,  202,  202,  748,  748,  694,  202,  202,
      748,  202,  748,  748,  202,  748,  695,  748,  748,  202,
      202,  202,  748,  202,  696,  202,  202,  748,  202,  748,
      748,  202,  748,  748,  748,  748,  202,  748,  748,  748,
      697,  748,  748,  748,  748,  202,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  280,  280,  280,  280,  280,  280,  748,  280,  280,
      748,  748,  280,  748,  280,  748,  280,  748,  748,  280,
      748,  280,  748,  280,  703,  280,  280,  280,  280,  280,
      280,  280,  280,  748,  748,  748,  748,  704,  748,  748,

      280,  748,  280,  748,  706,  705,  280,  280,  280,  280,
      748,  280,  748,  280,  280,  280,  280,  748,  280,  748,
      748,  748,  748,  707,  280,  748,  280,  280,  608,  608,
      608,  608,  608,  708,  748,  280,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  710,  710,  710,  710,  710,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  364,  364,  364,  364,
      364,  364,  748,  364,  364,  748,  748,  364,  748,  364,
      748,  364,  748,  748,  364,  748,  364,  748,  364,  713,
      364,  364,  364,  364,  364,  364,  364,  364,  748,  748,

      748,  748,  714,  748,  748,  364,  748,  364,  748,  716,
      715,  364,  364,  364,  364,  748,  364,  748,  364,  364,
      364,  364,  748,  364,  202,  202,  202,  202,  717,  364,
      748,  364,  364,  748,  748,  202,  748,  202,  718,  748,
      364,  202,  202,  748,  202,  719,  202,  202,  202,  720,
      748,  748,  202,  748,  202,  202,  748,  748,  202,  202,
      202,  202,  748,  748,  721,  202,  748,  202,  748,  748,
      202,  748,  748,  748,  202,  748,  748,  748,  748,  202,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  748,  280,  724,  280,  748,
      280,  748,  280,  748,  280,  280,  723,  280,  725,  280,
      748,  280,  748,  280,  280,  280,  726,  726,  726,  726,
      726,  364,  364,  748,  748,  280,  726,  726,  726,  726,
      726,  748,  364,  748,  280,  726,  726,  726,  726,  726,
      748,  364,  727,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  728,  364,  748,  364,  748,  364,  748,
      364,  748,  364,  364,  729,  364,  748,  364,  748,  364,
      748,  364,  202,  202,  202,  202,  748,  202,  202,  280,
      280,  748,  730,  202,  748,  202,  748,  748,  202,  733,

      280,  748,  202,  732,  731,  280,  280,  202,  748,  280,
      280,  280,  364,  364,  748,  748,  280,  364,  364,  748,
      748,  280,  736,  364,  748,  734,  735,  748,  364,  748,
      280,  748,  364,  364,  364,  202,  202,  737,  748,  202,
      202,  748,  748,  748,  364,  748,  202,  202,  202,  738,
      202,  748,  739,  364,  748,  202,  748,  748,  202,  202,
      280,  280,  280,  280,  748,  280,  280,  202,  364,  364,
      748,  280,  748,  280,  748,  740,  280,  748,  748,  364,
      280,  748,  280,  364,  364,  280,  364,  364,  364,  748,
      202,  202,  748,  748,  364,  748,  741,  364,  280,  280,

      748,  202,  748,  364,  748,  748,  364,  742,  748,  280,
      202,  364,  364,  202,  202,  743,  280,  280,  280,  364,
      364,  748,  364,  748,  202,  748,  748,  280,  744,  745,
      364,  364,  746,  202,  748,  747,  280,  202,  202,  364,
      280,  280,  364,  364,  748,  748,  748,  748,  202,  748,
      748,  280,  748,  364,  748,  748,  748,  202,  748,  748,
      280,  748,  364,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  202,
      748,  748,  748,  748,  748,  748,  202,  211,  748,  748,
      748,  748,  748,  748,  211,  269,  269,  269,  748,  269,
      280,  748,  280,  748,  748,  748,  748,  748,  748,  280,
      289,  748,  748,  748,  748,  748,  748,  289,  323,  323,
      748,  323,  748,  323,  323,  323,  323,  748,  323,  329,
      329,  748,  329,  748,  329,  329,  329,  329,  748,  329,
      335,  335,  748,  335,  335,  335,  335,  748,  335,  335,

      335,  339,  339,  748,  339,  339,  339,  339,  339,  339,
      339,  339,  359,  748,  748,  359,  748,  359,  359,  359,
      748,  359,  359,  364,  748,  748,  748,  748,  748,  748,
      364,  373,  748,  748,  748,  748,  748,  748,  373,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  451,
      748,  451,  748,  748,  748,  748,  748,  748,  451,  460,
      748,  748,  748,  748,  748,  748,  460,  476,  476,  476,
      476,  476,  476,  748,  476,  748,  476,  476,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,   19,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748
    } ;

static yyconst flex_int16_t yy_chk[3980] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
      616,    3,  118,    4,    4,    3,    4,  118,    5,    5,
        4,    5,    3,    6,    6,    5,    6,    4,    7,    7,
        6,  167,    5,  348,    8,    8,  167,    6,    7,    9,
        9,   10,   10,    7,    8,   11,   11,   11,  348,    8,
       12,   12,   12,   21,   21,   21,   32,  570,   37,  513,
       32,   11,   37,   37,   41,   41,   12,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   15,   15,  512,
       15,   22,   53,   53,   15,   15,   23,   23,  511,   15,
       65,   65,   15,   53,   22,   15,   15,   15,   15,   23,
       22,  510,   53,   88,   88,   23,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   62,   62,   62,   62,   62,   15,
       16,   16,   16,   36,   16,  509,   36,  468,   16,   16,
       36,   36,   36,   16,  140,  140,   16,   48,   48,   16,
       16,   16,   16,   38,   36,   38,   36,  459,   48,  177,
       49,   49,   38,   38,  177,   48,   49,   48,   63,   63,
       63,   49,   97,   38,   38,   98,   97,   49,  103,   98,
       49,  432,  103,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   27,   27,   50,   50,   52,   52,   54,
       54,   86,   86,   86,   27,  431,   50,  104,   52,   54,
       54,  104,   50,   27,   52,   50,  430,   52,   52,   54,
       68,   68,   68,   68,   51,   51,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   51,   55,   55,   72,   51,
       51,   56,   56,  429,   51,  121,   55,   55,   91,   91,

       91,   91,   56,   56,   57,   57,   55,  407,  121,   56,
      381,   56,  154,  154,  121,   57,   57,   64,   64,   64,
       64,   64,  191,  191,   57,   66,   66,   66,   66,   66,
       67,   67,   67,   67,   67,   69,   69,   69,   69,   69,
       71,   71,   71,  206,  206,   71,  372,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   75,   75,   76,   76,   77,
       77,   79,   79,   76,  360,  131,   75,  226,   76,  131,
       77,  226,   79,   75,   76,   75,   77,   76,   79,   77,
      358,   79,   79,   85,   85,   85,   85,   85,  349,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   74,   78,
       78,   80,   80,  349,  136,  357,   81,   81,  136,  136,
       78,  356,   80,  355,   78,   78,   81,   81,  201,   78,
      351,   80,   82,   82,   74,   74,   81,   83,   83,   84,
       84,  201,   82,   82,  350,   74,  341,  201,   83,   83,
       84,   84,   82,  297,   74,   83,  288,   83,  278,   84,
       87,   87,   87,   87,   87,  215,  215,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   89,   89,   89,   89,
       89,   90,   90,   90,   90,   90,   92,   92,   92,   92,
       92,  120,  120,  120,  122,  122,  230,  123,  123,  120,

      120,  274,  274,  120,  228,  120,  120,  122,  123,  120,
      152,  152,  152,  122,  189,  189,  189,  123,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  126,  126,  196,
      196,  196,  135,  284,  284,  135,  293,  293,  126,  135,
      135,  135,  137,  227,  137,  368,  368,  126,  204,  204,
      204,  137,  137,  135,  219,  135,  151,  151,  151,  151,
      151,  210,  137,  137,  153,  153,  153,  153,  153,  155,
      155,  155,  155,  155,  156,  156,  156,  156,  157,  157,
      157,  157,  157,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  176,  176,  198,  178,  178,  180,  180,  179,  179,
      195,  237,  176,  237,  179,  178,  237,  180,  162,  179,
      160,  176,  178,  180,  178,  179,  180,  158,  179,  213,
      213,  213,  181,  181,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  181,  182,  182,  150,  181,  181,  183,
      183,  148,  181,  377,  377,  182,  184,  184,  455,  455,
      183,  182,  185,  185,  182,  182,  184,  184,  144,  183,
      202,  202,  185,  185,  186,  186,  184,  187,  187,  464,
      464,  202,  185,  566,  566,  186,  186,  142,  187,  187,
      202,  238,  186,  238,  186,  141,  238,  187,  188,  188,

      188,  188,  188,  190,  190,  190,  190,  190,  192,  192,
      192,  192,  192,  193,  193,  193,  193,  194,  194,  194,
      194,  194,  199,  199,  199,  200,  200,  200,  203,  203,
      203,  203,  203,  612,  612,  199,  138,  134,  200,  132,
      127,  199,  117,  115,  200,  205,  205,  205,  205,  205,
      207,  207,  207,  207,  207,  208,  208,  208,  208,  209,
      209,  209,  209,  209,  212,  212,  212,  212,  212,  214,
      214,  214,  214,  214,  216,  216,  216,  216,  216,  217,
      217,  217,  217,  218,  218,  218,  218,  218,  220,  220,
      221,  221,  272,  272,  272,  229,  282,  282,  282,  220,

      113,  221,  229,  229,  673,  673,  235,  236,  220,  236,
      221,  235,  235,  229,  229,  110,  236,  236,  109,  235,
      235,  279,  244,  244,  235,  673,  235,  236,  236,  108,
      235,  235,  244,  244,  245,  245,  246,  246,  247,  247,
      248,  248,  244,  102,  279,  245,   96,  246,   93,  247,
      352,  248,  246,  245,  245,   70,  246,   61,  247,  248,
      248,  249,  249,  352,  250,  250,   59,  251,  251,  352,
      249,   45,  249,   43,  279,  250,   42,   28,  251,  252,
      252,  249,  250,  251,  250,  253,  253,  251,  709,  709,
      252,  254,  254,  255,  255,   19,  253,  256,  256,  252,

        0,    0,  254,  255,  255,  253,  254,    0,  256,  709,
        0,  254,    0,  255,  257,  257,    0,  256,  259,  259,
      256,  276,  276,  276,  276,  257,  269,  257,    0,  259,
      286,  286,  286,  286,  257,  291,  291,  291,  259,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  262,
      262,  262,  262,  262,  263,  263,  263,  263,  263,  264,
      264,  264,  264,  264,  265,  265,  265,  265,  265,  266,
      266,  266,  266,  266,  267,  267,  267,  267,  267,  268,
      268,  268,    0,    0,  268,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  271,  271,  271,  271,  271,  273,  273,
      273,  273,  273,  275,  275,  275,  275,  275,  277,  277,
      277,  277,  277,  281,  281,  281,  281,  281,  283,  283,
      283,  283,  283,  289,    0,    0,  280,  280,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  280,  285,  285,
      285,  285,  285,  366,  366,  366,  280,  287,  287,  287,
      287,  287,  290,  290,  290,  290,  290,  292,  292,  292,
      292,  292,  294,  294,  294,  294,  294,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  370,  370,  370,  370,
      298,  298,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  298,  299,  299,  300,  300,  301,  301,    0,    0,
      298,    0,    0,  299,  300,  300,    0,  301,  302,  302,
      303,  303,  299,    0,  300,  301,  301,    0,    0,  302,
        0,  303,  304,  304,  302,  305,  305,    0,  302,    0,
      303,    0,    0,  304,  305,    0,  305,  306,  306,    0,
        0,  304,  304,  307,  307,  305,    0,    0,  306,  308,
      308,  309,  309,    0,  307,  306,    0,  306,    0,  307,
      308,    0,  309,  307,  310,  310,  311,  311,    0,  308,
        0,  309,  312,  312,    0,  310,  311,  311,    0,  310,
      313,  313,    0,  312,  310,    0,  311,  314,  314,    0,

        0,  313,  312,  313,    0,  312,    0,    0,  314,    0,
      313,  315,  315,  315,  315,  315,    0,  314,  316,  316,
      316,  316,  316,  317,  317,  317,  317,  317,  318,  318,
      318,  318,  318,  319,  319,  319,  319,  319,  320,  320,
      320,  320,  320,  321,  321,  321,  321,  321,  322,  322,
      322,  322,  322,  345,  345,  345,    0,    0,  353,  353,
        0,  345,  345,  354,  354,  345,    0,  345,  345,  353,
        0,  345,    0,    0,  354,  364,  364,    0,  353,  375,
      375,  375,    0,  354,    0,    0,  364,  365,  365,  365,
      365,  365,  453,  453,  453,  364,  367,  367,  367,  367,

      367,  369,  369,  369,  369,  369,  371,  371,  371,  371,
      371,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      374,  374,  374,  374,  374,  376,  376,  376,  376,  376,
      378,  378,  378,  378,  378,  379,  379,  379,  379,  380,
      380,  380,  380,  380,  382,  382,  383,  383,  384,  384,
      385,  385,  462,  462,  462,  382,    0,  383,  384,  384,
        0,  385,  386,  386,  382,    0,  383,    0,  384,  385,
      385,    0,    0,  386,  387,  387,  388,  388,  386,  389,
      389,    0,  386,    0,    0,  387,    0,  388,  389,    0,
      389,  390,  390,    0,  387,  388,  388,  391,  391,  389,

        0,    0,  390,  392,  392,  393,  393,    0,  391,  390,
        0,  390,    0,  391,  392,    0,  393,  391,  394,  394,
      395,  395,    0,  392,    0,  393,  396,  396,    0,  394,
      395,  395,    0,  394,  397,  397,    0,  396,  394,    0,
      395,  398,  398,    0,    0,  397,  396,  397,    0,  396,
        0,    0,  398,    0,  397,  399,  399,  399,  399,  399,
        0,  398,  400,  400,  400,  400,  400,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  402,  403,  403,  403,
      403,  403,  404,  404,  404,  404,  404,  405,  405,  405,
      405,  405,  408,  408,  408,  408,  408,  409,  409,  409,

      409,  409,  410,  410,  410,  410,  410,  411,  411,  411,
      411,  411,  412,  412,  412,  412,  412,  413,  413,  413,
      413,  413,  414,  414,  414,  414,  414,  415,  415,  415,
      415,  415,  416,  416,  416,  416,  416,  417,  417,  417,
      417,  417,  418,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  420,  420,  420,  420,  420,  421,  421,  421,
      421,  421,  428,  435,  435,  434,  434,  436,  436,  428,
      428,  434,    0,  435,  435,  436,  434,    0,  436,    0,
      428,  428,    0,  435,    0,  434,    0,  436,  437,  437,
      438,  438,  439,  439,  440,  440,  441,  441,    0,  437,

      438,  438,    0,  439,  441,  440,    0,  441,  437,    0,
      438,    0,  439,    0,  440,    0,  441,  442,  442,  443,
      443,  445,  445,    0,  444,  444,    0,    0,  442,  443,
      443,    0,  445,    0,    0,  444,    0,  442,  442,  443,
      444,  445,  446,  446,  444,  448,  448,  448,  448,  448,
      564,  564,  564,  446,  610,  610,  610,  446,  457,  457,
      457,  457,  446,  447,  447,    0,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  449,  449,  449,  449,  449,  450,  450,  450,
      450,  450,  451,  452,  452,  452,  452,  452,  454,  454,
      454,  454,  454,  456,  456,  456,  456,  456,  458,  458,
      458,  458,  458,  460,  461,  461,  461,  461,  461,  463,
      463,  463,  463,  463,  465,  465,  465,  465,  465,  466,
      466,  466,  466,  467,  467,  467,  467,  467,  469,  469,
      469,  469,  469,  470,  470,  470,  470,  470,    0,    0,

        0,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
        0,    0,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  473,  473,  473,  473,  473,  474,  474,  474,  474,
      474,  475,  475,  475,  475,  475,  477,  478,  478,  478,
      478,  478,    0,    0,    0,  477,    0,    0,    0,  477,
      479,  479,  479,  479,  479,  477,  477,    0,  477,  480,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  482,
      482,  482,  482,  482,  483,  483,  483,  483,  483,  484,
      484,  484,  484,  484,  485,  485,  485,  485,  485,  486,

      486,  486,  486,  486,  487,  487,  487,  487,  487,  488,
      488,  488,  488,  488,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  491,  491,  491,  491,  491,  492,
      492,  493,  493,    0,    0,  492,  494,  494,    0,    0,
      492,  493,  493,    0,  494,    0,    0,  494,    0,  492,
        0,  493,  495,  495,  496,  496,  494,  497,  497,  498,
      498,    0,    0,  495,  496,  496,    0,    0,  497,    0,
      498,    0,  495,    0,  496,  499,  499,  497,    0,  498,
      500,  500,    0,  499,    0,    0,  499,  501,  501,    0,
        0,  500,  502,  502,    0,  499,    0,  501,  501,    0,

      500,  500,    0,  502,  503,  503,    0,  501,  502,    0,
      504,  504,  502,    0,    0,  503,  506,  506,  506,  506,
      506,  504,    0,    0,  503,  504,  568,  568,  568,  568,
      504,  505,  505,    0,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      507,  507,  507,  507,  507,  508,  508,  508,  508,  508,
      514,  514,  514,  514,  514,  515,  515,  515,  515,  515,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,
      518,  518,  518,  518,  518,  519,  519,  519,  519,  519,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      522,  522,  522,  522,  522,  523,  523,  523,  523,  523,
      524,  524,  524,  524,  524,  525,  525,  525,  525,  525,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      528,  528,  529,  529,    0,    0,  528,  530,  530,    0,
        0,  528,  529,  529,    0,  530,    0,    0,  530,    0,

      528,    0,  529,  531,  531,  532,  532,  530,  533,  533,
      534,  534,    0,    0,  531,  532,  532,    0,    0,  533,
        0,  534,    0,  531,    0,  532,  535,  535,  533,    0,
      534,  536,  536,    0,  535,    0,    0,  535,  537,  537,
        0,    0,  536,  538,  538,    0,  535,    0,  537,  537,
        0,  536,  536,    0,  538,  539,  539,    0,  537,  538,
        0,  540,  540,  538,    0,    0,  539,  541,  541,  541,
      541,  541,  540,    0,    0,  539,  540,  614,  614,  614,
      614,  540,  542,  542,  542,  542,  542,  543,  543,  543,
      543,  543,  544,  544,  544,  544,  544,  545,  545,  545,

      545,  545,  546,  546,  546,  546,  546,  547,  547,  547,
      547,  547,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  550,  550,  551,  551,  552,  552,  553,  553,
        0,    0,    0,  550,    0,  551,  550,  552,  552,  553,
        0,  553,  550,    0,  551,    0,  552,    0,  553,  554,
      554,    0,  555,  555,  556,  556,    0,  557,  557,    0,
      554,    0,  554,  555,    0,  556,    0,  589,  557,  554,
      558,  558,  555,  555,  556,  557,  589,  557,  558,    0,
      589,  558,  559,  559,  560,  560,  589,  589,    0,  589,
      558,    0,    0,  559,  560,  560,  563,  563,  563,  563,

      563,    0,  559,    0,  560,  561,    0,  561,  565,  565,
      565,  565,  565,  567,  567,  567,  567,  567,    0,  561,
      569,  569,  569,  569,  569,    0,  561,  561,  561,  561,
        0,    0,    0,    0,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  572,  572,  572,  572,  572,    0,    0,  571,
      571,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      571,  573,  573,  573,  573,  573,    0,    0,    0,  571,
      574,  574,  574,  574,  574,  575,  575,  575,  575,  575,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,

      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      580,  580,  580,  580,  580,  581,  581,  581,  581,  581,
      582,  582,  582,  582,  582,  583,  583,  583,  583,  583,
      584,  584,  584,  584,  584,  585,  585,  585,  585,  585,
      586,  586,  586,  586,  586,  587,  587,  587,  587,  587,
      588,  588,  588,  588,  588,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  592,  592,  592,  592,  592,
      593,  593,  593,  593,  593,  594,  594,  594,  594,  594,
      595,  595,  595,  595,  595,  596,  596,  597,  597,  598,
      598,  599,  599,    0,    0,    0,  596,    0,  597,  596,

      598,  598,  599,    0,  599,  596,    0,  597,    0,  598,
        0,  599,  600,  600,    0,  601,  601,  602,  602,    0,
      603,  603,    0,  600,    0,  600,  601,    0,  602,    0,
        0,  603,  600,  604,  604,  601,  601,  602,  603,    0,
      603,  604,    0,    0,  604,  605,  605,  606,  606,    0,
      607,  607,    0,  604,    0,    0,  605,  606,  606,  607,
        0,    0,    0,  607,    0,  605,    0,  606,    0,  607,
      607,  607,  607,  607,  609,  609,  609,  609,  609,  611,
      611,  611,  611,  611,  613,  613,  613,  613,  613,  615,
      615,  615,  615,  615,  617,  617,  618,  618,  618,  618,

      618,    0,    0,  607,    0,  617,  619,  619,  619,  619,
      619,    0,    0,    0,  617,  620,  620,  620,  620,  620,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      623,  623,  623,  623,  623,  624,  624,  625,  625,  626,
      626,  627,  627,    0,    0,    0,  624,    0,  625,  624,
      626,  626,  627,    0,  627,  624,    0,  625,    0,  626,
        0,  627,  628,  628,    0,  629,  629,  630,  630,    0,
      631,  631,    0,  628,    0,  628,  629,    0,  630,    0,
        0,  631,  628,  632,  632,  629,  629,  630,  631,    0,
      631,  632,    0,    0,  632,  633,  633,  634,  634,  635,

      635,  636,  636,  632,    0,    0,  633,  634,  634,    0,
      635,    0,  636,  638,  638,  633,    0,  634,    0,  635,
        0,  636,    0,    0,  638,  639,  639,  640,  640,  641,
      641,    0,    0,  638,    0,    0,  639,    0,  640,    0,
      641,  642,  642,  640,    0,  639,    0,  640,    0,  641,
        0,    0,  642,  643,  643,    0,    0,  642,  644,  644,
        0,  642,    0,    0,  643,    0,  643,    0,    0,  644,
      645,  645,    0,  643,  644,  646,  646,    0,  644,    0,
        0,  645,    0,    0,    0,    0,  646,    0,    0,    0,
      645,    0,    0,    0,    0,  646,  647,  647,  647,  647,

      647,  648,  648,  648,  648,  648,  649,  649,  649,  649,
      649,  650,  650,  650,  650,  650,  651,  651,  651,  651,
      651,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  656,  656,  656,  656,  656,  657,  657,  657,  657,
      657,  658,  658,  658,  658,  658,  659,  659,  659,  659,
      659,  661,  661,  663,  663,  664,  664,    0,  665,  665,
        0,    0,  661,    0,  663,    0,  664,    0,    0,  665,
        0,  661,    0,  663,  665,  664,  666,  666,  665,  667,
      667,  668,  668,    0,    0,    0,    0,  666,    0,    0,

      667,    0,  668,    0,  668,  667,  666,  669,  669,  667,
        0,  668,    0,  670,  670,  671,  671,    0,  669,    0,
        0,    0,    0,  669,  670,    0,  671,  669,  674,  674,
      674,  674,  674,  670,    0,  671,  675,  675,  675,  675,
      675,  676,  676,  676,  676,  676,  677,  677,  677,  677,
      677,  678,  678,  678,  678,  678,  679,  679,  679,  679,
      679,  680,  680,  680,  680,  680,  681,  681,  683,  683,
      684,  684,    0,  685,  685,    0,    0,  681,    0,  683,
        0,  684,    0,    0,  685,    0,  681,    0,  683,  685,
      684,  686,  686,  685,  687,  687,  688,  688,    0,    0,

        0,    0,  686,    0,    0,  687,    0,  688,    0,  688,
      687,  686,  689,  689,  687,    0,  688,    0,  690,  690,
      691,  691,    0,  689,  692,  692,  693,  693,  689,  690,
        0,  691,  689,    0,    0,  692,    0,  693,  690,    0,
      691,  694,  694,    0,  692,  692,  693,  695,  695,  694,
        0,    0,  694,    0,  696,  696,    0,    0,  695,  697,
      697,  694,    0,    0,  695,  696,    0,  695,    0,    0,
      697,    0,    0,    0,  696,    0,    0,    0,    0,  697,
      698,  698,  698,  698,  698,  699,  699,  699,  699,  699,
      700,  700,  700,  700,  700,  703,  703,  704,  704,  705,

      705,  706,  706,  707,  707,    0,  703,  705,  704,    0,
      705,    0,  706,    0,  707,  703,  703,  704,  706,  705,
        0,  706,    0,  707,  708,  708,  710,  710,  710,  710,
      710,  713,  713,    0,    0,  708,  711,  711,  711,  711,
      711,    0,  713,    0,  708,  712,  712,  712,  712,  712,
        0,  713,  713,  714,  714,  715,  715,  716,  716,  717,
      717,  718,  718,  715,  714,    0,  715,    0,  716,    0,
      717,    0,  718,  714,  716,  715,    0,  716,    0,  717,
        0,  718,  719,  719,  720,  720,    0,  721,  721,  723,
      723,    0,  719,  719,    0,  720,    0,    0,  721,  723,

      723,    0,  719,  721,  720,  724,  724,  721,    0,  723,
      725,  725,  727,  727,    0,    0,  724,  728,  728,    0,
        0,  725,  727,  727,    0,  724,  725,    0,  728,    0,
      725,    0,  727,  729,  729,  730,  730,  728,    0,  731,
      731,    0,    0,    0,  729,    0,  730,  732,  732,  729,
      731,    0,  731,  729,    0,  730,    0,    0,  732,  731,
      733,  733,  734,  734,    0,  735,  735,  732,  736,  736,
        0,  733,    0,  734,    0,  734,  735,    0,    0,  736,
      733,    0,  734,  737,  737,  735,  738,  738,  736,    0,
      739,  739,    0,    0,  737,    0,  737,  738,  740,  740,

        0,  739,    0,  737,    0,    0,  738,  739,    0,  740,
      739,  741,  741,  742,  742,  740,  743,  743,  740,  744,
      744,    0,  741,    0,  742,    0,    0,  743,  741,  742,
      744,  741,  743,  742,    0,  744,  743,  745,  745,  744,
      746,  746,  747,  747,    0,    0,    0,    0,  745,    0,
        0,  746,    0,  747,    0,    0,    0,  745,    0,    0,
      746,    0,  747,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  755,
        0,    0,    0,    0,    0,    0,  755,  756,    0,    0,
        0,    0,    0,    0,  756,  757,  757,  757,    0,  757,
      758,    0,  758,    0,    0,    0,    0,    0,    0,  758,
      759,    0,    0,    0,    0,    0,    0,  759,  760,  760,
        0,  760,    0,  760,  760,  760,  760,    0,  760,  761,
      761,    0,  761,    0,  761,  761,  761,  761,    0,  761,
      762,  762,    0,  762,  762,  762,  762,    0,  762,  762,

      762,  763,  763,    0,  763,  763,  763,  763,  763,  763,
      763,  763,  764,    0,    0,  764,    0,  764,  764,  764,
        0,  764,  764,  765,    0,    0,    0,    0,    0,    0,
      765,  766,    0,    0,    0,    0,    0,    0,  766,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  770,
        0,  770,    0,    0,    0,    0,    0,    0,  770,  771,
        0,    0,    0,    0,    0,    0,  771,  772,  772,  772,
      772,  772,  772,    0,  772,    0,  772,  772,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 749 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3910 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
	    std::string str = "Can\'t convert \'";
	    str += yytext;
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable())
        {
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
        }
	return scan_throw(ID);
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{

  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
	std::string str = "Can\'t convert \'";
	str += yytext;
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer.clear();
      str_opener_column = yylloc.first_column;
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
        scan_step();
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 82:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      unput(yytext[yyleng - 1]);
      --yylloc.last_column;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM
          || last_token == BOOLTRUE
          || last_token == BOOLFALSE
          || last_token == STR)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      unput('\'');
      yylloc.last_column--;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 90:
case 91:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 92:
case 93:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, b] and plus here is unary
    // the space is non coding:
    // * after any other binary operator __op__
    //   Example : [a __op__ +b]
    // * after brackets or parentheses delimiters
    //   Example : [(1*2*a) +3]
    // * at the beginning of a line
    //   Example : [3 ...
    //              _+2]

    // no need to unput the '+'
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
   else
   {
       unput('+');
       yylloc.last_column--;
   }
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale

    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 97:
YY_RULE_SETUP
{
             // This rule is made to take into account a +... without spaces after plus
             // if one simply ignores the next a situation like this could arise
             // Example
             // =======
             // A = [1 +...
             // 2] 
             //
             // what is meant by the user [1 +2] ? or [1 + 2]
             // simply ignoring the ... would yield the 1st situation [1, 2]
             // We consider this is NOT proper and instead that the user meant a binary plus
             // split is two lines
             // The same rationale applies to minus.

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = PLUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(PLUS);
         }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
             // see {spaces}*{minus}{next} for the rationale

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = MINUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(MINUS);
         }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = TRUE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
      paren_levels.pop();
  }
	YY_BREAK

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
        // This is important to restore coding spaces as if ... was not present
        unput(' ');
        linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
        {
	    pstBuffer.clear();
	    std::string str = "Can\'t convert \'";
	    str += pstBuffer.c_str();
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.comment = new std::wstring(pwstBuffer);
        pstBuffer.clear();
        FREE (pwstBuffer);
//        return scan_throw(COMMENT);
    }
    else
    {
	pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
	str += pstBuffer.c_str();
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
//    return scan_throw(COMMENT);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 108:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 111:
case 112:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 113:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 120:
case 121:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 122:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 129:
case 130:
YY_RULE_SETUP
{
   //scan_step();
   pstBuffer += yytext;
  }
	YY_BREAK

case 131:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            //return ID;
        }
    }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 141:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 749 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 749 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 748);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
    std::string str;
    switch(token)
    {
        case AND :                   str = "AND";
                                     break;
        case ASSIGN :                str = "ASSIGN";
                                     break;
        case BOOLFALSE :             str = "BOOLFALSE";
                                     break;
        case BOOLTRUE :              str = "BOOLTRUE";
                                     break;
        case BREAK :                 str = "BREAK";
                                     break;
        case CASE :                  str = "CASE";
                                     break;
        case CATCH :                 str = "CATCH";
                                     break;
        case COLON :                 str = "COLON";
                                     break;
        case COMMA :                 str = "COMMA";
                                     break;
        case COMMENT :               str = "COMMENT";
                                     break;
        case CONTINUE :              str = "CONTINUE";
                                     break;
        case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE";
                                     break;
        case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE";
                                     break;
        case CONTROLTIMES :          str = "CONTROLTIMES";
                                     break;
        case DO :                    str = "DO";
                                     break;
        case DOLLAR :                str = "DOLLAR";
                                     break;
        case DOT :                   str = "DOT";
                                     break;
        case DOTLDIVIDE :            str = "DOTLDIVIDE";
                                     break;
        case DOTPOWER :              str = "DOTPOWER";
                                     break;
        case DOTQUOTE :              str = "DOTQUOTE";
                                     break;
        case DOTRDIVIDE :            str = "DOTRDIVIDE";
                                     break;
        case DOTS :                  str = "DOTS";
                                     break;
        case DOTTIMES :              str = "DOTTIMES";
                                     break;
        case ELSE :                  str = "ELSE";
                                     break;
        case ELSEIF :                str = "ELSEIF";
                                     break;
        case END :                   str = "END";
                                     break;
        case ENDFUNCTION :           str = "ENDFUNCTION";
                                     break;
        case EOL :                   str = "EOL";
                                     break;
        case EQ :                    str = "EQ";
                                     break;
        case FLEX_ERROR :            str = "FLEX_ERROR";
                                     break;
        case FOR :                   str = "FOR";
                                     break;
        case FUNCTION :              str = "FUNCTION";
                                     break;
        case GE :                    str = "GE";
                                     break;
        case GT :                    str = "GT";
                                     break;
        case ID :                    str = "ID";
                                     break;
        case IF :                    str = "IF";
                                     break;
        case KRONLDIVIDE :           str = "KRONLDIVIDE";
                                     break;
        case KRONRDIVIDE :           str = "KRONRDIVIDE";
                                     break;
        case KRONTIMES :             str = "KRONTIMES";
                                     break;
        case LBRACE :                str = "LBRACE";
                                     break;
        case LBRACK :                str = "LBRACK";
                                     break;
        case LDIVIDE :               str = "LDIVIDE";
                                     break;
        case LE :                    str = "LE";
                                     break;
        case LPAREN :                str = "LPAREN";
                                     break;
        case LT :                    str = "LT";
                                     break;
        case MINUS :                 str = "MINUS";
                                     break;
        case NE :                    str = "NE";
                                     break;
        case NOT :                   str = "NOT";
                                     break;
        case NUM :                   str = "NUM";
                                     break;
        case OR :                    str = "OR";
                                     break;
        case OROR :                  str = "OROR";
                                     break;
        case PLUS :                  str = "PLUS";
                                     break;
        case POWER :                 str = "POWER";
                                     break;
        case QUOTE :                 str = "QUOTE";
                                     break;
        case RBRACE :                str = "RBRACE";
                                     break;
        case RBRACK :                str = "RBRACK";
                                     break;
        case RDIVIDE :               str = "RDIVIDE";
                                     break;
        case RETURN :                str = "RETURN";
                                     break;
        case RPAREN :                str = "RPAREN";
                                     break;
        case SELECT :                str = "SELECT";
                                     break;
        case SEMI :                  str = "SEMI";
                                     break;
        case SPACES :                str = "SPACES";
                                     break;
        case STR :                   str = "STR";
                                     break;
        case THEN :                  str = "THEN";
                                     break;
        case TIMES :                 str = "TIMES";
                                     break;
        case TRY :                   str = "TRY";
                                     break;
        case VARFLOAT :              str = "VARFLOAT";
                                     break;
        case VARINT :                str = "VARINT";
                                     break;
        case WHILE :                 str = "WHILE";
                                     break;
        default :                    str = "UNKNOWN";
                                     break;
    }
    return str;

}
#endif


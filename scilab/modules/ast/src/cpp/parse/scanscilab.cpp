
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[887] =
    {   0,
    16405,  121,  121,  130,  130,  112,  112,  108,  108,  143,
       82,  142,   78,   82,  142,   79,  142,   79,   82,  142,
       72,   82,  142,   76,   82,  142,   24,   82,  142,   72,
       82,  142,   27,   82,  142,   77,   82,  142,   31,   82,
      142,   32,   82,  142,   45,   82,  142,   44,   82,  142,
       34,   82,  142,   43,   82,  142,   64,   82,  142,   46,
       82,  142,   66,   82,  142,   35,   82,  142,   33,   82,
      142,   57,   82,  142,   61,   82,  142,   58,   82,  142,
       62,   82,  142,   47,   82,  142,   63,   82,  142,   48,
       82,  142,   72,   82,  142,   72,   82,  142,   72,   82,

      142,   72,   82,  142,   72,   82,  142,   72,   82,  142,
       72,   82,  142,   72,   82,  142,   72,   82,  142,   72,
       82,  142,   36,   82,  142,   29,   82,  142,   37,   82,
      142,   23,   82,  142,   82,  142,   82,  142,   82,  142,
       82,  142,   82,  142,   82,  142,   82,  142,   82,  142,
       82,  142,   78,   82,  142,16405,   72,   82,  142,   24,
       82,  142,   72,   82,  142,   72,   82,  142,   72,   82,
      142,   72,   82,  142,   72,   82,  142,   72,   82,  142,
       72,   82,  142,   72,   82,  142,   72,   82,  142,   72,
       82,  142,   72,   82,  142,   82,  142,   82,  142,   82,

      142,   82,  142,   82,  142,   82,  142,   82,  142,   82,
      142,   82,  142,  121,  122,  142,  120,  142,  120,  122,
      142,  119,  122,  142,  118,  122,  142,  122,  142,  130,
      131,  142,  129,  142,  129,  131,  142,  127,  131,  142,
      128,  131,  142,  131,  142,  112,  113,  142,  111,  142,
      111,  113,  142,  113,  142,  113,  142,  108,  142,  107,
      142,  107,  142,  106,  142,  105,  106,  142,  102,  142,
      102,  106,  142,  106,  142,   97,  142,   78,   97,  142,
       87,  142,   87,   97,  142,   72,   97,  142,   76,   97,
      142,   24,   97,  142,   72,   97,  142,   27,   97,  142,

       77,   97,  142,   83,   97,  142,   84,   97,  142,   45,
       97,  142,   91,   97,  142,   34,   97,  142,   93,   97,
      142,   64,   97,  142,   46,   97,  142,   66,   97,  142,
       35,   86,   97,  142,   33,   97,  142,   57,   97,  142,
       61,   97,  142,   58,   97,  142,   62,   97,  142,   47,
       97,  142,   89,   97,  142,   48,   97,  142,   36,   97,
      142,   29,   97,  142,   90,   97,  142,   23,   97,  142,
       97,  142,   97,  142,   97,  142,   97,  142,   97,  142,
       97,  142,   97,  142,   97,  142,  141,  142,  132,  142,
      135,  142,  135,  142,   76,  142,   77,  142,  137,  141,

      142,  134,  142,  141,  142,  133,  142,  138,  141,  142,
      136,  141,  142,  139,  141,  142,  140,  141,  142,  142,
       22,  142,  142,   22,  142,  142,   22,  142,   22,  142,
       22,  142,   22,  142,   22,  142,   22,  142,   22,  142,
       22,  142,   22,  142,   22,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   78,   80,   80,   79,   72,   72,
        3,   26,   72,    2,   25,   72,   28,   48,   38,   39,
       65,   40,   71,   41,   42,   74,   75,   73,   70,   73,
       66,   73,   73,   59,   56,   55,   60,   72,   72,   72,
       15,   72,   72,   72,   72,   72,    4,   72,   72,   72,

       72,   72,   72,   30,   72,   78,16405,   72,   72,    3,
       26,   72,    2,   25,   72,   72,   72,   72,   15,   72,
       72,   72,   72,   72,    4,   72,   72,   72,   72,   72,
       72,   72,  121,  120,  114,  115,  116,  117,  130,  129,
      123,  124,  125,  126,  112,  111,  109,  110,  108,  107,
      105,  102,  103,  104,   78,   88,   85,   95,   96,   86,
       87,   26,   72,   25,   72,  100,   86,  141,  132,  135,
       74,  141,   75,  141,   22,   22,    3,   22,    2,   22,
       22,   22,   22,   15,   22,   22,   22,   22,   22,    4,
       22,   22,   22,   22,   22,   22,   22,   81,   81,   52,

       49,   50,   51,   53,   73,   73,   69,   73,   70,   67,
       73,   68,   73,   54,   72,   72,   72,   72,   72,    8,
       72,   13,   72,   72,   72,   72,   72,   18,   72,   72,
        1,   72, 8213, 8213,   72,   72,   72,   72,   72,    8,
       72,   13,   72,   72,   72,   72,   72,   18,   72,   72,
        1,   72,   92,   94,  101,   98,   99,   22,   22,   22,
       22,   22,    8,   22,   13,   22,   22,   22,   22,   22,
       18,   22,   22,   67,   68,   73,   73,   72,   10,   72,
       72,   72,    6,   72,   72,   72,   72,   72,    5,   72,
       72,    1,    1,   72,    1,    1,    1,    1,    1,    1,

        1,    1,   72, 8213,   72,   10,   72,   72,   72,    6,
       72,   72,   72,   72,   72,    5,   72,   72,    1,    1,
       72,    1,    1,    1,    1,    1,    1,    1,    1,   72,
       22,   10,   22,   22,   22,    6,   22,   22,   22,   22,
       22,    5,   22,   22,   22,   72,   72,   73,   73,   16,
       72,   19,   72,   72,   72,   72,   72,   72,   72,   14,
       72,    1,    1,    1,    1,    1,    1,    1,   72,   72,
       16,   72,   19,   72,   72,   72,   72,   72,   72,   72,
       14,   72,    1, 8213,    1, 8213,    1,    1,    1,    1,
        1,    1,    1,   22,   22,   16,   22,   19,   22,   22,

       22,   22,   22,   22,   22,   14,   22,   73,   73,   72,
        7,   72,   72,   72,   20,   72,    9,   72,    1,    1,
        1,   72,    7,   72,   72,   72,   20,   72,    9,   72,
        1, 8213,    1,    1,    1,   22,    7,   22,   22,   22,
       20,   22,    9,   22,   73,   72,   72,   72,    1,   72,
       72,   72,   72,    1,   72,   22,   22,   22,   73,   17,
       72,   72,   11,   72,   17,   72,   72,   11,   72,   17,
       22,   22,   11,   22,   72,   72,   22,   72,   72,   22,
       12,   72,   12,   72,   12,   22
    } ;

static yyconst flex_int16_t yy_accept[857] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  157,  160,  163,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  198,  200,  202,  204,  206,
      208,  210,  212,  214,  217,  219,  222,  225,  228,  230,

      233,  235,  238,  241,  244,  246,  249,  251,  254,  256,
      258,  260,  262,  264,  266,  269,  271,  274,  276,  278,
      281,  283,  286,  289,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  335,  338,
      341,  344,  347,  350,  353,  356,  359,  362,  365,  368,
      371,  373,  375,  377,  379,  381,  383,  385,  387,  389,
      391,  393,  395,  397,  399,  402,  404,  406,  408,  411,
      414,  417,  420,  421,  423,  424,  426,  427,  429,  431,
      433,  435,  437,  439,  441,  443,  445,  447,  448,  449,
      450,  451,  452,  453,  454,  455,  456,  457,  458,  458,

      458,  459,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      464,  467,  468,  469,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  477,  478,  479,  479,  481,  482,  483,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      486,  487,  488,  488,  489,  490,  491,  493,  494,  495,
      496,  497,  499,  500,  501,  502,  503,  504,  505,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  513,  516,
      517,  518,  519,  521,  522,  523,  524,  525,  527,  528,
      529,  530,  531,  532,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  560,
      560,  561,  562,  564,  566,  566,  566,  567,  568,  569,
      570,  571,  573,  575,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  579,  581,  582,  583,  584,  586,  587,  588,

      589,  590,  592,  593,  594,  595,  596,  597,  598,  598,
      598,  598,  598,  598,  598,  598,  599,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  601,  602,  603,  603,  603,  604,  605,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  608,  609,  610,
      610,  612,  612,  614,  614,  614,  614,  614,  614,  614,
      614,  615,  616,  617,  618,  619,  620,  622,  624,  625,
      626,  627,  628,  630,  631,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,

      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  634,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      636,  637,  638,  639,  640,  642,  644,  645,  646,  647,
      648,  650,  651,  653,  653,  653,  653,  654,  655,  656,
      657,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  659,  660,  661,  662,
      663,  665,  667,  668,  669,  670,  671,  673,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  675,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  677,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  679,  681,  682,
      683,  685,  686,  687,  688,  689,  691,  692,  693,  695,
      696,  697,  698,  699,  700,  701,  702,  703,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  705,  705,  705,  705,
      705,  705,  705,  706,  708,  709,  710,  712,  713,  714,
      715,  716,  718,  719,  720,  722,  723,  724,  725,  726,
      727,  728,  729,  730,  731,  731,  731,  731,  731,  731,
      731,  732,  734,  735,  736,  738,  739,  740,  741,  742,

      744,  745,  746,  747,  748,  748,  748,  748,  748,  748,
      748,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  750,  752,  754,
      755,  756,  757,  758,  759,  760,  762,  763,  764,  765,
      766,  767,  768,  769,  769,  769,  769,  769,  769,  769,
      769,  770,  771,  773,  775,  776,  777,  778,  779,  780,
      781,  783,  785,  787,  788,  789,  790,  791,  792,  793,
      794,  795,  796,  798,  800,  801,  802,  803,  804,  805,
      806,  808,  809,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  811,  813,  814,  815,  817,  819,

      820,  821,  822,  822,  822,  823,  825,  826,  827,  829,
      831,  833,  834,  835,  836,  837,  839,  840,  841,  843,
      845,  845,  845,  845,  846,  847,  848,  849,  851,  852,
      853,  854,  856,  857,  858,  859,  860,  862,  863,  865,
      867,  868,  870,  872,  873,  875,  876,  877,  878,  879,
      880,  881,  883,  885,  887,  887
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,    5,   40,   41,    5,   42,   43,    5,   44,
       45,    5,    5,   46,   47,   48,   49,    5,   50,    5,
       51,    5,   52,   53,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   59,   58,   58,   58,
       60,    1,    1,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   62,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   64,   65,   66,   67,
       68,   68,   68,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    3,    4,    5,    4,    6,    1,    5,
        7,    1,    8,    1,    9,    1,   10,    8,   11,    1,
        9,    7,    7,    7,    1,    4,    4,    4,    4,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[887] =
    {   0,
        0,   69,  136,  141,  146,  151,  156,  162,  167,  169,
      174,  179,  197,    0,  265,  319,  374,    0, 1215, 4489,
      182,  270,  275,  236, 4489,  245,  416, 1193, 4489, 4489,
     4489,  174, 4489, 4489, 4489,  314,  176,  481, 4489, 4489,
      172, 1174, 1172, 4489, 1170, 4489, 4489,  307,  320,  322,
      418,  420,  245,  463,  465,  512,  525, 4489, 1121, 4489,
     1145,  259,  298,  394,  225,  414,  477,  509,  518, 1106,
      577,  536,  524,  645,  567,  580,  582,  620,  622,  627,
      648,  650,  676,  652,  575,  304,  661,  238,  669,  674,
      678,  683, 1105,    0, 4489, 1156,  363,  450, 4489,    0,

     4489, 1152,  457,  489, 4489,    0, 4489, 1151, 1133, 1123,
        0, 4489, 1117, 4489, 1115, 4489, 1111,  130, 4489,  742,
      605,  680,  721, 4489,  709,  751, 1087, 4489, 4489, 4489,
      542, 1030, 4489, 1021,  774,  544,    0,  972, 4489,  315,
      906,  894, 4489,  887, 4489, 4489, 4489,  832, 4489,  857,
      707,  512,  738,  315,  744,  751,  756,  805,    0,  852,
     4489,  849, 4489, 4489,    0, 4489,  149, 4489,    0,    0,
        0,    0, 4489,  756,  765,  807,  599,  810,  814,  812,
      838,  850,  855,  862,  868,  880,  883,  876,  564,  881,
      419,  886,  890,  895,  788,  650, 4489,  834,  954,  957,

      900,  934,  908,  723,  927,  440,  932,  936,  941,  750,
        0,  946,  805,  951,  449,  956,  960,  965,  712,  998,
     1000, 4489, 4489,    0, 4489,  645,  744,  740, 1014,  734,
     4489, 4489,    0, 4489,  992, 1001, 1058,    0, 1078,  683,
     1022,  921, 1027,  526, 1042,  985, 1047,  667, 4489, 4489,
     4489, 4489,    0, 1080, 1082, 1087, 1084, 1109, 1121, 1124,
     1136, 1138, 1150, 1153, 1165, 1171, 1177, 4489, 1192, 1170,
     1176, 1185, 1190, 1195, 1200, 1205, 1210, 1269, 1221, 1230,
     1221,  972, 1244,  580, 1249, 1253, 1258,  647, 1070, 1300,
     1263,  976, 1284,  691, 1293, 1267, 1298,  638, 1343, 1303,

     1149, 1308,  698, 1313, 1317, 1322,  634, 1355, 1385, 1387,
     1389, 1401, 1393, 1414, 1418, 1430, 1435, 1442, 1456, 1458,
     1460, 1463, 1481, 1484, 1329, 1339, 1459, 1468, 1477, 1482,
     1487, 1492,    0, 4489, 4489, 4489, 4489, 4489,    0, 4489,
     4489, 4489, 4489, 4489,    0, 4489, 4489, 4489,    0, 4489,
      683, 4489, 4489, 4489, 1551, 4489, 4489,  162,  655,  652,
      663,  903, 1530, 1535,  643,  612,  601,  614,    0,  592,
     4489,    0,    0, 1547, 1531, 1179, 1540,  729, 1545, 1333,
     1550,  507, 1550, 1564, 1342, 1569,  732, 1574, 1522, 1579,
      500, 1612, 1614, 1616, 1618, 1630, 1642, 1644, 1647, 1659,

     1665, 1671, 1673, 1686, 1688, 1694, 1702, 1709, 1695, 1702,
     1707, 1712, 1717, 1722, 1727, 4489,  536, 1732, 1737, 1742,
     1747, 1752, 1757, 1762, 1767, 1772, 1777, 1782, 1787, 1792,
     1797, 4489, 4489, 4489,  831,  911, 4489, 4489, 1074, 1802,
     1392, 1807,  831, 1812, 1816, 1821,  458, 1821, 1835, 1534,
     1840,  836, 1845, 1849, 1854,  456, 4489, 4489,  171,  471,
     1908,  468, 1971, 1861, 1872, 1877, 1882, 1887, 1892, 1897,
     4489, 1952, 1954, 1967, 1969, 1981, 1983, 2013, 2015, 2017,
     2019, 2031, 2043, 2045, 2093, 1902, 1907, 1967, 2161, 2108,
     1590, 2113,  857, 2118, 2122, 2127,  402, 2186, 2133, 1864,

     2138,  914, 2143, 2147, 2152,  310, 2157, 2175, 2180, 2185,
     2200, 2205, 2210, 4489, 2269, 2216, 2229, 2238, 2243, 2248,
     2253, 2258, 2263, 2268, 2273, 2278, 2283, 2288, 2293, 2326,
     2048, 2328, 2330, 2333, 2351, 2354, 2356, 2358, 2372, 2380,
     2384, 2386, 2434, 2448, 2453, 2458,  358,  350,  327,  311,
      309, 2463, 2468, 2473, 2478, 2483, 2488, 2493, 2498, 2503,
     2508, 2513, 2518, 2523, 2528, 2561, 2563, 2568, 2584, 2586,
     2589, 2591, 2607, 2612, 2619, 2624, 2636, 2642, 2620, 2635,
     2640, 2645, 2650, 2655, 2660, 2665, 2670, 2714, 2717, 2689,
     2700, 2705, 2710, 2715, 2720, 2725, 2730, 2735, 2740, 2745,

     2750, 2755, 2760, 1108, 2760, 2774, 2160, 2779,  920, 2784,
     2629, 2789,  236, 2794, 2799, 2804, 2837, 2839, 2841, 2843,
     2864, 2867, 2869, 2872, 2885, 2897, 2899, 2943,    0, 2883,
     2219, 2895,  993, 2900, 2872, 2907,  223, 2974, 2939, 2958,
     2967, 2972, 2977, 2982, 2987, 2992, 2997, 3002, 3007, 3012,
     3017, 3022, 3027, 3032, 3037, 3096, 3043, 3056, 3065, 3070,
     3075, 3080, 3113, 3115, 3117, 3119, 3140, 3143, 3145, 3148,
     3161, 3173, 3175, 3204,    0, 3174, 2223, 3179, 1017, 3184,
     2916, 3189,  214, 3222, 3196, 3206, 3215, 3220, 3225, 3230,
     3263, 3265, 3267, 3269, 3290, 3293, 3295, 3298, 3311, 3323,

     3325, 3327, 3329, 3317, 3331, 3336, 3341, 3346, 3351, 3356,
     3356, 3370, 2358, 3375, 1077, 3380, 3384, 3389,   85, 3394,
     3399, 3404, 3409, 3414, 3419, 3424, 1157, 3457, 3459, 3462,
     3464, 3480, 3486, 3492, 3494, 3509, 3487, 3493, 3502, 3507,
     3512, 3517, 3522, 3527, 3532, 3537, 3542, 3547, 3552,    0,
     3585, 3554, 3597, 3599, 3602, 3614, 3620, 3626, 3632, 3644,
     3649,    0, 1188, 3642, 3647, 3652, 3657, 3662, 3667, 3672,
     3705,    0, 3707, 3709, 3712, 3730, 3733, 3735, 3751, 3757,
     3759, 1169,    0, 3744, 3752, 3757, 3762, 3767, 3772, 3777,
     3782, 3787, 3792, 3825, 3827, 3829, 3831, 3833, 3854, 3828,

     3838, 3847,    0,    0, 3861, 3883, 3885, 3887, 3889, 3891,
     1470, 3884, 3889, 3894, 3927, 3929, 3931, 3933, 3935, 3956,
     3930, 3940, 3949, 1198, 3963, 3984, 3986,    0, 3988, 3990,
     4011,    0, 4013, 4015, 4018,    0, 4036, 4039, 4042, 4044,
     4057, 4060, 4065, 4073, 4078, 4090, 4094, 4102, 4115, 4117,
     4123, 4129, 4141, 4144, 4489, 4192, 4203, 4214, 4225, 4236,
     4247, 4255, 4263, 4273, 4278, 4286, 4297, 4308, 4319, 4330,
     4341, 4349, 4357, 4368, 4378, 4385, 4393, 4404, 4413, 4421,
     4432, 4440, 4448, 4459, 4467, 4477
    } ;

static yyconst flex_int16_t yy_def[887] =
    {   0,
      855,  855,  856,  856,  857,  857,  858,  858,  859,  859,
      860,  860,  855,   13,  861,  861,  855,   17,  855,  855,
      855,  855,  855,  862,  855,  863,  862,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      864,  865,  866,  865,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  867,  855,  855,  855,  855,  855,  868,

      855,  855,  855,  855,  855,  869,  855,  855,  855,  855,
      870,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,   27,  855,  863,   27,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,   38,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  871,  855,
      855,  855,  855,  855,  871,  855,  871,  855,  871,  871,
      871,  871,  855,  872,  873,  872,  855,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,   27,  855,  855,  855,  855,  855,  855,  855,  855,
      125,  855,  855,  855,  855,  855,  855,  855,  855,   27,
       27,  855,  855,  874,  855,  855,  855,  855,  855,  855,
      855,  855,  875,  855,  876,  877,   38,   38,  876,  239,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  878,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  855,   27,  855,
      855,  855,  855,  855,  855,  855,  855,  864,  879,  880,
      855,  855,  855,  855,  855,  855,  855,  855,  881,   74,
      855,  855,  855,  855,  855,  855,  855,  855,  866,  855,

      855,  855,  855,  855,  855,  855,  855,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  855,  855,  855,  855,  855,  855,
      855,  855,  867,  855,  855,  855,  855,  855,  868,  855,
      855,  855,  855,  855,  869,  855,  855,  855,  870,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,   27,   27,  855,  855,  855,  855,  871,  855,
      855,  871,  871,  176,  855,  855,  855,  855,  855,  855,
      855,  855,  873,  855,  855,  855,  855,  855,  855,  855,
      855,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  239,  855,
      855,  855,  855,  855,  855,  855,  855,  877,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,   38,  855,
      882,  855,  882,  855,  855,  855,  855,  855,  855,  855,
      855,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  855,  855,  855,  855,  879,  855,
      855,  855,  855,  855,  855,  855,  855,  880,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  881,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  855,  855,
      855,  855,  855,  855,  855,  855,  855,   38,   38,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  239,  883,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  485,  485,  628,
      628,  628,  628,  628,  628,  628,  628,   27,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  881,  855,  855,  855,  855,
      855,  855,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,  884,  543,  628,  628,  628,  628,  628,
      628,  628,  628,   74,  855,  855,  855,  855,  855,  855,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,   27,  885,  855,  855,  855,  855,  855,  855,
      883,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  239,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  628,  628,  628,  628,
      628,  628,  628,  855,  855,  855,  855,  855,  855,  489,
       74,  886,   74,   74,   74,   74,   74,   74,   74,   74,
       74,  628,  884,  628,  628,  628,  628,  628,  628,  628,
      176,  383,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  239,  448,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,   27,   27,   27,   27,   27,   27,  628,

      628,  628,  489,  498,   74,   74,   74,   74,   74,   74,
      884,  628,  628,  628,  176,  176,  176,  176,  176,  176,
      855,  855,  855,  239,   27,   27,   27,  485,   74,   74,
       74,  543,  176,  176,  176,  711,   27,   27,   27,   74,
       74,   74,  176,  176,  176,   27,   74,  176,   27,   74,
      176,   27,   74,  176,    0,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855
    } ;

static yyconst flex_int16_t yy_nxt[4559] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   20,   24,   24,   24,   24,   44,
       45,   46,   47,   24,   48,   49,   50,   51,   52,   24,
       53,   24,   24,   24,   24,   54,   55,   56,   24,   57,
       24,   58,   59,   60,   61,   20,   20,   20,   20,   20,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   20,
       71,   22,   23,   72,   25,   73,   74,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   20,   72,   72,   72,   72,   44,   45,

       46,   47,   72,   75,   76,   77,   78,   79,   72,   80,
       72,   72,   72,   72,   81,   82,   83,   72,   84,   72,
       58,   59,   60,   61,   20,   20,   20,   20,   20,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   95,   96,
      790,   97,  353,   95,   96,   98,   97,  354,  101,  102,
       98,  103,   99,  101,  102,  104,  103,   99,  107,  108,
      104,  372,  105,  547,  107,  108,  373,  105,  109,  112,
      113,  112,  113,  110,  109,  115,  116,  117,  365,  110,
      115,  116,  117,  196,  197,  198,  223,  458,  232,  459,
      224,  118,  233,  234,  249,  250,  118,  119,  120,  121,

      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  119,  123,  123,  123,  123,  143,  144,  145,  146,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  147,  148,
      149,  150,  119,  119,  119,  119,  119,  151,  152,  153,
      154,  155,  155,  156,  157,  158,  160,  161,  162,  770,
      163,  199,  202,  202,  164,  165,  199,  201,  743,  166,
      272,  272,  167,  262,  200,  168,  169,  170,  171,  200,
      200,  726,  202,  327,  327,  200,  203,  204,  205,  206,

      207,  207,  208,  209,  210,  212,  213,  214,  215,  216,
      216,  217,  218,  219,  269,  269,  269,  269,  269,  172,
      160,  161,  162,  225,  163,  551,  226,  550,  164,  165,
      227,  228,  229,  166,  202,  202,  167,  249,  250,  168,
      169,  170,  171,  549,  230,  202,  231,  202,  202,  202,
      202,  548,  254,  255,  202,  270,  270,  270,  202,  547,
      202,  325,  325,  325,  256,  652,  257,  202,  335,  202,
      272,  272,  336,  172,  173,  173,  173,  173,  174,  173,
      175,  176,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  177,  173,  173,  173,  173,  173,  173,  173,  174,

      174,  174,  174,  173,  173,  173,  173,  174,  178,  179,
      180,  181,  182,  174,  183,  174,  174,  174,  174,  184,
      185,  186,  174,  187,  174,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  188,  189,  190,  191,  192,  192,
      193,  194,  195,  220,  221,  202,  202,  202,  202,  271,
      271,  271,  271,  271,  220,  337,  202,  645,  202,  338,
      258,  259,  341,  221,  260,  202,  342,  202,  261,  273,
      273,  273,  273,  273,  411,  411,  203,  204,  205,  206,
      207,  207,  208,  209,  210,  235,  589,  236,  235,  588,
      202,  202,  202,  202,  343,  420,  420,  237,  344,  238,

      263,  202,  264,  202,  427,  427,  239,  240,  235,  235,
      202,  603,  202,  596,  235,  235,  235,  239,  240,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  273,  273,  273,  274,  273,  289,  416,  202,
      202,  241,  242,  243,  244,  245,  245,  246,  247,  248,
      202,  265,  202,  202,  223,  565,  232,  266,  224,  202,
      233,  234,  558,  202,  267,  275,  275,  275,  275,  270,
      270,  270,  202,  276,  276,  276,  276,  276,  278,  197,
      198,  466,  466,  280,  300,  301,  302,  303,  304,  304,
      305,  306,  307,  370,  290,  290,  291,  292,  293,  294,

      295,  295,  296,  297,  298,  290,  199,  290,  290,  290,
      290,  232,  310,  311,  290,  368,  234,  367,  290,  200,
      290,  409,  409,  409,  312,  200,  313,  290,  551,  290,
      324,  324,  324,  324,  324,  509,  509,  281,  282,  283,
      284,  285,  285,  286,  287,  288,  289,  290,  290,  290,
      290,  196,  197,  198,  290,  290,  548,  231,  290,  550,
      290,  433,  314,  315,  368,  318,  316,  290,  549,  290,
      317,  366,  308,  309,  290,  290,  290,  290,  290,  290,
      290,  199,  362,  308,  351,  319,  290,  320,  290,  529,
      290,  323,  309,  522,  200,  290,  462,  290,  462,  290,

      200,  463,  513,  290,  290,  291,  292,  293,  294,  295,
      295,  296,  297,  298,  290,  321,  326,  326,  326,  326,
      326,  322,  470,  290,  328,  328,  328,  328,  328,  328,
      328,  328,  329,  328,  330,  330,  330,  330,  331,  331,
      331,  331,  331,  355,  197,  198,  518,  518,  202,  202,
      437,  356,  357,  525,  525,  358,  434,  359,  360,  202,
      227,  361,  269,  269,  269,  269,  269,  431,  202,  212,
      213,  214,  215,  216,  216,  217,  218,  219,  363,  364,
      418,  418,  418,  225,  554,  554,  226,  561,  561,  363,
      367,  228,  229,  271,  271,  271,  271,  271,  364,  273,

      273,  273,  273,  273,  230,  424,  231,  275,  275,  275,
      275,  276,  276,  276,  276,  276,  375,  376,  377,  378,
      379,  379,  380,  381,  382,  384,  385,  386,  387,  388,
      388,  389,  390,  391,  392,  393,  197,  374,  374,  374,
      374,  374,  374,  415,  460,  392,  460,  395,  374,  588,
      374,  371,  374,  370,  393,  394,  397,  374,  396,  374,
      277,  374,  425,  425,  425,  374,  374,  375,  376,  377,
      378,  379,  379,  380,  381,  382,  374,  374,  374,  250,
      398,  399,  374,  374,  268,  374,  592,  592,  374,  374,
      374,  599,  599,  402,  400,  374,  374,  374,  401,  403,

      374,  199,  374,  253,  199,  404,  374,  374,  374,  374,
      374,  374,  641,  641,  200,  374,  252,  200,  374,  405,
      200,  374,  407,  200,  462,  406,  462,  374,  251,  589,
      374,  408,  408,  408,  408,  408,  410,  410,  410,  410,
      410,  412,  412,  412,  412,  412,  413,  413,  413,  413,
      414,  414,  414,  414,  414,  199,  416,  417,  199,  416,
      417,  202,  202,  202,  202,  202,  202,  202,  200,  648,
      648,  200,  202,  368,  200,  722,  722,  200,  464,  464,
      464,  202,  419,  419,  419,  419,  419,  421,  421,  421,
      421,  421,  422,  422,  422,  422,  423,  423,  423,  423,

      423,  211,  211,  211,  211,  211,  426,  426,  426,  426,
      426,  428,  428,  428,  428,  428,  429,  429,  429,  429,
      430,  430,  430,  430,  430,  202,  202,  202,  202,  507,
      507,  507,  229,  516,  516,  516,  202,  366,  202,  435,
      436,  468,  468,  468,  468,  202,  365,  202,  739,  739,
      435,  436,  440,  441,  442,  443,  444,  444,  445,  446,
      447,  449,  450,  451,  452,  453,  453,  454,  455,  456,
      457,  289,  766,  766,  458,  457,  459,  235,  235,  235,
      235,  235,  465,  465,  465,  465,  465,  855,  457,  855,
      457,  460,  439,  460,  515,  222,  461,  467,  467,  467,

      467,  467,  469,  469,  469,  469,  469,  202,  202,  202,
      202,  202,  202,  352,  202,  202,  351,  472,  202,  350,
      202,  855,  202,  855,  515,  202,  439,  202,  473,  474,
      475,  202,  786,  786,  202,  348,  202,  202,  440,  441,
      442,  443,  444,  444,  445,  446,  447,  202,  202,  202,
      347,  202,  202,  346,  340,  476,  202,  477,  334,  202,
      332,  277,  202,  202,  202,  202,  202,  250,  202,  478,
      855,  202,  855,  268,  202,  439,  202,  202,  202,  479,
      202,  202,  855,  202,  855,  202,  253,  439,  202,  811,
      514,  202,  202,  202,  252,  481,  251,  480,  202,  202,

      202,  222,  482,  202,  202,  202,  523,  523,  523,  202,
      628,  855,  202,  855,  855,  202,  439,  484,  202,  202,
      202,  483,  289,  855,  202,  269,  269,  269,  269,  269,
      202,  269,  269,  269,  269,  269,  552,  552,  552,  202,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  485,  486,  486,  486,  486,  486,
      487,  487,  487,  487,  487,  488,  488,  488,  488,  488,
      278,  197,  198,  855,  855,  280,  279,  279,  279,  279,
      279,  490,  491,  492,  493,  494,  494,  495,  496,  497,
      499,  500,  501,  502,  503,  503,  504,  505,  506,  508,

      508,  508,  508,  508,  510,  510,  510,  510,  510,  511,
      511,  511,  511,  512,  512,  512,  512,  512,  290,  290,
      290,  290,  290,  520,  520,  520,  520,  290,  290,  281,
      282,  283,  284,  285,  285,  286,  287,  288,  290,  517,
      517,  517,  517,  517,  289,  855,  855,  290,  519,  519,
      519,  519,  519,  521,  521,  521,  521,  521,  299,  299,
      299,  299,  299,  524,  524,  524,  524,  524,  526,  526,
      526,  526,  526,  527,  527,  527,  527,  528,  528,  528,
      528,  528,  290,  290,  324,  324,  324,  324,  324,  556,
      556,  556,  556,  290,  324,  324,  324,  324,  324,  559,

      559,  559,  290,  300,  301,  302,  303,  304,  304,  305,
      306,  307,  290,  290,  290,  290,  290,  290,  855,  855,
      290,  290,  855,  290,  530,  290,  855,  290,  290,  290,
      855,  290,  290,  855,  290,  531,  532,  855,  855,  290,
      290,  290,  290,  855,  533,  290,  290,  855,  290,  590,
      590,  590,  290,  855,  535,  855,  290,  290,  290,  855,
      534,  290,  290,  290,  855,  290,  855,  855,  290,  290,
      290,  811,  514,  290,  855,  536,  855,  290,  537,  855,
      290,  855,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  628,  855,  290,  855,  290,  540,  290,  855,

      539,  290,  855,  538,  855,  290,  855,  290,  290,  290,
      290,  290,  290,  541,  324,  324,  324,  324,  324,  290,
      855,  542,  290,  324,  324,  324,  324,  324,  290,  855,
      855,  290,  324,  324,  324,  324,  543,  544,  544,  544,
      544,  544,  545,  545,  545,  545,  545,  546,  546,  546,
      546,  546,  355,  197,  198,  855,  855,  202,  202,  855,
      356,  357,  202,  202,  358,  855,  359,  360,  202,  855,
      361,  855,  855,  202,  374,  374,  855,  202,  563,  563,
      563,  563,  202,  855,  855,  374,  374,  374,  374,  374,
      374,  597,  597,  597,  374,  553,  553,  553,  553,  553,

      555,  555,  555,  555,  555,  557,  557,  557,  557,  557,
      384,  385,  386,  387,  388,  388,  389,  390,  391,  383,
      383,  383,  383,  383,  560,  560,  560,  560,  560,  562,
      562,  562,  562,  562,  564,  564,  564,  564,  564,  374,
      374,  374,  374,  374,  374,  374,  374,  639,  639,  639,
      374,  855,  374,  566,  374,  855,  374,  374,  374,  374,
      855,  374,  855,  374,  567,  568,  855,  855,  374,  374,
      374,  374,  374,  569,  374,  374,  855,  374,  855,  855,
      374,  855,  374,  571,  855,  374,  374,  374,  855,  374,
      570,  374,  374,  374,  374,  855,  855,  374,  374,  374,

      374,  374,  855,  374,  572,  855,  374,  855,  573,  374,
      855,  374,  374,  374,  374,  374,  374,  855,  374,  855,
      574,  374,  374,  855,  374,  576,  374,  855,  575,  374,
      374,  855,  374,  374,  855,  374,  374,  374,  855,  855,
      374,  374,  578,  855,  577,  855,  855,  374,  855,  374,
      408,  408,  408,  408,  408,  855,  374,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  579,  579,  579,  579,  579,  580,  580,  580,
      580,  580,  581,  581,  581,  581,  581,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  582,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  584,  584,  584,
      584,  584,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  585,  585,  585,  585,  585,  586,  586,  586,
      586,  586,  587,  587,  587,  587,  587,  439,  439,  439,
      439,  439,  591,  591,  591,  591,  591,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  449,  450,  451,  452,  453,  453,  454,  455,  456,
      448,  448,  448,  448,  448,  598,  598,  598,  598,  598,

      600,  600,  600,  600,  600,  601,  601,  601,  601,  602,
      602,  602,  602,  602,  605,  235,  235,  235,  235,  235,
      235,  646,  646,  646,  458,  855,  461,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  614,  614,  614,  614,  614,  615,  615,  615,
      615,  615,  616,  616,  616,  616,  616,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  855,  606,  607,
      608,  609,  610,  610,  611,  612,  613,  605,  235,  202,
      202,  202,  202,  855,  855,  617,  855,  458,  855,  463,
      202,  618,  202,  855,  202,  202,  202,  202,  855,  202,

      855,  202,  619,  855,  855,  202,  855,  202,  202,  202,
      202,  202,  855,  855,  202,  855,  620,  855,  621,  202,
      855,  622,  638,  638,  638,  638,  638,  855,  202,  855,
      202,  606,  607,  608,  609,  610,  610,  611,  612,  613,
      202,  202,  202,  202,  202,  202,  202,  202,  855,  855,
      623,  202,  855,  202,  855,  202,  625,  202,  202,  202,
      202,  855,  202,  855,  202,  624,  202,  855,  855,  202,
      202,  202,  202,  202,  626,  290,  290,  855,  202,  855,
      855,  202,  855,  202,  855,  664,  290,  627,  855,  855,
      202,  855,  202,  628,  628,  290,  628,  629,  628,  629,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  629,  628,  628,  628,  628,  628,  628,  629,  629,
      629,  629,  628,  628,  628,  628,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  630,  631,  632,  633,  634,  634,  635,
      636,  637,  289,  489,  489,  489,  489,  489,  640,  640,
      640,  640,  640,  642,  642,  642,  642,  642,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  289,  498,  498,
      498,  498,  498,  647,  647,  647,  647,  647,  649,  649,

      649,  649,  649,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  279,  279,  279,  279,  279,  720,  720,  720,
      855,  490,  491,  492,  493,  494,  494,  495,  496,  497,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  855,  499,  500,  501,  502,
      503,  503,  504,  505,  506,  653,  653,  653,  653,  653,
      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      656,  290,  290,  290,  290,  290,  737,  737,  737,  514,
      764,  764,  764,  514,  290,  290,  290,  290,  290,  514,
      514,  855,  514,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  657,  657,  657,  657,  657,  658,  658,
      658,  658,  658,  659,  659,  659,  659,  659,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  662,  662,
      662,  662,  662,  290,  290,  290,  290,  290,  290,  663,
      290,  290,  855,  665,  290,  855,  290,  855,  290,  855,
      667,  290,  855,  290,  855,  290,  855,  666,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  855,  855,  668,
      855,  669,  290,  855,  290,  855,  290,  855,  290,  290,

      290,  290,  855,  290,  855,  290,  670,  290,  290,  671,
      290,  290,  290,  290,  290,  784,  784,  784,  290,  290,
      855,  855,  290,  672,  290,  855,  855,  290,  673,  855,
      855,  290,  855,  290,  628,  674,  855,  628,  675,  628,
      675,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  675,  628,  628,  628,  628,  628,  628,  675,
      675,  675,  675,  628,  628,  628,  628,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  676,  677,  678,  679,  680,  680,

      681,  682,  683,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  687,  687,
      687,  687,  687,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  374,  374,
      374,  374,  855,  855,  691,  374,  374,  855,  855,  374,

      692,  374,  855,  693,  855,  855,  374,  855,  374,  855,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      855,  855,  374,  695,  374,  855,  855,  696,  855,  374,
      855,  694,  855,  374,  374,  374,  374,  855,  374,  374,
      374,  855,  697,  855,  855,  374,  374,  374,  855,  855,
      374,  374,  374,  855,  374,  855,  699,  374,  855,  374,
      698,  855,  374,  374,  374,  855,  374,  700,  855,  374,
      374,  374,  855,  855,  374,  702,  702,  702,  702,  702,
      374,  855,  855,  374,  701,  724,  724,  724,  724,  374,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      458,  855,  588,  458,  855,  589,  855,  855,  855,  235,
      235,  855,  235,  235,  439,  439,  439,  439,  439,  855,
      235,  235,  855,  235,  235,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
      707,  707,  707,  707,  707,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  708,  708,  708,  708,  708,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      712,  713,  714,  715,  716,  716,  717,  718,  719,  604,
      604,  604,  604,  604,  721,  721,  721,  721,  721,  723,
      723,  723,  723,  723,  725,  725,  725,  725,  725,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  202,  202,  202,  202,  202,  202,
      202,  202,  855,  855,  855,  202,  855,  202,  728,  202,
      729,  202,  855,  730,  202,  855,  202,  855,  202,  855,
      202,  202,  202,  855,  202,  202,  202,  202,  855,  202,

      202,  855,  202,  855,  731,  202,  855,  202,  855,  855,
      202,  202,  202,  202,  202,  732,  733,  734,  855,  202,
      735,  855,  855,  202,  202,  202,  202,  202,  741,  741,
      741,  741,  202,  855,  855,  202,  736,  202,  629,  629,
      629,  629,  629,  855,  202,  855,  202,  628,  855,  628,
      738,  738,  738,  738,  738,  740,  740,  740,  740,  740,
      855,  628,  742,  742,  742,  742,  742,  855,  628,  628,
      628,  628,  768,  768,  768,  768,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  489,  489,  489,  489,  489,  855,

      855,  202,  202,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  202,  489,  489,  489,  489,  489,  855,  855,
      855,  202,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  744,  744,  744,  744,  744,  745,  745,  745,
      745,  745,  746,  746,  746,  746,  746,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  747,  747,  747,
      747,  747,  748,  748,  748,  748,  748,  749,  749,  749,
      749,  749,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  656,  751,  751,

      751,  751,  751,  855,  855,  855,  514,  855,  855,  855,
      514,  751,  751,  751,  751,  751,  514,  514,  855,  514,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      290,  290,  290,  290,  290,  290,  290,  290,  855,  855,
      855,  290,  855,  290,  753,  290,  754,  290,  855,  755,
      290,  855,  290,  855,  290,  855,  290,  290,  290,  855,
      290,  290,  290,  290,  855,  290,  290,  855,  290,  855,
      756,  290,  855,  290,  855,  855,  290,  290,  290,  290,
      290,  757,  758,  759,  855,  290,  760,  855,  855,  290,

      290,  290,  290,  290,  855,  674,  514,  855,  290,  855,
      855,  290,  761,  290,  628,  855,  855,  855,  628,  855,
      290,  855,  290,  855,  628,  628,  628,  628,  763,  675,
      675,  675,  675,  675,  765,  765,  765,  765,  765,  767,
      767,  767,  767,  767,  769,  769,  769,  769,  769,  290,
      290,  771,  771,  771,  771,  771,  855,  855,  763,  855,
      290,  771,  771,  771,  771,  771,  855,  855,  855,  290,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      374,  374,  374,  374,  374,  374,  374,  374,  855,  855,

      855,  374,  855,  374,  773,  374,  774,  374,  855,  775,
      374,  855,  374,  855,  374,  855,  374,  374,  374,  855,
      374,  374,  374,  374,  855,  374,  374,  855,  374,  855,
      776,  374,  855,  374,  855,  855,  374,  374,  374,  374,
      374,  777,  778,  779,  855,  374,  780,  855,  855,  374,
      374,  374,  374,  374,  374,  374,  202,  202,  374,  855,
      855,  374,  781,  374,  855,  374,  855,  202,  855,  855,
      374,  855,  374,  855,  374,  855,  202,  212,  213,  214,
      215,  216,  216,  217,  218,  219,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  712,  713,  714,  715,
      716,  716,  717,  718,  719,  711,  711,  711,  711,  711,
      785,  785,  785,  785,  785,  787,  787,  787,  787,  787,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  791,
      791,  791,  791,  791,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  793,  202,  202,  202,  202,  855,  202,
      202,  202,  202,  855,  855,  202,  855,  202,  855,  855,

      202,  855,  795,  855,  202,  794,  202,  202,  202,  202,
      855,  202,  855,  202,  202,  855,  855,  855,  202,  202,
      202,  202,  202,  796,  202,  855,  797,  202,  855,  855,
      202,  855,  202,  202,  855,  798,  202,  202,  855,  202,
      855,  799,  629,  629,  629,  629,  629,  202,  629,  629,
      629,  629,  629,  855,  855,  289,  202,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  800,  800,  800,
      800,  800,  801,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  290,  290,  300,  301,  302,  303,  304,  304,
      305,  306,  307,  290,  290,  290,  290,  290,  855,  290,
      290,  855,  290,  855,  855,  290,  855,  290,  855,  855,
      290,  290,  290,  855,  290,  805,  290,  290,  290,  290,
      855,  855,  806,  290,  290,  855,  855,  855,  290,  290,
      290,  290,  855,  807,  290,  855,  808,  290,  855,  855,
      290,  290,  290,  290,  855,  809,  290,  290,  855,  290,
      855,  855,  290,  855,  855,  855,  855,  290,  855,  855,
      855,  810,  855,  855,  855,  855,  290,  675,  675,  675,

      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  812,  812,  812,
      812,  812,  813,  813,  813,  813,  813,  814,  814,  814,
      814,  814,  374,  374,  374,  374,  374,  374,  855,  374,
      374,  855,  855,  374,  855,  374,  855,  374,  855,  855,
      374,  855,  374,  855,  374,  815,  374,  374,  374,  374,
      374,  374,  374,  374,  855,  855,  855,  855,  816,  855,
      855,  374,  855,  374,  855,  818,  817,  374,  374,  374,
      374,  855,  374,  855,  374,  374,  374,  374,  855,  374,
      855,  855,  855,  855,  819,  374,  855,  374,  374,  711,

      711,  711,  711,  711,  820,  855,  374,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  821,  821,  821,  821,  821,  822,  822,  822,
      822,  822,  823,  823,  823,  823,  823,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  855,  202,  826,  202,  855,  202,  855,  202,
      855,  202,  202,  825,  202,  827,  202,  855,  202,  855,
      202,  202,  202,  828,  828,  828,  828,  828,  290,  290,
      855,  855,  202,  828,  828,  828,  828,  828,  855,  290,

      855,  202,  828,  828,  828,  828,  828,  855,  290,  829,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      830,  290,  855,  290,  855,  290,  855,  290,  855,  290,
      290,  831,  290,  855,  290,  855,  290,  855,  290,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  855,  374,  834,  374,  855,  374,
      855,  374,  855,  374,  374,  833,  374,  835,  374,  855,
      374,  855,  374,  374,  374,  836,  836,  836,  836,  836,
      202,  202,  855,  855,  374,  836,  836,  836,  836,  836,

      837,  202,  855,  374,  836,  836,  836,  836,  836,  855,
      202,  202,  202,  202,  202,  290,  290,  290,  290,  855,
      855,  855,  202,  855,  202,  840,  290,  855,  290,  839,
      855,  838,  855,  202,  855,  290,  855,  841,  290,  290,
      374,  374,  374,  374,  855,  374,  374,  855,  855,  290,
      843,  374,  855,  374,  842,  855,  374,  855,  290,  855,
      374,  845,  844,  202,  202,  374,  202,  202,  855,  202,
      202,  290,  290,  855,  202,  855,  855,  202,  855,  846,
      202,  855,  290,  202,  290,  290,  202,  290,  290,  202,
      855,  290,  374,  374,  855,  290,  855,  847,  290,  855,

      374,  374,  855,  374,  290,  374,  374,  290,  855,  855,
      855,  374,  374,  848,  855,  855,  374,  202,  202,  855,
      374,  290,  290,  855,  855,  374,  855,  855,  202,  374,
      374,  855,  290,  855,  849,  855,  855,  202,  850,  855,
      374,  290,  202,  202,  290,  290,  851,  855,  855,  374,
      374,  374,  855,  202,  855,  290,  202,  202,  852,  855,
      853,  374,  202,  855,  290,  855,  854,  202,  290,  290,
      374,  374,  374,  855,  855,  855,  202,  855,  855,  290,
      855,  855,  374,  855,  855,  855,  855,  855,  290,  855,
      855,  374,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  202,  855,
      855,  855,  855,  855,  855,  202,  211,  855,  855,  855,
      855,  855,  855,  211,  279,  279,  279,  855,  279,  290,
      855,  290,  855,  855,  855,  855,  855,  855,  290,  299,
      855,  855,  855,  855,  855,  855,  299,  333,  333,  855,

      333,  855,  333,  333,  333,  333,  855,  333,  339,  339,
      855,  339,  855,  339,  339,  339,  339,  855,  339,  345,
      345,  855,  345,  345,  345,  345,  855,  345,  345,  345,
      349,  349,  855,  349,  349,  349,  349,  349,  349,  349,
      349,  369,  855,  855,  369,  855,  369,  369,  369,  855,
      369,  369,  374,  855,  855,  855,  855,  855,  855,  374,
      383,  855,  855,  855,  855,  855,  855,  383,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  439,  855,
      855,  855,  855,  855,  855,  439,  448,  855,  855,  855,

      855,  855,  855,  448,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  489,  855,  489,  855,  855,  855,
      855,  855,  855,  489,  498,  855,  855,  855,  855,  855,
      855,  498,  514,  514,  514,  514,  514,  514,  855,  514,
      855,  514,  514,  604,  855,  604,  855,  855,  855,  604,
      604,  711,  855,  855,  855,  855,  855,  855,  711,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      211,  855,  855,  855,  855,  855,  855,  211,  299,  855,
      299,  855,  855,  855,  855,  855,  855,  299,   19,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855
    } ;

static yyconst flex_int16_t yy_chk[4559] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
      719,    3,  118,    4,    4,    3,    4,  118,    5,    5,
        4,    5,    3,    6,    6,    5,    6,    4,    7,    7,
        6,  167,    5,  358,    8,    8,  167,    6,    7,    9,
        9,   10,   10,    7,    8,   11,   11,   11,  358,    8,
       12,   12,   12,   21,   21,   21,   32,  459,   37,  459,
       32,   11,   37,   37,   41,   41,   12,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   15,   15,  683,
       15,   22,   53,   53,   15,   15,   23,   23,  637,   15,
       65,   65,   15,   53,   22,   15,   15,   15,   15,   23,
       22,  613,   53,   88,   88,   23,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   62,   62,   62,   62,   62,   15,
       16,   16,   16,   36,   16,  551,   36,  550,   16,   16,
       36,   36,   36,   16,   48,   48,   16,  140,  140,   16,
       16,   16,   16,  549,   36,   48,   36,   49,   49,   50,
       50,  548,   48,   49,   48,   63,   63,   63,   49,  547,
       50,   86,   86,   86,   49,  506,   50,   49,   97,   50,
      154,  154,   97,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   27,   27,   51,   51,   52,   52,   64,
       64,   64,   64,   64,   27,   98,   51,  497,   52,   98,
       51,   51,  103,   27,   52,   51,  103,   52,   52,   66,
       66,   66,   66,   66,  191,  191,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   38,  462,   38,   38,  460,
       54,   54,   55,   55,  104,  206,  206,   38,  104,   38,

       54,   54,   55,   55,  215,  215,   38,   38,   38,   38,
       54,  456,   55,  447,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   67,   67,   67,   67,   67,   72,  417,   56,
       56,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       56,   56,   57,   57,  131,  391,  136,   56,  131,   56,
      136,  136,  382,   57,   57,   68,   68,   68,   68,  152,
      152,  152,   57,   69,   69,   69,   69,   69,   71,   71,
       71,  244,  244,   71,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  370,   75,   75,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   75,  121,   76,   76,   77,
       77,  177,   75,   76,   75,  368,  177,  367,   76,  121,
       77,  189,  189,  189,   76,  121,   77,   76,  366,   77,
       85,   85,   85,   85,   85,  284,  284,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   74,   78,   78,   79,
       79,  196,  196,  196,   80,   80,  359,  226,   78,  365,
       79,  226,   78,   78,  361,   80,   79,   78,  360,   79,
       79,  359,   74,   74,   80,   81,   81,   82,   82,   84,
       84,  122,  122,   74,  351,   81,   81,   82,   82,  307,
       84,   84,   74,  298,  122,   81,  240,   82,  240,   84,

      122,  240,  288,   83,   83,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   83,   83,   87,   87,   87,   87,
       87,   83,  248,   83,   89,   89,   89,   89,   89,   90,
       90,   90,   90,   90,   91,   91,   91,   91,   92,   92,
       92,   92,   92,  120,  120,  120,  294,  294,  123,  123,
      230,  120,  120,  303,  303,  120,  228,  120,  120,  123,
      227,  120,  151,  151,  151,  151,  151,  219,  123,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  126,  126,
      204,  204,  204,  135,  378,  378,  135,  387,  387,  126,
      135,  135,  135,  153,  153,  153,  153,  153,  126,  155,

      155,  155,  155,  155,  135,  210,  135,  156,  156,  156,
      156,  157,  157,  157,  157,  157,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  176,  176,  198,  178,  178,  180,
      180,  179,  179,  195,  435,  176,  435,  179,  178,  435,
      180,  162,  179,  160,  176,  178,  180,  178,  179,  180,
      158,  179,  213,  213,  213,  181,  181,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  181,  182,  182,  150,
      181,  181,  183,  183,  148,  181,  443,  443,  182,  184,
      184,  452,  452,  183,  182,  185,  185,  182,  182,  184,

      184,  201,  183,  144,  362,  185,  185,  186,  186,  184,
      187,  187,  493,  493,  201,  185,  142,  362,  186,  186,
      201,  187,  187,  362,  436,  186,  436,  186,  141,  436,
      187,  188,  188,  188,  188,  188,  190,  190,  190,  190,
      190,  192,  192,  192,  192,  192,  193,  193,  193,  193,
      194,  194,  194,  194,  194,  199,  199,  199,  200,  200,
      200,  202,  202,  203,  203,  203,  203,  203,  199,  502,
      502,  200,  202,  138,  199,  609,  609,  200,  242,  242,
      242,  202,  205,  205,  205,  205,  205,  207,  207,  207,
      207,  207,  208,  208,  208,  208,  209,  209,  209,  209,

      209,  212,  212,  212,  212,  212,  214,  214,  214,  214,
      214,  216,  216,  216,  216,  216,  217,  217,  217,  217,
      218,  218,  218,  218,  218,  220,  220,  221,  221,  282,
      282,  282,  229,  292,  292,  292,  220,  134,  221,  229,
      229,  246,  246,  246,  246,  220,  132,  221,  633,  633,
      229,  229,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      237,  289,  679,  679,  237,  237,  237,  241,  241,  241,
      241,  241,  243,  243,  243,  243,  243,  439,  237,  439,
      237,  239,  439,  239,  289,  127,  239,  245,  245,  245,

      245,  245,  247,  247,  247,  247,  247,  254,  254,  255,
      255,  257,  257,  117,  256,  256,  115,  254,  254,  113,
      255,  604,  257,  604,  289,  256,  604,  254,  255,  255,
      256,  257,  715,  715,  256,  110,  258,  258,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  258,  259,  259,
      109,  260,  260,  108,  102,  258,  258,  259,   96,  259,
       93,   70,  260,  261,  261,  262,  262,   61,  259,  260,
      727,  260,  727,   59,  261,  727,  262,  263,  263,  261,
      264,  264,  782,  261,  782,  262,   45,  782,  263,  763,
      763,  264,  265,  265,   43,  264,   42,  263,  266,  266,

      264,   28,  265,  265,  267,  267,  301,  301,  301,  266,
      763,  824,  265,  824,   19,  267,  824,  267,  266,  269,
      269,  266,  279,    0,  267,  270,  270,  270,  270,  270,
      269,  271,  271,  271,  271,  271,  376,  376,  376,  269,
      272,  272,  272,  272,  272,  273,  273,  273,  273,  273,
      274,  274,  274,  274,  274,  275,  275,  275,  275,  275,
      276,  276,  276,  276,  276,  277,  277,  277,  277,  277,
      278,  278,  278,    0,    0,  278,  281,  281,  281,  281,
      281,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  283,

      283,  283,  283,  283,  285,  285,  285,  285,  285,  286,
      286,  286,  286,  287,  287,  287,  287,  287,  291,  291,
      291,  291,  291,  296,  296,  296,  296,  290,  290,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  290,  293,
      293,  293,  293,  293,  299,    0,    0,  290,  295,  295,
      295,  295,  295,  297,  297,  297,  297,  297,  300,  300,
      300,  300,  300,  302,  302,  302,  302,  302,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  306,  306,  306,
      306,  306,  308,  308,  325,  325,  325,  325,  325,  380,
      380,  380,  380,  308,  326,  326,  326,  326,  326,  385,

      385,  385,  308,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  309,  309,  310,  310,  311,  311,    0,    0,
      313,  313,    0,  309,  310,  310,    0,  311,  312,  312,
        0,  313,  309,    0,  310,  311,  311,    0,    0,  312,
      313,  314,  314,    0,  312,  315,  315,    0,  312,  441,
      441,  441,  314,    0,  315,    0,  315,  316,  316,    0,
      314,  314,  317,  317,    0,  315,    0,    0,  316,  318,
      318,  811,  811,  317,    0,  316,    0,  316,  317,    0,
      318,    0,  317,  319,  319,  320,  320,  321,  321,  318,
      322,  322,  811,    0,  319,    0,  320,  321,  321,    0,

      320,  322,    0,  319,    0,  320,    0,  321,  323,  323,
      322,  324,  324,  322,  327,  327,  327,  327,  327,  323,
        0,  323,  324,  328,  328,  328,  328,  328,  323,    0,
        0,  324,  329,  329,  329,  329,  329,  330,  330,  330,
      330,  330,  331,  331,  331,  331,  331,  332,  332,  332,
      332,  332,  355,  355,  355,    0,    0,  363,  363,    0,
      355,  355,  364,  364,  355,    0,  355,  355,  363,    0,
      355,    0,    0,  364,  374,  374,    0,  363,  389,  389,
      389,  389,  364,    0,    0,  374,  375,  375,  375,  375,
      375,  450,  450,  450,  374,  377,  377,  377,  377,  377,

      379,  379,  379,  379,  379,  381,  381,  381,  381,  381,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  386,  386,  386,  386,  386,  388,
      388,  388,  388,  388,  390,  390,  390,  390,  390,  392,
      392,  393,  393,  394,  394,  395,  395,  491,  491,  491,
      392,    0,  393,  394,  394,    0,  395,  396,  396,  392,
        0,  393,    0,  394,  395,  395,    0,    0,  396,  397,
      397,  398,  398,  396,  399,  399,    0,  396,    0,    0,
      397,    0,  398,  399,    0,  399,  400,  400,    0,  397,
      398,  398,  401,  401,  399,    0,    0,  400,  402,  402,

      403,  403,    0,  401,  400,    0,  400,    0,  401,  402,
        0,  403,  401,  404,  404,  405,  405,    0,  402,    0,
      403,  406,  406,    0,  404,  405,  405,    0,  404,  407,
      407,    0,  406,  404,    0,  405,  408,  408,    0,    0,
      407,  406,  407,    0,  406,    0,    0,  408,    0,  407,
      409,  409,  409,  409,  409,    0,  408,  410,  410,  410,
      410,  410,  411,  411,  411,  411,  411,  412,  412,  412,
      412,  412,  413,  413,  413,  413,  413,  414,  414,  414,
      414,  414,  415,  415,  415,  415,  415,  418,  418,  418,
      418,  418,  419,  419,  419,  419,  419,  420,  420,  420,

      420,  420,  421,  421,  421,  421,  421,  422,  422,  422,
      422,  422,  423,  423,  423,  423,  423,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  425,  426,  426,  426,
      426,  426,  427,  427,  427,  427,  427,  428,  428,  428,
      428,  428,  429,  429,  429,  429,  429,  430,  430,  430,
      430,  430,  431,  431,  431,  431,  431,  440,  440,  440,
      440,  440,  442,  442,  442,  442,  442,  444,  444,  444,
      444,  444,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      449,  449,  449,  449,  449,  451,  451,  451,  451,  451,

      453,  453,  453,  453,  453,  454,  454,  454,  454,  455,
      455,  455,  455,  455,  461,  461,  464,  464,  464,  464,
      464,  500,  500,  500,  461,    0,  461,  465,  465,  465,
      465,  465,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  469,  469,  469,
      469,  469,  470,  470,  470,  470,  470,  486,  486,  486,
      486,  486,  487,  487,  487,  487,  487,    0,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  463,  463,  472,
      472,  473,  473,    0,    0,  472,    0,  463,    0,  463,
      472,  473,  473,    0,  474,  474,  475,  475,    0,  472,

        0,  473,  474,    0,    0,  474,    0,  475,  476,  476,
      477,  477,    0,    0,  474,    0,  475,    0,  476,  476,
        0,  477,  488,  488,  488,  488,  488,    0,  476,    0,
      477,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      478,  478,  479,  479,  480,  480,  481,  481,    0,    0,
      479,  478,    0,  479,    0,  480,  481,  481,  482,  482,
      478,    0,  479,    0,  480,  480,  481,    0,    0,  482,
      483,  483,  484,  484,  482,  531,  531,    0,  482,    0,
        0,  483,    0,  484,    0,  531,  531,  484,    0,    0,
      483,    0,  484,  485,  485,  531,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  489,  490,  490,  490,  490,  490,  492,  492,
      492,  492,  492,  494,  494,  494,  494,  494,  495,  495,
      495,  495,  496,  496,  496,  496,  496,  498,  499,  499,
      499,  499,  499,  501,  501,  501,  501,  501,  503,  503,

      503,  503,  503,  504,  504,  504,  504,  505,  505,  505,
      505,  505,  507,  507,  507,  507,  507,  607,  607,  607,
        0,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      508,  508,  508,  508,  508,  509,  509,  509,  509,  509,
      510,  510,  510,  510,  510,    0,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  511,  511,  511,  511,  511,
      512,  512,  512,  512,  512,  513,  513,  513,  513,  513,
      515,  516,  516,  516,  516,  516,  631,  631,  631,  515,
      677,  677,  677,  515,  517,  517,  517,  517,  517,  515,
      515,    0,  515,  518,  518,  518,  518,  518,  519,  519,

      519,  519,  519,  520,  520,  520,  520,  520,  521,  521,
      521,  521,  521,  522,  522,  522,  522,  522,  523,  523,
      523,  523,  523,  524,  524,  524,  524,  524,  525,  525,
      525,  525,  525,  526,  526,  526,  526,  526,  527,  527,
      527,  527,  527,  528,  528,  528,  528,  528,  529,  529,
      529,  529,  529,  530,  530,  532,  532,  533,  533,  530,
      534,  534,    0,  532,  530,    0,  532,    0,  533,    0,
      534,  534,    0,  530,    0,  532,    0,  533,  535,  535,
      534,  536,  536,  537,  537,  538,  538,    0,    0,  535,
        0,  537,  536,    0,  537,    0,  538,    0,  535,  539,

      539,  536,    0,  537,    0,  538,  538,  540,  540,  539,
      539,  541,  541,  542,  542,  713,  713,  713,  540,  539,
        0,    0,  541,  540,  542,    0,    0,  540,  542,    0,
        0,  541,    0,  542,  543,  543,    0,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  544,  544,  544,  544,  544,  545,  545,
      545,  545,  545,  546,  546,  546,  546,  546,  552,  552,
      552,  552,  552,  553,  553,  553,  553,  553,  554,  554,
      554,  554,  554,  555,  555,  555,  555,  555,  556,  556,
      556,  556,  556,  557,  557,  557,  557,  557,  558,  558,
      558,  558,  558,  559,  559,  559,  559,  559,  560,  560,
      560,  560,  560,  561,  561,  561,  561,  561,  562,  562,
      562,  562,  562,  563,  563,  563,  563,  563,  564,  564,
      564,  564,  564,  565,  565,  565,  565,  565,  566,  566,
      567,  567,    0,    0,  566,  568,  568,    0,    0,  566,

      567,  567,    0,  568,    0,    0,  568,    0,  566,    0,
      567,  569,  569,  570,  570,  568,  571,  571,  572,  572,
        0,    0,  569,  570,  570,    0,    0,  571,    0,  572,
        0,  569,    0,  570,  573,  573,  571,    0,  572,  574,
      574,    0,  573,    0,    0,  573,  575,  575,    0,    0,
      574,  576,  576,    0,  573,    0,  575,  575,    0,  574,
      574,    0,  576,  577,  577,    0,  575,  576,    0,  578,
      578,  576,    0,    0,  577,  579,  579,  579,  579,  579,
      578,    0,    0,  577,  578,  611,  611,  611,  611,  578,
      580,  580,  580,  580,  580,  581,  581,  581,  581,  581,

      582,  582,  582,  582,  582,  583,  583,  583,  583,  583,
      584,  584,  584,  584,  584,  585,  585,  585,  585,  585,
      586,  586,  586,  586,  586,  587,  587,  587,  587,  587,
      588,    0,  588,  589,    0,  589,    0,    0,    0,  588,
      588,    0,  589,  589,  590,  590,  590,  590,  590,    0,
      588,  588,    0,  589,  589,  591,  591,  591,  591,  591,
      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      594,  594,  594,  594,  594,  595,  595,  595,  595,  595,
      596,  596,  596,  596,  596,  597,  597,  597,  597,  597,
      598,  598,  598,  598,  598,  599,  599,  599,  599,  599,

      600,  600,  600,  600,  600,  601,  601,  601,  601,  601,
      602,  602,  602,  602,  602,  603,  603,  603,  603,  603,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  606,
      606,  606,  606,  606,  608,  608,  608,  608,  608,  610,
      610,  610,  610,  610,  612,  612,  612,  612,  612,  614,
      614,  614,  614,  614,  615,  615,  615,  615,  615,  616,
      616,  616,  616,  616,  617,  617,  618,  618,  619,  619,
      620,  620,    0,    0,    0,  617,    0,  618,  617,  619,
      619,  620,    0,  620,  617,    0,  618,    0,  619,    0,
      620,  621,  621,    0,  622,  622,  623,  623,    0,  624,

      624,    0,  621,    0,  621,  622,    0,  623,    0,    0,
      624,  621,  625,  625,  622,  622,  623,  624,    0,  624,
      625,    0,    0,  625,  626,  626,  627,  627,  635,  635,
      635,  635,  625,    0,    0,  626,  627,  627,  630,  630,
      630,  630,  630,    0,  626,    0,  627,  628,    0,  628,
      632,  632,  632,  632,  632,  634,  634,  634,  634,  634,
        0,  628,  636,  636,  636,  636,  636,    0,  628,  628,
      628,  628,  681,  681,  681,  681,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  639,  639,  639,  639,  639,    0,

        0,  638,  638,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  638,  640,  640,  640,  640,  640,    0,    0,
        0,  638,  641,  641,  641,  641,  641,  642,  642,  642,
      642,  642,  643,  643,  643,  643,  643,  644,  644,  644,
      644,  644,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  650,  650,  650,
      650,  650,  651,  651,  651,  651,  651,  652,  652,  652,
      652,  652,  653,  653,  653,  653,  653,  654,  654,  654,
      654,  654,  655,  655,  655,  655,  655,  656,  657,  657,

      657,  657,  657,    0,    0,    0,  656,    0,    0,    0,
      656,  658,  658,  658,  658,  658,  656,  656,    0,  656,
      659,  659,  659,  659,  659,  660,  660,  660,  660,  660,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      663,  663,  664,  664,  665,  665,  666,  666,    0,    0,
        0,  663,    0,  664,  663,  665,  665,  666,    0,  666,
      663,    0,  664,    0,  665,    0,  666,  667,  667,    0,
      668,  668,  669,  669,    0,  670,  670,    0,  667,    0,
      667,  668,    0,  669,    0,    0,  670,  667,  671,  671,
      668,  668,  669,  670,    0,  670,  671,    0,    0,  671,

      672,  672,  673,  673,    0,  674,  674,    0,  671,    0,
        0,  672,  673,  673,  674,    0,    0,    0,  674,    0,
      672,    0,  673,    0,  674,  674,  674,  674,  674,  676,
      676,  676,  676,  676,  678,  678,  678,  678,  678,  680,
      680,  680,  680,  680,  682,  682,  682,  682,  682,  684,
      684,  685,  685,  685,  685,  685,    0,    0,  674,    0,
      684,  686,  686,  686,  686,  686,    0,    0,    0,  684,
      687,  687,  687,  687,  687,  688,  688,  688,  688,  688,
      689,  689,  689,  689,  689,  690,  690,  690,  690,  690,
      691,  691,  692,  692,  693,  693,  694,  694,    0,    0,

        0,  691,    0,  692,  691,  693,  693,  694,    0,  694,
      691,    0,  692,    0,  693,    0,  694,  695,  695,    0,
      696,  696,  697,  697,    0,  698,  698,    0,  695,    0,
      695,  696,    0,  697,    0,    0,  698,  695,  699,  699,
      696,  696,  697,  698,    0,  698,  699,    0,    0,  699,
      700,  700,  701,  701,  702,  702,  703,  703,  699,    0,
        0,  700,  701,  701,    0,  702,    0,  703,    0,    0,
      700,    0,  701,    0,  702,    0,  703,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  705,  705,  705,  705,
      705,  706,  706,  706,  706,  706,  707,  707,  707,  707,

      707,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      714,  714,  714,  714,  714,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  718,  718,  718,  718,  718,  720,
      720,  720,  720,  720,  721,  721,  721,  721,  721,  722,
      722,  722,  722,  722,  723,  723,  723,  723,  723,  724,
      724,  724,  724,  724,  725,  725,  725,  725,  725,  726,
      726,  726,  726,  726,  728,  728,  729,  729,    0,  730,
      730,  731,  731,    0,    0,  728,    0,  729,    0,    0,

      730,    0,  731,    0,  728,  730,  729,  732,  732,  730,
        0,  731,    0,  733,  733,    0,    0,    0,  732,  734,
      734,  735,  735,  732,  733,    0,  733,  732,    0,    0,
      734,    0,  735,  733,    0,  734,  736,  736,    0,  734,
        0,  735,  737,  737,  737,  737,  737,  736,  738,  738,
      738,  738,  738,    0,    0,  752,  736,  739,  739,  739,
      739,  739,  740,  740,  740,  740,  740,  741,  741,  741,
      741,  741,  742,  742,  742,  742,  742,  743,  743,  743,
      743,  743,  744,  744,  744,  744,  744,  745,  745,  745,
      745,  745,  746,  746,  746,  746,  746,  747,  747,  747,

      747,  747,  748,  748,  748,  748,  748,  749,  749,  749,
      749,  749,  751,  751,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  751,  753,  753,  754,  754,    0,  755,
      755,    0,  751,    0,    0,  753,    0,  754,    0,    0,
      755,  756,  756,    0,  753,  755,  754,  757,  757,  755,
        0,    0,  756,  758,  758,    0,    0,    0,  757,  759,
      759,  756,    0,  757,  758,    0,  758,  757,    0,    0,
      759,  760,  760,  758,    0,  759,  761,  761,    0,  759,
        0,    0,  760,    0,    0,    0,    0,  761,    0,    0,
        0,  760,    0,    0,    0,    0,  761,  764,  764,  764,

      764,  764,  765,  765,  765,  765,  765,  766,  766,  766,
      766,  766,  767,  767,  767,  767,  767,  768,  768,  768,
      768,  768,  769,  769,  769,  769,  769,  770,  770,  770,
      770,  770,  771,  771,  773,  773,  774,  774,    0,  775,
      775,    0,    0,  771,    0,  773,    0,  774,    0,    0,
      775,    0,  771,    0,  773,  775,  774,  776,  776,  775,
      777,  777,  778,  778,    0,    0,    0,    0,  776,    0,
        0,  777,    0,  778,    0,  778,  777,  776,  779,  779,
      777,    0,  778,    0,  780,  780,  781,  781,    0,  779,
        0,    0,    0,    0,  779,  780,    0,  781,  779,  784,

      784,  784,  784,  784,  780,    0,  781,  785,  785,  785,
      785,  785,  786,  786,  786,  786,  786,  787,  787,  787,
      787,  787,  788,  788,  788,  788,  788,  789,  789,  789,
      789,  789,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  792,  792,  792,  792,  792,  793,  793,  793,
      793,  793,  794,  794,  795,  795,  796,  796,  797,  797,
      798,  798,    0,  794,  796,  795,    0,  796,    0,  797,
        0,  798,  794,  794,  795,  797,  796,    0,  797,    0,
      798,  799,  799,  800,  800,  800,  800,  800,  805,  805,
        0,    0,  799,  801,  801,  801,  801,  801,    0,  805,

        0,  799,  802,  802,  802,  802,  802,    0,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  810,
      807,  806,    0,  807,    0,  808,    0,  809,    0,  810,
      806,  808,  807,    0,  808,    0,  809,    0,  810,  812,
      812,  812,  812,  812,  813,  813,  813,  813,  813,  814,
      814,  814,  814,  814,  815,  815,  816,  816,  817,  817,
      818,  818,  819,  819,    0,  815,  817,  816,    0,  817,
        0,  818,    0,  819,  815,  815,  816,  818,  817,    0,
      818,    0,  819,  820,  820,  821,  821,  821,  821,  821,
      825,  825,    0,    0,  820,  822,  822,  822,  822,  822,

      825,  825,    0,  820,  823,  823,  823,  823,  823,    0,
      825,  826,  826,  827,  827,  829,  829,  830,  830,    0,
        0,    0,  826,    0,  827,  829,  829,    0,  830,  827,
        0,  826,    0,  827,    0,  829,    0,  830,  831,  831,
      833,  833,  834,  834,    0,  835,  835,    0,    0,  831,
      833,  833,    0,  834,  831,    0,  835,    0,  831,    0,
      833,  835,  834,  837,  837,  835,  838,  838,    0,  839,
      839,  840,  840,    0,  837,    0,    0,  838,    0,  838,
      839,    0,  840,  837,  841,  841,  838,  842,  842,  839,
        0,  840,  843,  843,    0,  841,    0,  841,  842,    0,

      844,  844,    0,  843,  841,  845,  845,  842,    0,    0,
        0,  844,  843,  844,    0,    0,  845,  846,  846,    0,
      844,  847,  847,    0,    0,  845,    0,    0,  846,  848,
      848,    0,  847,    0,  846,    0,    0,  846,  847,    0,
      848,  847,  849,  849,  850,  850,  848,    0,    0,  848,
      851,  851,    0,  849,    0,  850,  852,  852,  849,    0,
      850,  851,  849,    0,  850,    0,  851,  852,  853,  853,
      851,  854,  854,    0,    0,    0,  852,    0,    0,  853,
        0,    0,  854,    0,    0,    0,    0,    0,  853,    0,
        0,  854,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  862,    0,
        0,    0,    0,    0,    0,  862,  863,    0,    0,    0,
        0,    0,    0,  863,  864,  864,  864,    0,  864,  865,
        0,  865,    0,    0,    0,    0,    0,    0,  865,  866,
        0,    0,    0,    0,    0,    0,  866,  867,  867,    0,

      867,    0,  867,  867,  867,  867,    0,  867,  868,  868,
        0,  868,    0,  868,  868,  868,  868,    0,  868,  869,
      869,    0,  869,  869,  869,  869,    0,  869,  869,  869,
      870,  870,    0,  870,  870,  870,  870,  870,  870,  870,
      870,  871,    0,    0,  871,    0,  871,  871,  871,    0,
      871,  871,  872,    0,    0,    0,    0,    0,    0,  872,
      873,    0,    0,    0,    0,    0,    0,  873,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  876,    0,
        0,    0,    0,    0,    0,  876,  877,    0,    0,    0,

        0,    0,    0,  877,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  879,    0,  879,    0,    0,    0,
        0,    0,    0,  879,  880,    0,    0,    0,    0,    0,
        0,  880,  881,  881,  881,  881,  881,  881,    0,  881,
        0,  881,  881,  882,    0,  882,    0,    0,    0,  882,
      882,  883,    0,    0,    0,    0,    0,    0,  883,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      885,    0,    0,    0,    0,    0,    0,  885,  886,    0,
      886,    0,    0,    0,    0,    0,    0,  886,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - 2021 Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 856 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4489 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinTry);
    }
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    if (last_token != DOT)
    {
        // Pop to step out TRY
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
    }
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
	    std::string str = "Can\'t convert \'";
	    str += yytext;
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable())
        {
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
        }
	return scan_throw(ID);
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{

  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
	std::string str = "Can\'t convert \'";
	str += yytext;
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
    yyerror("syntax error, unexpected dot or identifier, expecting end of file");
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer.clear();
      str_opener_column = yylloc.first_column;
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
        scan_step();
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 83:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
      unput(yytext[yyleng - 1]);
      --yylloc.last_column;
      if (last_token == ID
          || last_token == RBRACK
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM
          || last_token == BOOLTRUE
          || last_token == BOOLFALSE
          || last_token == STR)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      unput('\'');
      yylloc.last_column--;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 91:
case 92:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 93:
case 94:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, +b] and plus here is unary and is not removed, as unary plus
    // is not necessary defined for all data types (http://bugzilla.scilab.org/show_bug.cgi?id=15850)
    // A priori, the space *is* coding

    unput('+');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale

    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 98:
YY_RULE_SETUP
{
             // This rule is made to take into account a +... without spaces after plus
             // if one simply ignores the next a situation like this could arise
             // Example
             // =======
             // A = [1 +...
             // 2] 
             //
             // what is meant by the user [1 +2] ? or [1 + 2]
             // simply ignoring the ... would yield the 1st situation [1, 2]
             // We consider this is NOT proper and instead that the user meant a binary plus
             // split is two lines
             // The same rationale applies to minus.

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = PLUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(PLUS);
         }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
             // see {spaces}*{minus}{next} for the rationale

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = MINUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(MINUS);
         }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = TRUE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
      paren_levels.pop();
  }
	YY_BREAK

case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
        // This is important to restore coding spaces as if ... was not present
        unput(' ');
        linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::resetControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
        {
	    pstBuffer.clear();
	    std::string str = "Can\'t convert \'";
	    str += pstBuffer.c_str();
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.comment = new std::wstring(pwstBuffer);
        pstBuffer.clear();
        FREE (pwstBuffer);
//        return scan_throw(COMMENT);
    }
    else
    {
	pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
	str += pstBuffer.c_str();
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
//    return scan_throw(COMMENT);
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 109:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      delete yylval.comment;
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 112:
case 113:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 114:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 121:
case 122:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 123:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 130:
case 131:
YY_RULE_SETUP
{
   //scan_step();
   pstBuffer += yytext;
  }
	YY_BREAK

case 132:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            //return ID;
        }
    }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 142:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 856 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 856 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 855);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
    std::string str;
    switch(token)
    {
        case AND :                   str = "AND";
                                     break;
        case ASSIGN :                str = "ASSIGN";
                                     break;
        case BOOLFALSE :             str = "BOOLFALSE";
                                     break;
        case BOOLTRUE :              str = "BOOLTRUE";
                                     break;
        case BREAK :                 str = "BREAK";
                                     break;
        case CASE :                  str = "CASE";
                                     break;
        case CATCH :                 str = "CATCH";
                                     break;
        case COLON :                 str = "COLON";
                                     break;
        case COMMA :                 str = "COMMA";
                                     break;
        case COMMENT :               str = "COMMENT";
                                     break;
        case CONTINUE :              str = "CONTINUE";
                                     break;
        case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE";
                                     break;
        case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE";
                                     break;
        case CONTROLTIMES :          str = "CONTROLTIMES";
                                     break;
        case DO :                    str = "DO";
                                     break;
        case DOLLAR :                str = "DOLLAR";
                                     break;
        case DOT :                   str = "DOT";
                                     break;
        case DOTLDIVIDE :            str = "DOTLDIVIDE";
                                     break;
        case DOTPOWER :              str = "DOTPOWER";
                                     break;
        case DOTQUOTE :              str = "DOTQUOTE";
                                     break;
        case DOTRDIVIDE :            str = "DOTRDIVIDE";
                                     break;
        case DOTS :                  str = "DOTS";
                                     break;
        case DOTTIMES :              str = "DOTTIMES";
                                     break;
        case ELSE :                  str = "ELSE";
                                     break;
        case ELSEIF :                str = "ELSEIF";
                                     break;
        case END :                   str = "END";
                                     break;
        case ENDFUNCTION :           str = "ENDFUNCTION";
                                     break;
        case EOL :                   str = "EOL";
                                     break;
        case EQ :                    str = "EQ";
                                     break;
        case FLEX_ERROR :            str = "FLEX_ERROR";
                                     break;
        case FOR :                   str = "FOR";
                                     break;
        case FUNCTION :              str = "FUNCTION";
                                     break;
        case GE :                    str = "GE";
                                     break;
        case GT :                    str = "GT";
                                     break;
        case ID :                    str = "ID";
                                     break;
        case IF :                    str = "IF";
                                     break;
        case KRONLDIVIDE :           str = "KRONLDIVIDE";
                                     break;
        case KRONRDIVIDE :           str = "KRONRDIVIDE";
                                     break;
        case KRONTIMES :             str = "KRONTIMES";
                                     break;
        case LBRACE :                str = "LBRACE";
                                     break;
        case LBRACK :                str = "LBRACK";
                                     break;
        case LDIVIDE :               str = "LDIVIDE";
                                     break;
        case LE :                    str = "LE";
                                     break;
        case LPAREN :                str = "LPAREN";
                                     break;
        case LT :                    str = "LT";
                                     break;
        case MINUS :                 str = "MINUS";
                                     break;
        case NE :                    str = "NE";
                                     break;
        case NOT :                   str = "NOT";
                                     break;
        case NUM :                   str = "NUM";
                                     break;
        case OR :                    str = "OR";
                                     break;
        case OROR :                  str = "OROR";
                                     break;
        case PLUS :                  str = "PLUS";
                                     break;
        case POWER :                 str = "POWER";
                                     break;
        case QUOTE :                 str = "QUOTE";
                                     break;
        case RBRACE :                str = "RBRACE";
                                     break;
        case RBRACK :                str = "RBRACK";
                                     break;
        case RDIVIDE :               str = "RDIVIDE";
                                     break;
        case RETURN :                str = "RETURN";
                                     break;
        case RPAREN :                str = "RPAREN";
                                     break;
        case SELECT :                str = "SELECT";
                                     break;
        case SEMI :                  str = "SEMI";
                                     break;
        case SPACES :                str = "SPACES";
                                     break;
        case STR :                   str = "STR";
                                     break;
        case THEN :                  str = "THEN";
                                     break;
        case TIMES :                 str = "TIMES";
                                     break;
        case TRY :                   str = "TRY";
                                     break;
        case VARFLOAT :              str = "VARFLOAT";
                                     break;
        case VARINT :                str = "VARINT";
                                     break;
        case WHILE :                 str = "WHILE";
                                     break;
        default :                    str = "UNKNOWN";
                                     break;
    }
    return str;

}
#endif


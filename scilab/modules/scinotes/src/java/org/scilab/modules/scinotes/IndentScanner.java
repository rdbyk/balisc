/* The following code was generated by JFlex 1.6.1 */

//CHECKSTYLE:OFF 

package org.scilab.modules.scinotes;

import java.io.IOException;
import javax.swing.text.Element;
import javax.swing.text.BadLocationException;

@javax.annotation.Generated("JFlex")
@SuppressWarnings("fallthrough")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>modules/scinotes/src/java/jflex/indentation.jflex</tt>
 */
public final class IndentScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENT = 2;
  public static final int WHITE = 4;
  public static final int TAB = 6;
  public static final int BEG = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\1\1\4\1\4\1\3\22\0\1\31\1\5\1\7"+
    "\3\5\1\0\1\6\1\0\1\10\5\0\1\2\12\5\5\0\1\5"+
    "\1\0\32\5\2\0\1\10\1\0\1\5\1\0\1\30\1\5\1\14"+
    "\1\27\1\24\1\11\1\5\1\22\1\16\2\5\1\23\1\5\1\13"+
    "\1\17\2\5\1\20\1\26\1\15\1\12\1\5\1\21\1\5\1\25"+
    "\1\5\2\0\1\10\7\0\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\0\1\2\1\3\14\2\2\1\1\4"+
    "\12\0\1\2\4\0\1\4\23\0\1\2\2\0\1\5"+
    "\10\0\1\2\5\0\1\6\2\0\1\2\1\6\6\0"+
    "\1\2\3\0\2\2\7\0\1\2\4\0\1\2\2\0"+
    "\3\2\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\0\0\0"+
    "\0\242\0\275\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f"+
    "\0\u017a\0\u0195\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237"+
    "\0\u0252\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f"+
    "\0\330\0\u032a\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc"+
    "\0\u03e7\0\u0402\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4"+
    "\0\u04bf\0\u04da\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c"+
    "\0\u0597\0\u05b2\0\u03b1\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639"+
    "\0\u0654\0\u066f\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711"+
    "\0\u072c\0\u0747\0\u0762\0\u077d\0\u03b1\0\u0798\0\u07b3\0\u07ce"+
    "\0\u07e9\0\u0804\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6"+
    "\0\u08c1\0\u08dc\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e"+
    "\0\u0999\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56"+
    "\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u03b1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\0\1\7\1\10\1\11\2\0\1\12\2\13\1\14"+
    "\1\15\2\12\1\16\1\17\1\20\1\21\1\12\1\22"+
    "\2\12\1\23\1\12\1\24\2\12\2\7\3\10\2\0"+
    "\24\10\1\25\4\10\2\0\25\10\1\26\3\7\2\0"+
    "\31\7\2\0\24\7\2\27\2\0\1\30\36\0\1\7"+
    "\2\0\1\31\2\0\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\2\0\1\37\1\0\1\40\4\0\1\41\1\0"+
    "\1\41\1\0\2\41\2\42\23\41\6\0\1\7\32\0"+
    "\1\7\2\0\1\31\1\43\1\0\1\32\1\33\1\34"+
    "\1\44\1\0\1\36\2\0\1\37\1\0\1\40\12\0"+
    "\1\7\2\0\1\31\2\0\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\2\0\1\37\1\0\1\40\1\0\1\45"+
    "\10\0\1\7\2\0\1\31\2\0\1\32\1\33\1\34"+
    "\1\35\1\46\1\36\2\0\1\37\1\0\1\40\12\0"+
    "\1\7\2\0\1\47\2\0\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\2\0\1\37\1\0\1\40\12\0\1\7"+
    "\2\0\1\31\2\0\1\32\1\50\1\34\1\35\1\0"+
    "\1\36\2\0\1\37\1\0\1\40\12\0\1\7\2\0"+
    "\1\31\2\0\1\32\1\33\1\34\1\35\1\0\1\36"+
    "\1\51\1\0\1\37\1\0\1\40\12\0\1\7\2\0"+
    "\1\31\1\0\1\52\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\1\0\1\53\1\37\1\0\1\40\12\0\1\7"+
    "\2\0\1\31\2\0\1\32\1\33\1\34\1\35\1\0"+
    "\1\54\2\0\1\55\1\0\1\40\35\0\1\25\33\0"+
    "\1\26\31\0\2\27\1\30\1\7\1\30\2\0\26\30"+
    "\12\0\1\56\4\0\1\57\43\0\1\60\22\0\1\61"+
    "\23\0\1\7\36\0\1\62\37\0\1\63\23\0\1\64"+
    "\7\0\1\65\30\0\1\66\2\0\1\67\14\0\2\41"+
    "\36\0\1\70\34\0\1\62\2\0\1\47\27\0\1\71"+
    "\10\0\1\72\31\0\1\47\12\0\1\73\3\0\20\73"+
    "\22\0\1\61\1\0\1\74\26\0\1\75\43\0\1\76"+
    "\31\0\1\77\22\0\1\100\3\0\1\63\23\0\1\64"+
    "\7\0\1\101\22\0\1\102\37\0\1\7\27\0\1\103"+
    "\10\0\1\104\31\0\1\7\27\0\1\105\26\0\1\106"+
    "\43\0\1\107\31\0\1\110\22\0\1\111\37\0\1\112"+
    "\23\0\1\113\32\0\1\114\42\0\1\115\32\0\1\116"+
    "\31\0\1\117\14\0\1\73\3\0\1\120\17\73\26\0"+
    "\1\121\23\0\1\122\41\0\1\123\1\0\1\110\20\0"+
    "\1\124\32\0\1\125\42\0\1\7\32\0\1\126\31\0"+
    "\1\104\20\0\1\127\45\0\1\130\23\0\1\103\41\0"+
    "\1\131\23\0\1\132\37\0\1\115\30\0\1\133\36\0"+
    "\1\47\13\0\1\73\3\0\1\73\1\134\16\73\7\0"+
    "\1\73\3\0\5\73\1\135\12\73\16\0\1\136\32\0"+
    "\1\137\33\0\1\140\37\0\1\7\30\0\1\141\24\0"+
    "\1\56\36\0\1\34\30\0\1\142\34\0\1\143\35\0"+
    "\1\144\16\0\1\73\3\0\2\73\1\145\15\73\7\0"+
    "\1\73\3\0\1\115\17\73\24\0\1\47\25\0\1\47"+
    "\33\0\1\146\35\0\1\147\26\0\1\7\34\0\1\150"+
    "\31\0\1\151\21\0\1\73\3\0\3\73\1\152\14\73"+
    "\21\0\1\153\31\0\1\154\27\0\1\47\45\0\1\72"+
    "\11\0\1\73\3\0\4\73\1\155\13\73\15\0\1\7"+
    "\45\0\1\104\11\0\1\73\3\0\5\73\1\156\12\73"+
    "\7\0\1\73\3\0\6\73\1\157\11\73\7\0\1\73"+
    "\3\0\2\73\1\160\15\73\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2862];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\1\0\2\1\2\0\2\11\17\1\12\0\1\1"+
    "\4\0\1\1\23\0\1\1\2\0\1\1\10\0\1\1"+
    "\5\0\1\1\2\0\2\1\6\0\1\1\3\0\2\1"+
    "\7\0\1\1\4\0\1\1\2\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ScilabDocument doc;
    private Element elem;

    public IndentScanner(ScilabDocument doc) {
    	this.doc = doc;
	this.elem = doc.getDefaultRootElement();
    }
   
    public int getIndentNumber(int lineNumber, char type) {
        if (lineNumber < 0) {
	    return 0;
	}
        try {
	     Element line = elem.getElement(lineNumber);
	     int startL = line.getStartOffset();
	     int endL = line.getEndOffset();	
	     yyreset(new ScilabDocumentReader(doc, startL, endL));
	     switch (type) {
	     	 case ' ':
	      	 yybegin(WHITE);
	      	 break;
	    	 case '\t':
	     	 yybegin(TAB);
	      	 break;
	     default:
		 yybegin(WHITE);
	     }
	     return yylex();
	} catch (IOException e) {
	     return 0;
	}
    }	

    public int getTabsAtBeginning(int pos) {
    	Element line = elem.getElement(pos);
	int startL = line.getStartOffset();
	int endL = line.getEndOffset();
	try {
	    yyreset(new ScilabDocumentReader(doc, startL, endL));
	    yybegin(BEG);
	    if (yylex() == 1) {
	        return yylength();
       	    }
	} catch (IOException e) {  
	    return 0;	
    	}
	return 0;
    }	    

    public void getIndentLevel(int pos, int[] level) {
    	Element line = elem.getElement(elem.getElementIndex(pos));
	int startL = line.getStartOffset();
	int endL = line.getEndOffset();
	level[0] = 0;
	level[1] = 0;
	try {
	    yyreset(new ScilabDocumentReader(doc, startL, endL));
	    yybegin(INDENT);
	    do {
	        switch (yylex()) {
	       	case 0:
	              break;
	       	case 1:
	             level[1]++;
		     break;
	       	case 2:
	             if (level[1] > 0) {
		         level[1]--;
		     } else {
	        	 level[0]++;
		     }
	             break;
	       	case 3:
	             if (level[1] == 0) {
		         level[0]++;
		         level[1]++;
		     }
                }	         
	    } while (zzMarkedPos != 0);
        } catch (IOException e) { } 	  
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IndentScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return yylength();
            }
          case 7: break;
          case 2: 
            { 
            }
          case 8: break;
          case 3: 
            { return 0;
            }
          case 9: break;
          case 4: 
            { return 1;
            }
          case 10: break;
          case 5: 
            { return 2;
            }
          case 11: break;
          case 6: 
            { return 3;
            }
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

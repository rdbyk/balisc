/* The following code was generated by JFlex 1.6.1 */

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.io.IOException;
import javax.swing.text.Element;

@javax.annotation.Generated("JFlex")
@SuppressWarnings("fallthrough")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>modules/scinotes/src/java/jflex/matchingblock.jflex</tt>
 */
public final class MatchingBlockScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 256;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LR = 2;
  public static final int RL = 4;
  public static final int OPENCLOSE = 6;
  public static final int CLOSEOPEN = 8;
  public static final int PSNART = 10;
  public static final int SPEC = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\1\4\1\4\1\3\23\0\1\7\1\11\1\7\1\5"+
    "\1\6\1\0\1\10\1\31\1\12\5\0\1\2\12\5\5\0\1\7"+
    "\1\0\32\7\1\31\1\0\1\12\1\0\1\7\1\0\2\7\1\24"+
    "\1\32\1\22\1\14\1\7\1\20\1\13\2\7\1\21\1\7\1\30"+
    "\1\15\2\7\1\16\1\23\1\25\1\27\1\7\1\17\1\7\1\26"+
    "\1\7\1\31\1\0\1\12\7\0\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\6\1\1\2\6\1\1\3\2\1\1\4\7\1"+
    "\1\2\1\1\11\2\1\5\1\6\1\0\1\7\2\0"+
    "\1\1\1\3\7\1\12\0\1\2\7\0\1\3\14\0"+
    "\2\1\1\2\3\1\7\0\1\1\1\2\4\0\1\2"+
    "\10\0\6\1\13\0\1\3\5\0\4\1\15\0\2\1"+
    "\7\0\2\1\6\0\1\1\1\0\1\2\3\0\3\1"+
    "\3\0\1\1\2\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\0"+
    "\0\275\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a"+
    "\0\u0195\0\u01b0\0\u01cb\0\u01e6\0\0\0\u0201\0\u021c\0\0"+
    "\0\u0237\0\u0252\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\0"+
    "\0\u02f4\0\u030f\0\u032a\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1"+
    "\0\u03cc\0\u03e7\0\0\0\0\0\u0402\0\0\0\u041d\0\u0129"+
    "\0\u0438\0\363\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da"+
    "\0\u04f5\0\u0201\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c\0\u0597"+
    "\0\u05b2\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654\0\u066f"+
    "\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c\0\u0747"+
    "\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804\0\u081f"+
    "\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6\0\u0510\0\u08c1\0\u08dc"+
    "\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e\0\u0999\0\u09b4"+
    "\0\u09cf\0\u09ea\0\u0a05\0\u06db\0\u0a20\0\u0a3b\0\u0a56\0\u0a71"+
    "\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u0b2e\0\u0b49"+
    "\0\u0b64\0\u0b7f\0\u0b9a\0\u0bb5\0\u0bd0\0\u0beb\0\u0c06\0\u0c21"+
    "\0\u0c3c\0\u0c57\0\u0c72\0\u0c8d\0\u0ca8\0\u0cc3\0\u0cde\0\u0cf9"+
    "\0\u0d14\0\u0d2f\0\u0d4a\0\u0d65\0\u0d80\0\u0d9b\0\u0db6\0\u0dd1"+
    "\0\u0dec\0\u0e07\0\u0e22\0\u0e3d\0\u0e58\0\u0e73\0\u0e8e\0\u0ea9"+
    "\0\u0ec4\0\u0edf\0\u0efa\0\u0f15\0\u0f30\0\u0f4b\0\u0f66\0\u0f81"+
    "\0\u0f9c\0\u0fb7\0\u0fd2\0\u0fed\0\u1008\0\u1023\0\u103e\0\u1059"+
    "\0\u1074\0\u108f\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116\0\u1131"+
    "\0\u114c\0\u1167\0\u1182\0\u119d\0\u11b8\0\u11d3\0\u11ee\0\u11d3"+
    "\0\u1209\0\u1224\0\u123f\0\u125a\0\363";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\0\2\10\1\11\2\0\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\2\14\1\21\2\14\1\22\1\23"+
    "\1\14\1\24\3\14\1\25\1\14\1\10\1\26\1\10"+
    "\2\0\1\27\1\10\1\27\1\30\1\15\1\25\1\27"+
    "\1\31\1\27\1\32\1\27\1\33\1\27\1\34\2\27"+
    "\1\35\1\36\1\27\1\37\1\40\1\41\3\40\2\0"+
    "\6\40\1\42\1\43\2\40\1\44\2\40\1\45\1\46"+
    "\1\40\1\47\3\40\1\25\4\40\2\0\1\50\1\40"+
    "\1\50\2\40\1\25\15\50\1\51\1\40\1\52\10\0"+
    "\1\53\22\0\3\54\2\0\26\54\2\0\1\55\40\0"+
    "\1\56\11\0\1\57\15\0\1\13\1\0\1\13\3\0"+
    "\16\13\1\0\1\13\5\0\1\13\1\0\1\13\1\56"+
    "\2\0\16\13\1\0\1\13\1\60\1\0\1\60\1\0"+
    "\4\60\2\61\21\60\10\0\1\56\27\0\1\13\1\0"+
    "\1\13\1\56\2\0\1\13\1\62\14\13\1\0\1\13"+
    "\5\0\1\13\1\0\1\13\1\56\2\0\2\13\1\63"+
    "\11\13\1\64\1\13\1\0\1\13\5\0\1\13\1\0"+
    "\1\13\1\56\2\0\5\13\1\65\10\13\1\0\1\13"+
    "\5\0\1\13\1\0\1\13\1\56\2\0\15\13\1\66"+
    "\1\0\1\13\5\0\1\13\1\0\1\13\1\56\2\0"+
    "\4\13\1\67\2\13\1\70\6\13\1\0\1\13\5\0"+
    "\1\13\1\0\1\13\1\56\2\0\3\13\1\71\12\13"+
    "\1\0\1\13\1\72\1\0\1\73\1\0\27\72\14\0"+
    "\1\74\1\0\1\75\1\0\1\76\1\0\1\77\2\0"+
    "\1\100\1\101\1\0\1\102\1\0\1\103\13\0\1\104"+
    "\1\74\1\0\1\75\1\0\1\76\1\0\1\77\2\0"+
    "\1\100\1\101\1\0\1\102\1\0\1\103\14\0\1\74"+
    "\1\105\1\75\1\0\1\76\1\0\1\77\2\0\1\100"+
    "\1\101\1\0\1\102\1\0\1\103\14\0\1\74\1\0"+
    "\1\75\1\0\1\76\1\0\1\77\1\0\1\106\1\100"+
    "\1\101\1\0\1\102\1\0\1\103\14\0\1\74\1\0"+
    "\1\75\1\0\1\76\1\107\1\77\2\0\1\100\1\101"+
    "\1\0\1\102\1\0\1\103\14\0\1\74\1\0\1\75"+
    "\1\0\1\76\1\0\1\77\1\0\1\110\1\100\1\101"+
    "\1\0\1\102\1\0\1\103\14\0\1\74\1\0\1\111"+
    "\1\0\1\76\1\0\1\77\2\0\1\100\1\101\1\0"+
    "\1\102\1\0\1\103\14\0\1\74\1\112\1\75\1\0"+
    "\1\76\1\0\1\77\2\0\1\100\1\101\1\0\1\102"+
    "\1\0\1\103\14\0\1\74\1\0\1\75\1\0\1\76"+
    "\1\0\1\77\2\0\1\100\1\101\1\0\1\113\1\0"+
    "\1\103\14\0\1\114\33\0\1\115\11\0\1\116\23\0"+
    "\1\117\33\0\1\120\30\0\1\121\2\0\1\122\26\0"+
    "\1\123\44\0\1\124\1\0\1\125\15\0\1\126\12\0"+
    "\1\124\1\0\1\125\30\0\1\127\1\0\1\125\1\55"+
    "\1\10\1\55\2\0\26\55\30\0\1\130\12\0\2\60"+
    "\26\0\1\13\1\0\1\13\3\0\3\13\1\62\12\13"+
    "\1\0\1\13\5\0\1\13\1\0\1\13\3\0\15\13"+
    "\1\131\1\0\1\13\5\0\1\13\1\0\1\13\3\0"+
    "\1\132\15\13\1\0\1\13\5\0\1\13\1\0\1\13"+
    "\3\0\16\13\1\0\1\133\5\0\1\13\1\0\1\13"+
    "\3\0\1\134\15\13\1\0\1\13\5\0\1\13\1\0"+
    "\1\13\3\0\6\13\1\135\7\13\1\0\1\13\5\0"+
    "\1\13\1\0\1\13\3\0\13\13\1\62\2\13\1\0"+
    "\1\13\1\72\1\0\1\136\1\0\27\72\13\0\1\10"+
    "\34\0\1\137\41\0\1\140\27\0\1\141\35\0\1\142"+
    "\24\0\1\143\31\0\1\144\45\0\1\145\7\0\1\10"+
    "\1\0\1\10\3\0\7\10\1\146\6\10\1\0\1\10"+
    "\14\0\1\147\43\0\1\150\20\0\1\151\41\0\1\152"+
    "\25\0\1\137\7\0\1\147\20\0\1\153\34\0\1\144"+
    "\4\0\1\25\15\0\1\154\1\0\1\154\3\0\16\154"+
    "\1\0\1\154\16\0\1\114\44\0\1\155\15\0\1\156"+
    "\42\0\1\157\22\0\1\160\40\0\1\161\37\0\1\114"+
    "\21\0\1\162\45\0\1\163\15\0\1\164\34\0\1\162"+
    "\4\0\1\25\42\0\1\165\5\0\1\13\1\0\1\13"+
    "\3\0\11\13\1\166\4\13\1\0\1\13\5\0\1\13"+
    "\1\0\1\13\3\0\6\13\1\167\7\13\1\0\1\13"+
    "\5\0\1\13\1\0\1\13\3\0\1\13\1\170\14\13"+
    "\1\0\1\13\5\0\1\13\1\0\1\13\3\0\12\13"+
    "\1\171\3\13\1\0\1\13\5\0\1\13\1\0\1\13"+
    "\3\0\7\13\1\172\6\13\1\0\1\13\14\0\1\10"+
    "\43\0\1\173\20\0\1\174\41\0\1\175\35\0\1\10"+
    "\20\0\1\176\41\0\1\10\33\0\1\177\14\0\1\10"+
    "\1\0\1\10\3\0\16\10\1\0\1\10\13\0\1\200"+
    "\37\0\1\201\33\0\1\202\36\0\1\203\31\0\1\204"+
    "\27\0\1\205\33\0\1\206\35\0\1\207\27\0\1\210"+
    "\23\0\1\211\41\0\1\40\35\0\1\212\21\0\1\213"+
    "\23\0\1\13\1\0\1\13\3\0\12\13\1\214\3\13"+
    "\1\0\1\13\5\0\1\13\1\0\1\13\3\0\7\13"+
    "\1\62\6\13\1\0\1\13\5\0\1\13\1\0\1\13"+
    "\3\0\14\13\1\215\1\13\1\0\1\13\5\0\1\13"+
    "\1\0\1\13\3\0\11\13\1\216\4\13\1\0\1\13"+
    "\5\0\1\13\1\0\1\13\3\0\11\13\1\217\4\13"+
    "\1\0\1\13\13\0\1\220\37\0\1\221\33\0\1\222"+
    "\36\0\1\223\26\0\1\145\30\0\1\224\32\0\1\147"+
    "\35\0\1\224\34\0\1\225\33\0\1\226\27\0\1\114"+
    "\23\0\1\227\43\0\1\230\32\0\1\231\33\0\1\232"+
    "\31\0\1\233\35\0\1\234\10\0\1\13\1\0\1\13"+
    "\3\0\1\235\15\13\1\0\1\13\5\0\1\13\1\0"+
    "\1\13\3\0\15\13\1\236\1\0\1\13\5\0\1\13"+
    "\1\0\1\13\3\0\5\13\1\62\10\13\1\0\1\13"+
    "\5\0\1\13\1\0\1\13\3\0\12\13\1\62\3\13"+
    "\1\0\1\13\17\0\1\237\32\0\1\10\35\0\1\237"+
    "\34\0\1\240\31\0\1\147\37\0\1\241\15\0\1\242"+
    "\33\0\1\25\36\0\1\114\37\0\1\114\31\0\1\243"+
    "\36\0\1\244\32\0\1\245\7\0\1\13\1\0\1\13"+
    "\3\0\2\13\1\246\13\13\1\0\1\13\5\0\1\13"+
    "\1\0\1\13\3\0\11\13\1\247\4\13\1\0\1\13"+
    "\23\0\1\10\37\0\1\250\31\0\1\251\20\0\1\252"+
    "\45\0\1\253\31\0\1\254\27\0\1\255\13\0\1\13"+
    "\1\0\1\13\3\0\15\13\1\62\1\0\1\13\5\0"+
    "\1\13\1\0\1\13\3\0\12\13\1\256\3\13\1\0"+
    "\1\13\27\0\1\257\17\0\1\260\46\0\1\114\31\0"+
    "\1\261\17\0\1\262\43\0\1\263\12\0\1\13\1\0"+
    "\1\13\3\0\1\264\15\13\1\0\1\13\14\0\1\265"+
    "\23\0\1\10\1\0\1\10\3\0\16\10\1\0\1\266"+
    "\14\0\1\267\50\0\1\270\13\0\1\271\24\0\1\13"+
    "\1\0\1\13\3\0\2\13\1\272\13\13\1\0\1\13"+
    "\32\0\1\103\30\0\1\273\34\0\1\125\15\0\1\274"+
    "\22\0\1\13\1\0\1\13\3\0\15\13\1\275\1\0"+
    "\1\13\22\0\1\25\40\0\1\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4725];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\6\0\1\11\14\1\1\11\2\1\1\11\7\1"+
    "\1\11\12\1\2\11\1\0\1\11\2\0\11\1\12\0"+
    "\1\1\7\0\1\1\14\0\6\1\7\0\2\1\4\0"+
    "\1\1\10\0\6\1\13\0\1\1\5\0\4\1\15\0"+
    "\2\1\7\0\2\1\6\0\1\1\1\0\1\1\3\0"+
    "\3\1\3\0\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ScilabDocument doc;
    private Element elem;
    private boolean transp = false;
    private ScilabLexer scilabLexer;
    private int start;
    private int end;
    private int savePos;

    public MatchingBlockScanner(ScilabDocument doc) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.scilabLexer = new ScilabLexer(doc, null, false);
    }

    public MatchingPositions getNextBlock(int pos, boolean lr) {
        int s = 1;
        transp = false;
	try {
      	    if (lr) {
                start =  pos;
                end = doc.getEndPosition().getOffset();
                yyreset(new ScilabDocumentReader(doc, start, end));
                yybegin(LR);
	    } else {
                start = pos - 1;
                end = 0;
                yyreset(new ScilabDocumentReader(doc, true, start, end));
              	yybegin(RL);
	    }
	    do {
               if (yylex() == 0) {
                  s--;
               } else {
                  s++;
               }
            } while (zzMarkedPos != 0 && s != 0);
        } catch (IOException e) {
            return null;
        }
        if (s == 0) {
            if (lr) {
                return new MatchingPositions(pos, pos, pos + yychar, pos + yychar + (transp?(yylength()-1):yylength()));
            } else {
                return new MatchingPositions(pos, pos, pos - yychar - yylength(), pos - yychar);
            }
        }

        return null;
    }

    public MatchingPositions getMatchingBlock(int pos, boolean lr) {
        int p1, s = 1;
        transp = false;
        try {
            if (lr) {
                start =  pos;
                end = doc.getEndPosition().getOffset();
                yyreset(new ScilabDocumentReader(doc, start, end));
                yybegin(OPENCLOSE);
                if (yylex() != 1) {
                   return null;
                }

                p1 = pos + yylength();
                yybegin(LR);
            } else {
                 start = pos - 1;
                 end = 0;
                 yyreset(new ScilabDocumentReader(doc, true, start, end));
                 yybegin(CLOSEOPEN);
                 if (yylex() != 1) {
                    return null;
                 }
                 p1 = pos - yylength();
                 yybegin(RL);
            }

            do {
               if (yylex() == 0) {
                  s--;
               } else {
                  s++;
               }
            } while (zzMarkedPos != 0 && s != 0);
        } catch (IOException e) {
            return null;
        }
        if (s == 0) {
            if (lr) {
                return new MatchingPositions(pos, p1, pos + yychar, pos + yychar + (transp?(yylength()-1):yylength()));
            } else {
                return new MatchingPositions(p1, pos, pos - yychar - yylength(), pos - yychar);
            }
        }

        return null;
    }

    public final class MatchingPositions {
        public int firstB;
        public int firstE;
        public int secondB;
        public int secondE;

        private MatchingPositions(int x1, int x2, int y1, int y2) {
            firstB = x1;
            firstE = x2;
            secondB = y1;
            secondE = y2;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MatchingBlockScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return -1;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 8: break;
          case 2: 
            { return 0;
            }
          case 9: break;
          case 3: 
            { return 1;
            }
          case 10: break;
          case 4: 
            { yypushback(1);
                                   yybegin(PSNART);
            }
          case 11: break;
          case 5: 
            { if (scilabLexer.getKeyword(start - yychar, false) == ScilabLexerConstants.STRING) {
                                      savePos = start - yychar - scilabLexer.beginString - scilabLexer.start;
                                      yybegin(SPEC);
                                   } else {
                                      yybegin(RL);
                                   }
            }
          case 12: break;
          case 6: 
            { if (--savePos == 0) {
                                      yybegin(RL);
                                   }
            }
          case 13: break;
          case 7: 
            { char c = yycharat(yylength() - 2);
                                   if (c == ')' || c == ']' || c == '}') {
                                      transp = true;
                                      return 0;
                                   }
            }
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

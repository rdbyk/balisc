assert_checkequal(issquare([1 2 3]), %f);
assert_checkequal(issquare([1 2 3]'), %f);
assert_checkequal(issquare([1 2; 1 2]), %t);
assert_checkequal(issquare(1), %t);
assert_checkequal(issquare(rand(2,1,2)), %t);
assert_checkequal(issquare(rand(2,2,3)), %f);
assert_checkequal(issquare([]), %f);
assert_checkequal(issquare(["s" "t" "u"]), %f);
assert_checkequal(issquare(["s" "t" "u"]'), %f);
assert_checkequal(issquare(["s" "t";"s" "t"]), %t);
assert_checkequal(issquare("s"), %t);
assert_checkequal(issquare(matrix(["s";"s";"s";"s"], [2,1,2])), %t);
assert_checkequal(issquare(matrix(["t";"t";"t";"t";"t";"t";"t";"t";"t";"t";"t";"t"], [2,2,3])), %f);
s=poly(0,"s");
assert_checkequal(issquare([1+s 2+s]), %f);
assert_checkequal(issquare([1+s 2+s]'), %f);
assert_checkequal(issquare([1+s 2+s; 3+s 4+s]), %t);
assert_checkequal(issquare(1+s), %t);
assert_checkequal(issquare(matrix([s;s;s;s], [2,1,2])), %t);
assert_checkequal(issquare(matrix([s;s;s;s;s;s;s;s;s;s;s;s], [2,2,3])), %f);
assert_checkequal(issquare([%t %f]), %f);
assert_checkequal(issquare([%t %f]'), %f);
assert_checkequal(issquare([%t %f; %f %t]), %t);
assert_checkequal(issquare(%t), %t);
assert_checkequal(issquare(matrix([%t;%t;%t;%t], [2,1,2])), %t);
assert_checkequal(issquare(matrix([%t;%t;%t;%t;%t;%t;%t;%t;%t;%t;%t;%t], [2,2,3])), %f)
 ans  =
  T
assert_checkequal(issquare(sparse([1 0 2])), %f);
assert_checkequal(issquare(sparse([1 0 2])'), %f);
assert_checkequal(issquare(sparse([1 0; 0 1])), %t);
assert_checkequal(issquare(sparse(0)), %t);
clear s;
assert_checkequal(issquare(struct()), %f);
s.a = "test";
assert_checkequal(issquare(s), %t);
clear s;
s(3,1).a = %pi;
assert_checkequal(issquare(s), %f);
clear s;
s(1,3).a = %pi;
assert_checkequal(issquare(s), %f);
clear s;
s(3,2).a = %z;
assert_checkequal(issquare(s), %f);
clear s;
s(2,2,2).a = %s;
assert_checkequal(issquare(s), %t);
clear s;
s(2,1,2).a = %s;
assert_checkequal(issquare(s), %t);
assert_checkequal(issquare(cell()), %f);
a = cell(1);
a{1} = 1;
assert_checkequal(issquare(a), %t);
clear a;
a = cell(1,3);
a{1} = 1:3;
a{2} = 1:3;
a{3} = 1:3;
assert_checkequal(issquare(a), %f);
clear a;
a = cell(3,1);
a{1} = 1:3;
a{2} = 1:3;
a{3} = 1:3;
assert_checkequal(issquare(a), %f);
clear a;
a = cell(3,2);
a{1,1} = 1:3;
a{1,2} = 1:3;
a{2,1} = 1:3;
a{2,2} = 1:3;
a{3,2} = 1:3;
a{3,1} = 1:3;
assert_checkequal(issquare(a), %f);
clear a;
a = cell(2,2,2);
a{1,1,1} =1:3;
a{1,2,1} =1:3;
a{2,1,1} =1:3;
a{2,2,1} =1:3;
a{1,1,2} =1:3;
a{1,2,2} =1:3;
a{2,1,2} =1:3;
a{2,2,2} =1:3;
assert_checkequal(issquare(a), %t);
a = cell(2,1,2);
a{1,1,1}=1:3;
a{2,1,1}=1:3;
a{1,1,2}=1:3;
a{2,1,2}=1:3;
assert_checkequal(issquare(a), %t);
assert_checkequal(issquare(list()), %f);
l=list(1);
assert_checkequal(issquare(l), %f);
clear l;
l=list(1,"test");
assert_checkequal(issquare(l), %f);
errmsg1 = msprintf(_("%s: Wrong number of input arguments: %d expected.\n"),"issquare", 1);
assert_checkerror("issquare()", errmsg1);
assert_checkerror("issquare(1,2)", errmsg1);
errmsg2 = msprintf(_("%s: Wrong number of output arguments: %d expected.\n"), "issquare", 1);
assert_checkerror("[r,b]=issquare([1 2 3]);", errmsg2);

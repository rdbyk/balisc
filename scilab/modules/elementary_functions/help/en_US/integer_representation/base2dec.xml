<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * Copyright (C) 2011 - DIGITEO - Michael Baudin
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2019 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="base2dec" xml:lang="en">
    <refnamediv>
        <refname>base2dec</refname>
        <refpurpose>convert from base b to decimal</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>d = base2dec(str, base )
                  d = base2dec(str, base, out_type)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>str</term>
                <listitem>
                    <para>matrix of strings
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>base</term>
                <listitem>
                    <para>scalar real integer value</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>out_type</term>
                <listitem>
                    <para>string</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>d</term>
                <listitem>
                    <para>integer or real integer valued matrix</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <term>base2dec(str, base)</term> returns the matrix of numbers
            corresponding to the <term>base</term> representation.
        </para>
        <para>
            The argument <term>base</term> must be an integer value from 2 to 36.
        </para>
        <para>
            The optional argument <term>out_type</term> (<literal>int8</literal>, ...,
            <literal>int64</literal>, <literal>uint8</literal>, ...,
            <literal>uint64</literal>, or <literal>double</literal>) specifies the
            type of the result <term>d</term>. The default type is <literal>double</literal>.
        </para>
        <para>
            Please note, that for integer result types (<literal>int8</literal>, ...,
            <literal>int64</literal>, <literal>uint8</literal>, ...,
            <literal>uint64</literal>) overflow may occur and is not detected.
        </para>
        <para>
            If the result type is <literal>double</literal>, then infinity <term>Inf</term>
            is returned on overflow. If elements of <term>str</term> are invalid number
            representations, then not-a-number <term>Nan</term> is returned. Furthermore,
            keep in mind, that integer values greater than 2^53 may be not exactly
            representable by result type <term>double</term>.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// convert some hex number to decimal (double)
base2dec(['ABC','0','A'],16)
typeof(ans)

// convert hex number to 32bit integer
base2dec('ABC',16, 'int32')
typeof(ans)

// convert hex number to unsigned 8bit integer (which overflows)
base2dec('ABC',16, 'uint8')
typeof(ans)

// largest unsigned 64bit integer
base2dec('FFFFFFFFFFFFFFFF', 16, 'uint64')

// try to convert invalid representation to decimal (double)
// "G" is not valid hexadecimal digit
base2dec('FG', 16)

// conversion of a large number to decimal (double) result, which overflows
base2dec(strcat('Z'(ones(1,200))), 36)

// loss of precision with result type double
// correct result would be "18446744073709551615" (look at last digit!)
format(25)
base2dec('FFFFFFFFFFFFFFFF', 16)
format(10)
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="bin2dec">bin2dec</link>
            </member>
            <member>
                <link linkend="oct2dec">oct2dec</link>
            </member>
            <member>
                <link linkend="hex2dec">hex2dec</link>
            </member>
            <member>
                <link linkend="dec2bin">dec2bin</link>
            </member>
            <member>
                <link linkend="dec2oct">dec2oct</link>
            </member>
            <member>
                <link linkend="dec2hex">dec2hex</link>
            </member>
            <member>
                <link linkend="dec2base">dec2base</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>Balisc 2</revnumber>
                <revremark>Function <function>base2dec</function> was improved and rewritten from scratch.</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>

function writedata(name, data)
    f = mopen(TMPDIR + "/" + name + ".dat", "wb");
    for i=1:size(data)
        mput(data(i), name)
    end
    mclose(f);
endfunction
function res = readdata(name, len)
    f = mopen(TMPDIR + "/" + name + ".dat", "rb");
    res = mget(len, "uc", f);
    mclose(f);
endfunction
u8 = uint8(123);
u16 = uint16(45678);
u32 = uint32(123456);
u64 = uint64(123456);
s8 = int8(-123);
s16 = int16(-23456);
s32 = int32(-123456);
s64 = int64(-123456);
ref_l   = hex2dec(["85" "FF" "FF" "FF" "FF" "FF" "FF" "FF" "60" "A4" "FF" "FF" "FF" "FF" "FF" "FF" "C0" "1D" "FE" "FF" "FF" "FF" "FF" "FF" "C0" "1D" "FE" "FF" "FF" "FF" "FF" "FF"]);
ref_ll  = hex2dec(["85" "FF" "FF" "FF" "FF" "FF" "FF" "FF" "60" "A4" "FF" "FF" "FF" "FF" "FF" "FF" "C0" "1D" "FE" "FF" "FF" "FF" "FF" "FF" "C0" "1D" "FE" "FF" "FF" "FF" "FF" "FF"]);
ref_i   = hex2dec(["85" "FF" "FF" "FF" "60" "A4" "FF" "FF" "C0" "1D" "FE" "FF" "C0" "1D" "FE" "FF"]);
ref_il  = hex2dec(["85" "FF" "FF" "FF" "60" "A4" "FF" "FF" "C0" "1D" "FE" "FF" "C0" "1D" "FE" "FF"]);
ref_s   = hex2dec(["85" "FF" "60" "A4" "C0" "1D" "C0" "1D"]);
ref_sl  = hex2dec(["85" "FF" "60" "A4" "C0" "1D" "C0" "1D"]);
ref_ul  = hex2dec(["7B" "00" "00" "00" "00" "00" "00" "00" "6E" "B2" "00" "00" "00" "00" "00" "00" "40" "E2" "01" "00" "00" "00" "00" "00" "40" "E2" "01" "00" "00" "00" "00" "00"]);
ref_ui  = hex2dec(["7B" "00" "00" "00" "6E" "B2" "00" "00" "40" "E2" "01" "00" "40" "E2" "01" "00"]);
ref_us  = hex2dec(["7B" "00" "6E" "B2" "40" "E2" "40" "E2"]);
ref_lb  = hex2dec(["FF" "FF" "FF" "FF" "FF" "FF" "FF" "85" "FF" "FF" "FF" "FF" "FF" "FF" "A4" "60" "FF" "FF" "FF" "FF" "FF" "FE" "1D" "C0" "FF" "FF" "FF" "FF" "FF" "FE" "1D" "C0"]);
ref_ib  = hex2dec(["FF" "FF" "FF" "85" "FF" "FF" "A4" "60" "FF" "FE" "1D" "C0" "FF" "FE" "1D" "C0"]);
ref_sb  = hex2dec(["FF" "85" "A4" "60" "1D" "C0" "1D" "C0"]);
ref_ulb = hex2dec(["00" "00" "00" "00" "00" "00" "00" "7B" "00" "00" "00" "00" "00" "00" "B2" "6E" "00" "00" "00" "00" "00" "01" "E2" "40" "00" "00" "00" "00" "00" "01" "E2" "40"]);
ref_uib = hex2dec(["00" "00" "00" "7B" "00" "00" "B2" "6E" "00" "01" "E2" "40" "00" "01" "E2" "40"]);
ref_usb = hex2dec(["00" "7B" "B2" "6E" "E2" "40" "E2" "40"]);
ref_ull = hex2dec(["7B" "00" "00" "00" "00" "00" "00" "00" "6E" "B2" "00" "00" "00" "00" "00" "00" "40" "E2" "01" "00" "00" "00" "00" "00" "40" "E2" "01" "00" "00" "00" "00" "00"]);
ref_uil = hex2dec(["7B" "00" "00" "00" "6E" "B2" "00" "00" "40" "E2" "01" "00" "40" "E2" "01" "00"]);
ref_usl = hex2dec(["7B" "00" "6E" "B2" "40" "E2" "40" "E2"]);
writedata("l", list(s8, s16, s32, s64));
assert_checkequal(readdata("l", 32), ref_l);
writedata("i", list(s8, s16, s32, s64));
assert_checkequal(readdata("i", 16), ref_i);
writedata("ll", list(s8, s16, s32, s64));
assert_checkequal(readdata("ll", 32), ref_ll);
writedata("il", list(s8, s16, s32, s64));
assert_checkequal(readdata("il", 16), ref_il);
writedata("s", list(s8, s16, s32, s64));
assert_checkequal(readdata("s", 8), ref_s);
writedata("sl", list(s8, s16, s32, s64));
assert_checkequal(readdata("sl", 8), ref_sl);
writedata("ul", list(u8, u16, u32, u64));
assert_checkequal(readdata("ul", 32), ref_ul);
writedata("ui", list(u8, u16, u32, u64));
assert_checkequal(readdata("ui", 16), ref_ui);
writedata("us", list(u8, u16, u32, u64));
assert_checkequal(readdata("us", 8), ref_us);
writedata("lb", list(s8, s16, s32, s64));
assert_checkequal(readdata("lb", 32), ref_lb);
writedata("ib", list(s8, s16, s32, s64));
assert_checkequal(readdata("ib", 16), ref_ib);
writedata("sb", list(s8, s16, s32, s64));
assert_checkequal(readdata("sb", 8), ref_sb);
writedata("ulb", list(u8, u16, u32, u64));
assert_checkequal(readdata("ulb", 32), ref_ulb);
writedata("uib", list(u8, u16, u32, u64));
assert_checkequal(readdata("uib", 16), ref_uib);
writedata("usb", list(u8, u16, u32, u64));
assert_checkequal(readdata("usb", 8), ref_usb);
writedata("ull", list(u8, u16, u32, u64));
assert_checkequal(readdata("ull", 32), ref_ull);
writedata("uil", list(u8, u16, u32, u64));
assert_checkequal(readdata("uil", 16), ref_uil);
writedata("usl", list(u8, u16, u32, u64));
assert_checkequal(readdata("usl", 8), ref_usl);

/* Balisc (https://github.com/rdbyk/balisc/)
 * 
 * Copyright (C) 2017 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */

%{
// Balisc (https://github.com/rdbyk/balisc/)
//
// Copyright (C) 2017 - Dirk Reusch, Kybernetik Dr. Reusch
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// 02110-1301, USA.
//

/* Function "getVariableValueDefinedInScilab" (cf. end of file)
 *
 * Copyright (C) 2009 - DIGITEO - Allan CORNET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2017 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <wchar.h>
#include "context.hxx"
#include "string.hxx"
#include "filesep.h"
#include "expandPathVariable.h"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
#include "getlongpathname.h"
#include "os_string.h"
#include "strlen.h"
}

#define FILESEPS_STR "/\\"
#define FILESEPS_WSTR L"/\\"

struct alias {char *name; wchar_t *true_name; symbol::Variable* variable;};
%}

%language=C++
%global-table
%define string-pool-name aliases
%define word-array-name aliaslist
%define lookup-function-name lookup_alias
%define class-name Hash
%struct-type

struct alias
%%
SCIHOME, L"SCIHOME", NULL
SCI, L"SCI", NULL
#ifdef _WIN64
WSCI, L"WSCI", NULL
#endif
"~", L"home", NULL
HOME, L"home", NULL
home, L"home", NULL
TMPDIR, L"TMPDIR", NULL
%%
static wchar_t *getVariableValueDefinedInScilab(struct alias* a);

wchar_t *expandPathVariableW(const wchar_t *wcstr)
{
    size_t n = wcscspn(wcstr, FILESEPS_WSTR);

    if (n)
    {
        wchar_t* s = os_wcsdup(wcstr);
        // terminate string at first file separator
        s[n] = L'\0';
        char* e = wide_string_to_UTF8(s);
        struct alias* a = Hash::lookup_alias(e, n);
        FREE(s);
        FREE(e);

        if (a)
        {
            wchar_t* w = getVariableValueDefinedInScilab(a);

            if (w)
            {
                wchar_t* p = (wchar_t*)MALLOC((wcslen(wcstr) + wcslen(w) - n + 1) * sizeof(wchar_t));
                if (p)
                {
                    wcscat(wcpcpy(p, w), &(wcstr[n]));
                    FileSep::Normalize(p);
                }

                FREE(w);

                return p;
            }
        }
    }

    wchar_t* p = os_wcsdup(wcstr);

    if (p)
    {
        FileSep::Normalize(p);
    }

    return p;
}

char *expandPathVariable(const char* str)
{
    if (str)
    {
        size_t n = strcspn(str, FILESEPS_STR);

        if (n)
        {
            char* e = strndup(str, n);
            struct alias* a = Hash::lookup_alias(e, n);
            FREE(e);

            if (a)
            {
                wchar_t* w = getVariableValueDefinedInScilab(a);

                if (w)
                {
                    char* v = wide_string_to_UTF8(w);
                    FREE(w);

                    char* p = (char*)MALLOC((balisc_strlen(str) + balisc_strlen(v) - n + 1) * sizeof(char));
                    if (p)
                    {
                        strcat(stpcpy(p, v), &(str[n]));
                        FileSep::Normalize(p);
                    }

                    FREE(v);

                    return p;
                }
            }
        }

        char* p = os_strdup(str);

        if (p)
        {
            FileSep::Normalize(p);
        }

        return p;
    }
    else
    {
        return NULL;
    }
}

void resetVariableValueDefinedInScilab(void)
{
    for (int i = 0; i <= MAX_HASH_VALUE; ++i)
    {
        if (aliaslist[i].name[0] != '\0')
        {
            aliaslist[i].variable = NULL;
        }
    }
}

/* Function "getVariableValueDefinedInScilab"
 *
 * Copyright (C) 2009 - DIGITEO - Allan CORNET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2017 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

wchar_t *getVariableValueDefinedInScilab(struct alias* a)
{
    if (a->variable == NULL)
    {
        a->variable = symbol::Context::getInstance()->getOrCreate(symbol::Symbol(a->true_name));
    }

    types::InternalType *pIT = a->variable->get();

    if (pIT == NULL || pIT->isString() == false)
    {
        return NULL;
    }

    BOOL bConvLong = FALSE;
    types::String* pS = pIT->getAs<types::String>();

    return getlongpathnameW(pS->getFirst(), &bConvLong);
}

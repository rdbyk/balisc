// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2009 - DIGITEO - Sylvestre KOUMAR
// Copyright (C) 2019 - Samuel GOUGEON
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
<<<<<<< HEAD
// <-- TEST WITH TREE -->
lines(0)
// test to check the dumped tree
// tree dumping error test
refMsg = msprintf(_("%s: Wrong number of input arguments: %d to %d expected.\n"), "uiDumpTree",1,2);
assert_checkerror("uiDumpTree()", refMsg);
refMsg = msprintf(_("%s: Wrong type for input argument #%d: uitree expected.\n"), "uiDumpTree",1);
assert_checkerror("uiDumpTree(123)", refMsg);
assert_checkerror("uiDumpTree(123, 123)", refMsg);
assert_checkerror("uiDumpTree(123, %F)", refMsg);
assert_checkerror("uiDumpTree(123, %T)", refMsg);
refMsg = msprintf(_("Wrong number of input arguments."));
assert_checkerror("uiDumpTree(123, 123, 123)", refMsg);
// node creation
=======
// Unitary tests for uiDumpTree()
// ==============================
// DISPLAY
// -------
// Leaves, nodes, branches and tree creation
node1 = uiCreateNode("Node 1", "iconNode1", "callbackNode1");
>>>>>>> 1a0cb03... * Bug 16129 fixed: uiDumpTree() troubles with %, \n, \r, \t
leaf11 = uiCreateNode("leaf 1.1", "iconLeaf1.1", "callbackLeaf1.1");
leaf12 = uiCreateNode("leaf 1.2", "iconLeaf1.2", "callbackLeaf1.2");
treeNode1 = uiCreateTree(node1, leaf11, leaf12);
node2 = uiCreateNode("Node 2", "iconNode2", "callbackNode2");
node3 = uiCreateNode("Node 3", "iconNode3", "callbackNode3");
leaf31 = uiCreateNode("leaf 3.1", "iconLeaf3.1", "callbackLeaf3.1");
leaf32 = uiCreateNode("leaf 3.2", "iconLeaf3.2", "callbackLeaf3.2");
treeNode3 = uiCreateTree(node3, leaf31, leaf32);
root = uiCreateNode("Root", "iconRoot", "callbackRoot");
treeRoot = uiCreateTree(root, treeNode1, node2, treeNode3);
// Dumping leaves
uiDumpTree(leaf11);
<<<<<<< HEAD
|_./ leaf 1.1
uiDumpTree(leaf11,%F);
|_./ leaf 1.1
uiDumpTree(leaf11,%T);
|_./ leaf 1.1
| `- iconLeaf1.1
| `- callbackLeaf1.1
// wrong inputs
refMsg = msprintf(_("%s: Wrong type for input argument #%d: Boolean expected.\n"), "uiDumpTree",2);
assert_checkerror("uiDumpTree(leaf11,123)", refMsg);
// node creation with errors
refMsg = msprintf(_("%s: Wrong number of input arguments: %d to %d expected.\n"), "uiCreateNode",1,3);
assert_checkerror("myErrorNode1 = uiCreateNode()", refMsg);
// right inputs
refMsg = msprintf(_("Undefined variable: %s\n"), "myErrorNode1");
assert_checkerror("uiDumpTree(myErrorNode1)", refMsg);
assert_checkerror("uiDumpTree(myErrorNode1, %F)", refMsg);
assert_checkerror("uiDumpTree(myErrorNode1, %T)", refMsg);
//wrong
assert_checkerror("uiDumpTree(myErrorNode1, 123)", refMsg);
refMsg = msprintf(_("%s: Wrong type for input argument #%d: String expected.\n"), "uiCreateNode",1);
assert_checkerror("myErrorNode2 = uiCreateNode(123)", refMsg);
assert_checkerror("myErrorNode3 = uiCreateNode(123, ''icon of My Node'')", refMsg);
// right inputs
refMsg = msprintf(_("%s: Wrong type for input argument #%d: String expected.\n"), "uiCreateNode",2);
assert_checkerror("myErrorNode4 = uiCreateNode(''My Node'', 123)", refMsg);
refMsg = msprintf(gettext("%s: Wrong type for input argument #%d: String expected.\n"), "uiCreateNode",1);
assert_checkerror("myErrorNode5 = uiCreateNode(123, ''icon of My Node'', ''callback of My Node'')", refMsg);
refMsg = msprintf(gettext("%s: Wrong type for input argument #%d: String expected.\n"), "uiCreateNode",2);
assert_checkerror("myErrorNode6 = uiCreateNode(''My Node'', 123, ''callback of My Node'')", refMsg);
refMsg = msprintf(gettext("%s: Wrong type for input argument #%d: String expected.\n"), "uiCreateNode",3);
assert_checkerror("myErrorNode6 = uiCreateNode(''My Node'', ''icon of My Node'', 123)", refMsg);
refMsg = msprintf(_("Wrong number of input arguments."));
assert_checkerror("myErrorNode8 = uiCreateNode(''My Node'', ''icon of My Node'', ''callback of My Node'', ''test'')", refMsg);
assert_checkerror("myErrorNode9 = uiCreateNode(''My Node'', ''icon of My Node'', ''callback of My Node'', 123)", refMsg);
// tree creation
=======
  |_./ leaf 1.1
uiDumpTree(leaf11, %F);
  |_./ leaf 1.1
uiDumpTree(leaf11, %T);
  |_./ leaf 1.1
  | `- iconLeaf1.1
  | `- callbackLeaf1.1
// Dumping a single naked node
>>>>>>> 1a0cb03... * Bug 16129 fixed: uiDumpTree() troubles with %, \n, \r, \t
treeOnlyNode1 = uiCreateTree(node1);
uiDumpTree(treeOnlyNode1);
  |_./ Node 1
uiDumpTree(treeOnlyNode1,%F);
  |_./ Node 1
uiDumpTree(treeOnlyNode1,%T);
  |_./ Node 1
  | `- iconNode1
  | `- callbackNode1
// Dumping a single node with leaves
uiDumpTree(treeNode1);
  |_./ Node 1
  | |_./ leaf 1.1
  | |_./ leaf 1.2
uiDumpTree(treeNode1, %F);
  |_./ Node 1
  | |_./ leaf 1.1
  | |_./ leaf 1.2
uiDumpTree(treeNode1, %T);
  |_./ Node 1
  | `- iconNode1
  | `- callbackNode1
  | |_./ leaf 1.1
  | | `- iconLeaf1.1
  | | `- callbackLeaf1.1
  | |_./ leaf 1.2
  | | `- iconLeaf1.2
  | | `- callbackLeaf1.2
// Dumping the whole tree
uiDumpTree(treeRoot);
  |_./ Root
  | |_./ Node 1
  | | |_./ leaf 1.1
  | | |_./ leaf 1.2
  | |_./ Node 2
  | |_./ Node 3
  | | |_./ leaf 3.1
  | | |_./ leaf 3.2
uiDumpTree(treeRoot,%F);
  |_./ Root
  | |_./ Node 1
  | | |_./ leaf 1.1
  | | |_./ leaf 1.2
  | |_./ Node 2
  | |_./ Node 3
  | | |_./ leaf 3.1
  | | |_./ leaf 3.2
uiDumpTree(treeRoot,%T);
<<<<<<< HEAD
|_./ Root
| `- iconRoot
| `- callbackRoot
| |_./ Node 1
| | `- iconNode1
| | `- callbackNode1
| |_./ Node 2
| | `- iconNode2
| | `- callbackNode2
| |_./ Node 3
| | `- iconNode3
| | `- callbackNode3
// wrong inputs
refMsg = msprintf(_("%s: Wrong type for input argument #%d: Boolean expected.\n"), "uiDumpTree",2);
assert_checkerror("uiDumpTree(treeRoot,123)", refMsg);
// tree creation with wrong inputs
refMsg = msprintf(_("%s: Wrong number of input arguments: At least %d expected.\n"), "uiCreateTree",1);
assert_checkerror("uiCreateTree()", refMsg);
// right inputs
=======
  |_./ Root
  | `- iconRoot
  | `- callbackRoot
  | |_./ Node 1
  | | `- iconNode1
  | | `- callbackNode1
  | | |_./ leaf 1.1
  | | | `- iconLeaf1.1
  | | | `- callbackLeaf1.1
  | | |_./ leaf 1.2
  | | | `- iconLeaf1.2
  | | | `- callbackLeaf1.2
  | |_./ Node 2
  | | `- iconNode2
  | | `- callbackNode2
  | |_./ Node 3
  | | `- iconNode3
  | | `- callbackNode3
  | | |_./ leaf 3.1
  | | | `- iconLeaf3.1
  | | | `- callbackLeaf3.1
  | | |_./ leaf 3.2
  | | | `- iconLeaf3.2
  | | | `- callbackLeaf3.2
// % "\n" "\r" "\t" in contents (http://bugzilla.scilab.org/16129)
// ----------------------------
node1 = uiCreateNode("c:\nine %", "c:\nine\ic%on", "\nine\callback%d");
leaf11 = uiCreateNode("c:\ni#ne\return", "c:\nine\return\icon", "c:\nine\return\callback");
leaf12 = uiCreateNode("c:\nine\tabs", "c:\nine\tabs\icon", "c:\nine\tabs\callback");
treeNode1 = uiCreateTree(node1, leaf11, leaf12);
root = uiCreateNode("\root", "\root\icon", "\root\callback");
treeRoot = uiCreateTree(root, treeNode1, node1, treeNode1);
uiDumpTree(treeRoot, %F);
  |_./ \root
  | |_./ c:\nine %
  | | |_./ c:\ni#ne\return
  | | |_./ c:\nine\tabs
  | |_./ c:\nine %
  | |_./ c:\nine %
  | | |_./ c:\ni#ne\return
  | | |_./ c:\nine\tabs
uiDumpTree(treeRoot, %T);
  |_./ \root
  | `- \root\icon
  | `- \root\callback
  | |_./ c:\nine %
  | | `- c:\nine\ic%on
  | | `- \nine\callback%d
  | | |_./ c:\ni#ne\return
  | | | `- c:\nine\return\icon
  | | | `- c:\nine\return\callback
  | | |_./ c:\nine\tabs
  | | | `- c:\nine\tabs\icon
  | | | `- c:\nine\tabs\callback
  | |_./ c:\nine %
  | | `- c:\nine\ic%on
  | | `- \nine\callback%d
  | |_./ c:\nine %
  | | `- c:\nine\ic%on
  | | `- \nine\callback%d
  | | |_./ c:\ni#ne\return
  | | | `- c:\nine\return\icon
  | | | `- c:\nine\return\callback
  | | |_./ c:\nine\tabs
  | | | `- c:\nine\tabs\icon
  | | | `- c:\nine\tabs\callback
// Errors messages
// ---------------
// Undefined input
>>>>>>> 1a0cb03... * Bug 16129 fixed: uiDumpTree() troubles with %, \n, \r, \t
refMsg = msprintf(_("Undefined variable: %s\n"), "myTree");
assert_checkerror("uiDumpTree(myTree)", refMsg);
assert_checkerror("uiDumpTree(myTree, %F)", refMsg);
assert_checkerror("uiDumpTree(myTree, %T)", refMsg);
assert_checkerror("uiDumpTree(myTree, 123)", refMsg);
// Wrong number of input arguments
refMsg = msprintf(_("%s: Wrong number of input arguments: %d to %d expected.\n"), "uiDumpTree",1,2);
assert_checkerror("uiDumpTree()", refMsg);
refMsg = msprintf(_("Wrong number of input arguments.\n"));
assert_checkerror("uiDumpTree(123, 123, 123)", refMsg);
// Wrong type of input argument
refMsg = msprintf(_("%s: Wrong type for input argument #%d: uitree expected.\n"), "uiDumpTree",1);
assert_checkerror("uiDumpTree(123)", refMsg);
assert_checkerror("uiDumpTree(123, 123)", refMsg);
assert_checkerror("uiDumpTree(123, %F)", refMsg);
assert_checkerror("uiDumpTree(123, %T)", refMsg);
refMsg = msprintf(_("%s: Wrong type for input argument #%d: Boolean expected.\n"), "uiDumpTree",2);
assert_checkerror("uiDumpTree(treeRoot,123)", refMsg);

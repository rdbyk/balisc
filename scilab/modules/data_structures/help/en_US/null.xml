<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) INRIA
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Samuel GOUGEON
 * Copyrigth (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML"
        xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"
        xml:lang="en" xml:id="null">
    <refnamediv>
        <refname>null</refname>
        <refpurpose>delete list element</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            a = null()
            b(i) = null()
            c.d = null()
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Description</title>
        <para>
            <literal>a = null()</literal> assigns a list delete object to a variable <literal>a</literal>.
        </para>
        <para>
            <literal>b(i) = null()</literal> removes, i.e. deletes, the i<superscript>th</superscript> element from a list <literal>b</literal>. 
        </para>
        <para>
            <literal>c.d = null()</literal> may be used to remove a field <literal>d</literal> from a mlist or tlist <literal>c</literal>.
            Please note, that this requires a priori appropriate overloading of the list delete operation (cf. Examples below).
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para><emphasis role="bold">type, typeof, and null overloading code</emphasis>:</para>
        <programlisting role="example"><![CDATA[
type(null())
typeof(null())
null()==null()
 ]]></programlisting>
            <screen><![CDATA[
--> type(null())
 ans  =
   0.

--> typeof(null())
 ans  =
 listdelete

--> null()==null()

Undefined operation for the given operands.
check or define function %0_o_0 for overloading.
]]></screen>
        <para><emphasis role="bold">Deletion of a list element</emphasis>:</para>
        <programlisting role="example"><![CDATA[
L = list(1:10, "foo", %f, (1-%z)^2);
length(L)
L(2) = null();
length(L)
L(2)
 ]]></programlisting>
    <screen><![CDATA[
--> length(L)
 ans  =
   4.

--> L(2) = null();

--> length(L)
 ans  =
   3.

--> L(2)
 ans  =
  F
]]></screen>
    <para>
        <emphasis role="bold">Deletion of a field of a Mlist or Tlist</emphasis>: No default
        destructor is defined:
    </para>
    <programlisting role="example" id="null_tlist_mlist_overload"><![CDATA[
ML = mlist(["test" "b" "c" "rp" "t"],[%t %f], %i, 1+%s^2, ["abc" "de" "f"]);
fieldnames(ML)'
ML.rp
ML.rp = null()
]]></programlisting>
    <screen><![CDATA[
--> fieldnames(ML)'
 ans  =
!b  c  rp  t  !

--> ML.rp
 ans  =
       2
   1 +s

--> ML.rp = null()

Function not defined for given argument type(s),
  check arguments or define function %0_i_test for overloading.
]]></screen>
    <programlisting role="example"><![CDATA[
// Let's define a field destructor called by "= null()":

function L = %0_i_test(fieldName, Null, L)
    header = getfield(1,L)
    i = find(header==fieldName);
    if i~=[] then
        header(i) = [];
        L = setfield(1, header, L);
        L = setfield(i, null(), L);
    end
endfunction

// Let's use it:
ML.rp = null();
fieldnames(ML)'
ML.b, ML.c, ML.t
]]></programlisting>
    <screen><![CDATA[
--> ML.rp = null();
--> fieldnames(ML)'
 ans  =
!b  c  t  !

--> ML.b, ML.c, ML.t
 ans  =
  T F

 ans  =
   i

 ans  =
!abc  de  f  !
]]></screen>
    </refsection>
    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="rmfield">rmfield</link>
            </member>
            <member>
                <link linkend="insert">insert</link>
            </member>
            <member>
                <link linkend="void">void</link>
            </member>
            <member>
                <link linkend="delete">delete</link>
            </member>
            <member>
                <link linkend="xmlDelete">xmlDelete</link>
            </member>
            <member>
                <link linkend="jremove">jremove</link>
            </member>
            <member>
                <link linkend="jnull">jnull</link>
            </member>
            <member>
                <link linkend="jvoid">jvoid</link>
            </member>
            <member>
                <link linkend="list">list</link>
            </member>
            <member>
                <link linkend="mlist">mlist</link>
            </member>
            <member>
                <link linkend="tlist">tlist</link>
            </member>
            <member>
                <link linkend="struct">struct</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>Balisc 1</revnumber>
                <revremark>Assigning <function>null()</function> to a struct field does not delete it any more.</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>

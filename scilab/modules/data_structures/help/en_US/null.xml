<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) INRIA
 * Copyright (C) 2018 - Samuel GOUGEON
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML"
        xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"
        xml:lang="en" xml:id="null">
    <refnamediv>
        <refname>null</refname>
        <refpurpose>deletes a list component or a field of a structure, Mlist, or Tlist</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            List(i) = null()
            Struct.field = null()
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Description</title>
        <para>
            <literal>List</literal> being a simple list, <literal>List(i)=[]</literal> sets
            <literal>[]</literal> as the value of the i<superscript>th</superscript> component.
            Hence, <literal>[]</literal> can't be used with lists to remove some parts of the
            left-hand-side (LHS) object, as it can do it for regular vectors or arrays .
        </para>
        <para>
            <literal>null()</literal> aims to do it. It generates an object of type 0 and
            typeof <literal>listdelete</literal> that deletes the object to which it is assigned.
        </para>
        <note>
            The overloading code of <literal>listdelete</literal> objects is 0.
        </note>
        <warning>
            Assigning <literal>null()</literal> to a variable deletes it. However, using
            <code>clear</code> should be preferred to clear named objects.
        </warning>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para><emphasis role="bold">type, typeof, and null overloading code</emphasis>:</para>
        <programlisting role="example"><![CDATA[
type(null())
typeof(null())
null()==null()
 ]]></programlisting>
            <screen><![CDATA[
--> type(null())
 ans  =
   0.

--> typeof(null())
 ans  =
 listdelete

--> null()==null()

Undefined operation for the given operands.
check or define function %0_o_0 for overloading.
]]></screen>
        <para><emphasis role="bold">Deletion of a list component</emphasis>:</para>
        <programlisting role="example"><![CDATA[
L = list(1:10, "foo", %f, (1-%z)^2);
length(L)
L(2) = null();
length(L)
L(2)
 ]]></programlisting>
    <screen><![CDATA[
--> length(L)
 ans  =
   4.

--> L(2) = null();

--> length(L)
 ans  =
   3.

--> L(2)
 ans  =
  F
]]></screen>
    <para><emphasis role="bold">Deletion of a field of a structure</emphasis>:</para>
    <programlisting role="example"><![CDATA[
s(2,3).r = %pi;
s(2,1).p = (1-%z)^2;
s(1,2).b = %T
s.p = null()
 ]]></programlisting>
    <screen><![CDATA[
--> s(2,3).r = %pi;
--> s(2,1).p = (1-%z)^2;
--> s(1,2).b = %T
 s  =
  2x3 struct array with fields:
    r
    p
    b

--> s.p = null()
 s  =
  2x3 struct array with fields:
    r
    b
]]></screen>
    <para>
        <emphasis role="bold">Deletion of a field of a Mlist or Tlist</emphasis>: No default
        destructor is defined:
    </para>
    <programlisting role="example" id="null_tlist_mlist_overload"><![CDATA[
ML = mlist(["test" "b" "c" "rp" "t"],[%t %f], %i, 1+%s^2, ["abc" "de" "f"]);
fieldnames(ML)'
ML.rp
ML.rp = null()
]]></programlisting>
    <screen><![CDATA[
--> fieldnames(ML)'
 ans  =
!b  c  rp  t  !

--> ML.rp
 ans  =
       2
   1 +s

--> ML.rp = null()

Function not defined for given argument type(s),
  check arguments or define function %0_i_test for overloading.
]]></screen>
    <programlisting role="example"><![CDATA[
// Let's define a field destructor called by "= null()":

function L = %0_i_test(fieldName, Null, L)
    header = getfield(1,L)
    i = find(header==fieldName);
    if i~=[] then
        header(i) = [];
        L = setfield(1, header, L);
        L = setfield(i, null(), L);
    end
endfunction

// Let's use it:
ML.rp = null();
fieldnames(ML)'
ML.b, ML.c, ML.t
]]></programlisting>
    <screen><![CDATA[
--> ML.rp = null();
--> fieldnames(ML)'
 ans  =
!b  c  t  !

--> ML.b, ML.c, ML.t
 ans  =
  T F

 ans  =
   i

 ans  =
!abc  de  f  !
]]></screen>
    </refsection>
    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="clear">clear</link>
            </member>
            <member>
                <link linkend="clearglobal">clearglobal</link>
            </member>
            <member>
                <link linkend="empty">[]</link>
            </member>
            <member>
                <link linkend="delete">delete</link>
            </member>
            <member>
                <link linkend="xmlDelete">xmlDelete</link>
            </member>
            <member>
                <link linkend="jremove">jremove</link>
            </member>
            <member>
                <link linkend="jnull">jnull</link>
            </member>
            <member>
                <link linkend="jvoid">jvoid</link>
            </member>
            <member>
                <link linkend="list">list</link>
            </member>
            <member>
                <link linkend="mlist">mlist</link>
            </member>
            <member>
                <link linkend="tlist">tlist</link>
            </member>
            <member>
                <link linkend="struct">struct</link>
            </member>
        </simplelist>
    </refsection>
</refentry>

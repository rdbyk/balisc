assert_checktrue(importXcosDiagram("SCI/modules/xcos/tests/unit_tests/tows_c.zcos"));
Info = scicos_simulate(scs_m);
t = (2.2 : 0.1 : 14.9)';
A_ref = struct("values", sin(t), "time", t);
imgM_ref = [1+2*%i 3+4*%i ; 1 2];
imgV_ref = ones(128, 2);
imgV_ref = (1+%i)*imgV_ref;
imgV_ref(:, 2) = 2*imgV_ref(:, 2);
intM1_ref = int32([1 2 ; 3 4]);
intV_ref = int32(ones(128, 2));
intV_ref = 5*intV_ref;
intV_ref(:, 2) = intV_ref(:, 2) + 1;
shortV_ref = int16(ones(128, 2));
shortV_ref = 7*shortV_ref;
shortV_ref(:, 2) = shortV_ref(:, 2) + 1;
charV_ref = int8(ones(128, 2));
charV_ref = 9*charV_ref;
charV_ref(:, 2) = charV_ref(:, 2) + 1;
intM2_ref = int32([11 12 ; 13 14]);
shortM_ref = int16([15 16; 17 18]);
charM_ref = int8([19 20 ; 21 22]);
nineteen_ref = struct("values", ones(128,1), "time", t);
try scicos_simulate(scs_m, Info); catch disp(lasterror()); end
assert_checkequal(fieldnames(A), fieldnames(A_ref));
assert_checkalmostequal(A.values, A_ref.values);
assert_checkalmostequal(A.time, A_ref.time);
assert_checkequal(fieldnames(B), fieldnames(A_ref));
assert_checkalmostequal(B.values, A_ref.values);
assert_checkequal(fieldnames(C), fieldnames(A_ref));
assert_checkalmostequal(C.values, A_ref.values);
assert_checktrue(imgV.values   == imgV_ref);
assert_checktrue(intV.values   == intV_ref);
assert_checktrue(shortV.values == shortV_ref);
assert_checktrue(charV.values  == charV_ref);
for i = 1:128
    // Check that the following are hypermatrices with correct values
    assert_checktrue(and(imgM.values(:, :, i)   == imgM_ref));
    assert_checktrue(and(intM1.values(:, :, i)  == intM1_ref));
    assert_checktrue(and(intM2.values(:, :, i)  == intM2_ref));
    assert_checktrue(and(shortM.values(:, :, i) == shortM_ref));
    assert_checktrue(and(charM.values(:, :, i)  == charM_ref));
end
assert_checkalmostequal(nineteen19Letters19.values, nineteen_ref.values);
assert_checkalmostequal(nineteen19Letters19.time, nineteen_ref.time);
try xcos_simulate(scs_m, 4); catch disp(lasterror()); end
assert_checkequal(fieldnames(A), fieldnames(A_ref));
assert_checkalmostequal(A.values, A_ref.values);
assert_checkalmostequal(A.time, A_ref.time);
assert_checkequal(fieldnames(B), fieldnames(A_ref));
assert_checkalmostequal(B.values, A_ref.values);
assert_checkequal(fieldnames(C), fieldnames(A_ref));
assert_checkalmostequal(C.values, A_ref.values);
assert_checktrue(imgV.values   == imgV_ref);
assert_checktrue(intV.values   == intV_ref);
assert_checktrue(shortV.values == shortV_ref);
assert_checktrue(charV.values  == charV_ref);
for i = 1:128
    // Check that the following are hypermatrices with correct values
    assert_checktrue(and(imgM.values(:, :, i)   == imgM_ref));
    assert_checktrue(and(intM1.values(:, :, i)  == intM1_ref));
    assert_checktrue(and(intM2.values(:, :, i)  == intM2_ref));
    assert_checktrue(and(shortM.values(:, :, i) == shortM_ref));
    assert_checktrue(and(charM.values(:, :, i)  == charM_ref));
end
assert_checkalmostequal(nineteen19Letters19.values, nineteen_ref.values);
assert_checkalmostequal(nineteen19Letters19.time, nineteen_ref.time);
assert_checkequal(type(A.values), 1);
assert_checkequal(type(imgV.values(1)), 1);
assert_checkequal(type(imgM.values(:, :, 1)), 1);
assert_checkequal(type(intM1.values(1)), 8);
assert_checkequal(type(intV.values(1)), 8);
assert_checkequal(type(shortV.values(1)), 8);
assert_checkequal(type(charV.values(1)), 8);
assert_checkequal(type(intM2.values(1)), 8);
assert_checkequal(type(shortM.values(1)), 8);
assert_checkequal(type(charM.values(1)), 8);
assert_checkequal(inttype(intM1.values(1)), 4);
assert_checkequal(inttype(intV.values(1)), 4);
assert_checkequal(inttype(shortV.values(1)), 2);
assert_checkequal(inttype(charV.values(1)), 1);
assert_checkequal(inttype(intM2.values(1)), 4);
assert_checkequal(inttype(shortM.values(1)), 2);
assert_checkequal(inttype(charM.values(1)), 1);

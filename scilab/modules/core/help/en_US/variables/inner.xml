<?xml version="1.0" encoding="UTF-8"?>
<!--
// Balisc (https://github.com/rdbyk/balisc/)
// 
// Copyright (C) 2019 Dirk Reusch, Kybernetik Dr. Reusch
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
// 02110-1301, USA.
-->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="inner">
    <refnamediv>
        <refname>inner</refname>
        <refpurpose>variables in inner scope</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>inner(name)
            inner(name, value)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
    <title>Arguments</title>
    <variablelist>
        <varlistentry>
            <term>name</term>
            <listitem>
                <para>string.</para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>value</term>
            <listitem>
                <para>arbitrary.</para>
            </listitem>
        </varlistentry>
    </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Utility function to move or create a variable <term>name</term> to or in the inner (current)
            scope.
        </para>
        <para>
        <variablelist>
            <varlistentry>
                <term>inner(name)</term>
                <listitem>
                    <para>Move an existent variable <term>name</term> to the inner (current)
                    scope.</para>
                </listitem>
            </varlistentry>
            <varlistentry></varlistentry>
            <varlistentry>
                <term>inner(name, value)</term>
                <listitem>
                    <para>Moves an existent variable <term>name</term> to the inner (current) scope
                    and assigns a new <term>value</term> to it.</para>
                    <para>Creates a non-existent variable <term>name</term> in the inner (current)
                    scope and assigns a new <term>value</term> to it.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
eggs=123

function eat_eggs(), inner("eggs"), mprintf("eating %d ...", eggs), end

eat_eggs()

// "eggs" was moved into the local scope of "eat_eggs",
// thus after the execution of "eat_eggs", the variable
// "eggs" is not defined any more ...
isdef("eggs")
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="outer">outer</link>
            </member>
            <member>
                <link linkend="clear">clear</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>Balisc 2</revnumber>
                <revremark>Function <function>inner</function> was introduced.</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
